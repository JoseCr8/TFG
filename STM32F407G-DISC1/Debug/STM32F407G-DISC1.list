
STM32F407G-DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08008468  08008468  00009468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008808  08008808  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008808  08008808  00009808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008810  08008810  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008810  08008810  00009810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008814  08008814  00009814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008818  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          000002f4  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c8  200004c8  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fdcc  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002561  00000000  00000000  00019fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  0001c538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc5  00000000  00000000  0001d468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ec7  00000000  00000000  0001e02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001259a  00000000  00000000  00021ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf6d5  00000000  00000000  0003448e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103b63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050ec  00000000  00000000  00103ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00108c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800844c 	.word	0x0800844c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800844c 	.word	0x0800844c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <Max31865_delay>:

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7
//#########################################################################################################################
void  Max31865_delay(uint32_t delay_ms)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  #if (_MAX31865_USE_FREERTOS == 1)
  osDelay(delay_ms);
  #else
  HAL_Delay(delay_ms);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f001 f975 	bl	8002230 <HAL_Delay>
  #endif  
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <Max31865_readRegisterN>:
//#########################################################################################################################
void Max31865_readRegisterN(Max31865_t *max31865,uint8_t addr, uint8_t *buffer, uint8_t n)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b088      	sub	sp, #32
 8000f52:	af02      	add	r7, sp, #8
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	72fb      	strb	r3, [r7, #11]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	72bb      	strb	r3, [r7, #10]
  uint8_t tmp = 0xFF;
 8000f62:	23ff      	movs	r3, #255	@ 0xff
 8000f64:	75fb      	strb	r3, [r7, #23]
	addr &= 0x7F;
 8000f66:	7afb      	ldrb	r3, [r7, #11]
 8000f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);          
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	889b      	ldrh	r3, [r3, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f001 fbfe 	bl	800277c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6898      	ldr	r0, [r3, #8]
 8000f84:	f107 010b 	add.w	r1, r7, #11
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f002 f94b 	bl	8003226 <HAL_SPI_Transmit>
	while (n--)
 8000f90:	e00c      	b.n	8000fac <Max31865_readRegisterN+0x5e>
	{
    HAL_SPI_TransmitReceive(max31865->spi, &tmp, buffer, 1, 100);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6898      	ldr	r0, [r3, #8]
 8000f96:	f107 0117 	add.w	r1, r7, #23
 8000f9a:	2364      	movs	r3, #100	@ 0x64
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	f002 fa84 	bl	80034ae <HAL_SPI_TransmitReceive>
		buffer++;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
	while (n--)
 8000fac:	7abb      	ldrb	r3, [r7, #10]
 8000fae:	1e5a      	subs	r2, r3, #1
 8000fb0:	72ba      	strb	r2, [r7, #10]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1ed      	bne.n	8000f92 <Max31865_readRegisterN+0x44>
	}
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);      
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	889b      	ldrh	r3, [r3, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f001 fbdb 	bl	800277c <HAL_GPIO_WritePin>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <Max31865_readRegister8>:
//#########################################################################################################################
uint8_t Max31865_readRegister8(Max31865_t *max31865,uint8_t addr)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
	Max31865_readRegisterN(max31865, addr, &ret, 1);
 8000fde:	f107 020f 	add.w	r2, r7, #15
 8000fe2:	78f9      	ldrb	r1, [r7, #3]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffb1 	bl	8000f4e <Max31865_readRegisterN>
	return ret;  
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <Max31865_readRegister16>:
//#########################################################################################################################
uint16_t Max31865_readRegister16(Max31865_t *max31865,uint8_t addr)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	460b      	mov	r3, r1
 8001000:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[2] = {0, 0};
 8001002:	2300      	movs	r3, #0
 8001004:	81bb      	strh	r3, [r7, #12]
	Max31865_readRegisterN(max31865, addr, buffer, 2);
 8001006:	f107 020c 	add.w	r2, r7, #12
 800100a:	78f9      	ldrb	r1, [r7, #3]
 800100c:	2302      	movs	r3, #2
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff9d 	bl	8000f4e <Max31865_readRegisterN>
	uint16_t ret = buffer[0];
 8001014:	7b3b      	ldrb	r3, [r7, #12]
 8001016:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 8001018:	89fb      	ldrh	r3, [r7, #14]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	81fb      	strh	r3, [r7, #14]
	ret |=  buffer[1];
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	461a      	mov	r2, r3
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	4313      	orrs	r3, r2
 8001026:	81fb      	strh	r3, [r7, #14]
	return ret;
 8001028:	89fb      	ldrh	r3, [r7, #14]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <Max31865_writeRegister8>:
//#########################################################################################################################
void Max31865_writeRegister8(Max31865_t *max31865,uint8_t addr, uint8_t data)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	70fb      	strb	r3, [r7, #3]
 800103e:	4613      	mov	r3, r2
 8001040:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);          
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	f001 fb95 	bl	800277c <HAL_GPIO_WritePin>
  addr |= 0x80;
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001058:	b2db      	uxtb	r3, r3
 800105a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);   
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6898      	ldr	r0, [r3, #8]
 8001060:	1cf9      	adds	r1, r7, #3
 8001062:	2364      	movs	r3, #100	@ 0x64
 8001064:	2201      	movs	r2, #1
 8001066:	f002 f8de 	bl	8003226 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(max31865->spi,&data, 1, 100);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6898      	ldr	r0, [r3, #8]
 800106e:	1cb9      	adds	r1, r7, #2
 8001070:	2364      	movs	r3, #100	@ 0x64
 8001072:	2201      	movs	r2, #1
 8001074:	f002 f8d7 	bl	8003226 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);          
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	889b      	ldrh	r3, [r3, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	4619      	mov	r1, r3
 8001084:	f001 fb7a 	bl	800277c <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <Max31865_readFault>:
//#########################################################################################################################
uint8_t Max31865_readFault(Max31865_t *max31865)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return Max31865_readRegister8(max31865, MAX31856_FAULTSTAT_REG);
 8001098:	2107      	movs	r1, #7
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff97 	bl	8000fce <Max31865_readRegister8>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <Max31865_clearFault>:
//#########################################################################################################################
void Max31865_clearFault(Max31865_t *max31865)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80010b2:	2100      	movs	r1, #0
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff8a 	bl	8000fce <Max31865_readRegister8>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73fb      	strb	r3, [r7, #15]
	t &= ~0x2C;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	f023 032c 	bic.w	r3, r3, #44	@ 0x2c
 80010c4:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_FAULTSTAT;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	461a      	mov	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffac 	bl	8001032 <Max31865_writeRegister8>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <Max31865_enableBias>:
//#########################################################################################################################
void Max31865_enableBias(Max31865_t *max31865, uint8_t enable)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80010ee:	2100      	movs	r1, #0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff6c 	bl	8000fce <Max31865_readRegister8>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
	if (enable)
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <Max31865_enableBias+0x28>
		t |= MAX31856_CONFIG_BIAS;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e003      	b.n	8001112 <Max31865_enableBias+0x30>
	else
		t &= ~MAX31856_CONFIG_BIAS;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001110:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	461a      	mov	r2, r3
 8001116:	2100      	movs	r1, #0
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff8a 	bl	8001032 <Max31865_writeRegister8>
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <Max31865_autoConvert>:
//#########################################################################################################################
void Max31865_autoConvert(Max31865_t *max31865, uint8_t enable)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001132:	2100      	movs	r1, #0
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff4a 	bl	8000fce <Max31865_readRegister8>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]
	if (enable)
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <Max31865_autoConvert+0x28>
		t |= MAX31856_CONFIG_MODEAUTO;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e003      	b.n	8001156 <Max31865_autoConvert+0x30>
	else
		t &= ~MAX31856_CONFIG_MODEAUTO; 
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001154:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	461a      	mov	r2, r3
 800115a:	2100      	movs	r1, #0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff68 	bl	8001032 <Max31865_writeRegister8>
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <Max31865_setWires>:
//#########################################################################################################################
void Max31865_setWires(Max31865_t *max31865, uint8_t numWires)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001176:	2100      	movs	r1, #0
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff28 	bl	8000fce <Max31865_readRegister8>
 800117e:	4603      	mov	r3, r0
 8001180:	73fb      	strb	r3, [r7, #15]
	if (numWires == 3)
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d104      	bne.n	8001192 <Max31865_setWires+0x28>
		t |= MAX31856_CONFIG_3WIRE;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e003      	b.n	800119a <Max31865_setWires+0x30>
	else
		t &= ~MAX31856_CONFIG_3WIRE;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	f023 0310 	bic.w	r3, r3, #16
 8001198:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	461a      	mov	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff46 	bl	8001032 <Max31865_writeRegister8>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <Max31865_setFilter>:
//#########################################################################################################################
void Max31865_setFilter(Max31865_t *max31865, uint8_t filterHz)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80011ba:	2100      	movs	r1, #0
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff06 	bl	8000fce <Max31865_readRegister8>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
	if (filterHz == 50)
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2b32      	cmp	r3, #50	@ 0x32
 80011ca:	d104      	bne.n	80011d6 <Max31865_setFilter+0x28>
		t |= MAX31856_CONFIG_FILT50HZ;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e003      	b.n	80011de <Max31865_setFilter+0x30>
	else
		t &= ~MAX31856_CONFIG_FILT50HZ;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	461a      	mov	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff24 	bl	8001032 <Max31865_writeRegister8>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <Max31865_readRTD>:
//#########################################################################################################################
uint16_t Max31865_readRTD (Max31865_t *max31865)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
	Max31865_clearFault(max31865);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff55 	bl	80010aa <Max31865_clearFault>
	Max31865_enableBias(max31865, 1);
 8001200:	2101      	movs	r1, #1
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ff6d 	bl	80010e2 <Max31865_enableBias>
	Max31865_delay(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f7ff fe95 	bl	8000f38 <Max31865_delay>
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 800120e:	2100      	movs	r1, #0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fedc 	bl	8000fce <Max31865_readRegister8>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_1SHOT;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	f043 0320 	orr.w	r3, r3, #32
 8001220:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	461a      	mov	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff02 	bl	8001032 <Max31865_writeRegister8>
	Max31865_delay(65);
 800122e:	2041      	movs	r0, #65	@ 0x41
 8001230:	f7ff fe82 	bl	8000f38 <Max31865_delay>
	uint16_t rtd = Max31865_readRegister16(max31865, MAX31856_RTDMSB_REG);
 8001234:	2101      	movs	r1, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fedd 	bl	8000ff6 <Max31865_readRegister16>
 800123c:	4603      	mov	r3, r0
 800123e:	81bb      	strh	r3, [r7, #12]
	rtd >>= 1;
 8001240:	89bb      	ldrh	r3, [r7, #12]
 8001242:	085b      	lsrs	r3, r3, #1
 8001244:	81bb      	strh	r3, [r7, #12]
	return rtd;
 8001246:	89bb      	ldrh	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <Max31865_init>:
//#########################################################################################################################
//#########################################################################################################################
//#########################################################################################################################
void  Max31865_init(Max31865_t *max31865,SPI_HandleTypeDef *spi,GPIO_TypeDef  *cs_gpio,uint16_t cs_pin,uint8_t  numwires, uint8_t filterHz)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	807b      	strh	r3, [r7, #2]
  if(max31865->lock == 1)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	7b1b      	ldrb	r3, [r3, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <Max31865_init+0x1c>
    Max31865_delay(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff fe66 	bl	8000f38 <Max31865_delay>
  max31865->lock = 1;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2201      	movs	r2, #1
 8001270:	731a      	strb	r2, [r3, #12]
  max31865->spi = spi;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	609a      	str	r2, [r3, #8]
  max31865->cs_gpio = cs_gpio;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	601a      	str	r2, [r3, #0]
  max31865->cs_pin = cs_pin; 
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	809a      	strh	r2, [r3, #4]
  HAL_GPIO_WritePin(max31865->cs_gpio,max31865->cs_pin,GPIO_PIN_SET);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	889b      	ldrh	r3, [r3, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	4619      	mov	r1, r3
 8001290:	f001 fa74 	bl	800277c <HAL_GPIO_WritePin>
  Max31865_delay(100);
 8001294:	2064      	movs	r0, #100	@ 0x64
 8001296:	f7ff fe4f 	bl	8000f38 <Max31865_delay>
  Max31865_setWires(max31865, numwires);
 800129a:	7e3b      	ldrb	r3, [r7, #24]
 800129c:	4619      	mov	r1, r3
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff ff63 	bl	800116a <Max31865_setWires>
	Max31865_enableBias(max31865, 0);
 80012a4:	2100      	movs	r1, #0
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff ff1b 	bl	80010e2 <Max31865_enableBias>
	Max31865_autoConvert(max31865, 0);
 80012ac:	2100      	movs	r1, #0
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f7ff ff39 	bl	8001126 <Max31865_autoConvert>
	Max31865_clearFault(max31865);
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f7ff fef8 	bl	80010aa <Max31865_clearFault>
  Max31865_setFilter(max31865, filterHz);  
 80012ba:	7f3b      	ldrb	r3, [r7, #28]
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f7ff ff75 	bl	80011ae <Max31865_setFilter>
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	0000      	movs	r0, r0
	...

080012d0 <Max31865_readTempC>:
//#########################################################################################################################
bool Max31865_readTempC(Max31865_t *max31865,float *readTemp)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  if(max31865->lock == 1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7b1b      	ldrb	r3, [r3, #12]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d102      	bne.n	80012e8 <Max31865_readTempC+0x18>
    Max31865_delay(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fe28 	bl	8000f38 <Max31865_delay>
  max31865->lock = 1;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	731a      	strb	r2, [r3, #12]
  bool isOk = false;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  float Z1, Z2, Z3, Z4, Rt, temp;
	Rt = Max31865_readRTD(max31865);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff7c 	bl	80011f2 <Max31865_readRTD>
 80012fa:	4603      	mov	r3, r0
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001304:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt /= 32768;
 8001308:	ed97 7a08 	vldr	s14, [r7, #32]
 800130c:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001570 <Max31865_readTempC+0x2a0>
 8001310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001314:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt *= _MAX31865_RREF;
 8001318:	edd7 7a08 	vldr	s15, [r7, #32]
 800131c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8001574 <Max31865_readTempC+0x2a4>
 8001320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001324:	edc7 7a08 	vstr	s15, [r7, #32]
	Z1 = -RTD_A;
 8001328:	4b93      	ldr	r3, [pc, #588]	@ (8001578 <Max31865_readTempC+0x2a8>)
 800132a:	61fb      	str	r3, [r7, #28]
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
 800132c:	4b93      	ldr	r3, [pc, #588]	@ (800157c <Max31865_readTempC+0x2ac>)
 800132e:	61bb      	str	r3, [r7, #24]
	Z3 = (4 * RTD_B) / _MAX31865_RNOMINAL;
 8001330:	4b93      	ldr	r3, [pc, #588]	@ (8001580 <Max31865_readTempC+0x2b0>)
 8001332:	617b      	str	r3, [r7, #20]
	Z4 = 2 * RTD_B;
 8001334:	4b93      	ldr	r3, [pc, #588]	@ (8001584 <Max31865_readTempC+0x2b4>)
 8001336:	613b      	str	r3, [r7, #16]
	temp = Z2 + (Z3 * Rt);
 8001338:	ed97 7a05 	vldr	s14, [r7, #20]
 800133c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001344:	ed97 7a06 	vldr	s14, [r7, #24]
 8001348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134c:	edc7 7a03 	vstr	s15, [r7, #12]
	temp = (sqrtf(temp) + Z1) / Z4;
 8001350:	ed97 0a03 	vldr	s0, [r7, #12]
 8001354:	f007 f858 	bl	8008408 <sqrtf>
 8001358:	eeb0 7a40 	vmov.f32	s14, s0
 800135c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001360:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001364:	ed97 7a04 	vldr	s14, [r7, #16]
 8001368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (temp >= 0)
 8001370:	edd7 7a03 	vldr	s15, [r7, #12]
 8001374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137c:	db11      	blt.n	80013a2 <Max31865_readTempC+0xd2>
  {
    *readTemp = temp; 
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	601a      	str	r2, [r3, #0]
    if(Max31865_readFault(max31865) == 0)
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fe83 	bl	8001090 <Max31865_readFault>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <Max31865_readTempC+0xc6>
      isOk = true;        
 8001390:	2301      	movs	r3, #1
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    max31865->lock = 0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	731a      	strb	r2, [r3, #12]
    return isOk;
 800139c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013a0:	e0cb      	b.n	800153a <Max31865_readTempC+0x26a>
  }
	Rt /= _MAX31865_RNOMINAL;
 80013a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80013a6:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8001588 <Max31865_readTempC+0x2b8>
 80013aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ae:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt *= 100;    
 80013b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80013b6:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001588 <Max31865_readTempC+0x2b8>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	edc7 7a08 	vstr	s15, [r7, #32]
	float rpoly = Rt;
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	60bb      	str	r3, [r7, #8]
	temp = -242.02;
 80013c6:	4b71      	ldr	r3, [pc, #452]	@ (800158c <Max31865_readTempC+0x2bc>)
 80013c8:	60fb      	str	r3, [r7, #12]
	temp += 2.2228 * rpoly;
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff f8bc 	bl	8000548 <__aeabi_f2d>
 80013d0:	4604      	mov	r4, r0
 80013d2:	460d      	mov	r5, r1
 80013d4:	68b8      	ldr	r0, [r7, #8]
 80013d6:	f7ff f8b7 	bl	8000548 <__aeabi_f2d>
 80013da:	a35b      	add	r3, pc, #364	@ (adr r3, 8001548 <Max31865_readTempC+0x278>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f90a 	bl	80005f8 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4620      	mov	r0, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	f7fe ff4e 	bl	800028c <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbd6 	bl	8000ba8 <__aeabi_d2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // square
 8001400:	ed97 7a02 	vldr	s14, [r7, #8]
 8001404:	edd7 7a08 	vldr	s15, [r7, #32]
 8001408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140c:	edc7 7a02 	vstr	s15, [r7, #8]
	temp += 2.5859e-3 * rpoly;
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7ff f899 	bl	8000548 <__aeabi_f2d>
 8001416:	4604      	mov	r4, r0
 8001418:	460d      	mov	r5, r1
 800141a:	68b8      	ldr	r0, [r7, #8]
 800141c:	f7ff f894 	bl	8000548 <__aeabi_f2d>
 8001420:	a34b      	add	r3, pc, #300	@ (adr r3, 8001550 <Max31865_readTempC+0x280>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f8e7 	bl	80005f8 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4620      	mov	r0, r4
 8001430:	4629      	mov	r1, r5
 8001432:	f7fe ff2b 	bl	800028c <__adddf3>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbb3 	bl	8000ba8 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^3
 8001446:	ed97 7a02 	vldr	s14, [r7, #8]
 800144a:	edd7 7a08 	vldr	s15, [r7, #32]
 800144e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001452:	edc7 7a02 	vstr	s15, [r7, #8]
	temp -= 4.8260e-6 * rpoly;
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7ff f876 	bl	8000548 <__aeabi_f2d>
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f7ff f871 	bl	8000548 <__aeabi_f2d>
 8001466:	a33c      	add	r3, pc, #240	@ (adr r3, 8001558 <Max31865_readTempC+0x288>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f8c4 	bl	80005f8 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe ff06 	bl	8000288 <__aeabi_dsub>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb90 	bl	8000ba8 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^4
 800148c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001490:	edd7 7a08 	vldr	s15, [r7, #32]
 8001494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001498:	edc7 7a02 	vstr	s15, [r7, #8]
	temp -= 2.8183e-8 * rpoly;
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f7ff f853 	bl	8000548 <__aeabi_f2d>
 80014a2:	4604      	mov	r4, r0
 80014a4:	460d      	mov	r5, r1
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff f84e 	bl	8000548 <__aeabi_f2d>
 80014ac:	a32c      	add	r3, pc, #176	@ (adr r3, 8001560 <Max31865_readTempC+0x290>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f8a1 	bl	80005f8 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4620      	mov	r0, r4
 80014bc:	4629      	mov	r1, r5
 80014be:	f7fe fee3 	bl	8000288 <__aeabi_dsub>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fb6d 	bl	8000ba8 <__aeabi_d2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^5
 80014d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80014d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	edc7 7a02 	vstr	s15, [r7, #8]
	temp += 1.5243e-10 * rpoly;
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff f830 	bl	8000548 <__aeabi_f2d>
 80014e8:	4604      	mov	r4, r0
 80014ea:	460d      	mov	r5, r1
 80014ec:	68b8      	ldr	r0, [r7, #8]
 80014ee:	f7ff f82b 	bl	8000548 <__aeabi_f2d>
 80014f2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001568 <Max31865_readTempC+0x298>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f87e 	bl	80005f8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7fe fec2 	bl	800028c <__adddf3>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb4a 	bl	8000ba8 <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	60fb      	str	r3, [r7, #12]

  *readTemp = temp; 
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	601a      	str	r2, [r3, #0]
  if(Max31865_readFault(max31865) == 0)
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fdb6 	bl	8001090 <Max31865_readFault>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <Max31865_readTempC+0x260>
    isOk = true;        
 800152a:	2301      	movs	r3, #1
 800152c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  max31865->lock = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	731a      	strb	r2, [r3, #12]
  return isOk;  
 8001536:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800153a:	4618      	mov	r0, r3
 800153c:	3728      	adds	r7, #40	@ 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bdb0      	pop	{r4, r5, r7, pc}
 8001542:	bf00      	nop
 8001544:	f3af 8000 	nop.w
 8001548:	5dcc63f1 	.word	0x5dcc63f1
 800154c:	4001c84b 	.word	0x4001c84b
 8001550:	7dc882bb 	.word	0x7dc882bb
 8001554:	3f652f06 	.word	0x3f652f06
 8001558:	c766c293 	.word	0xc766c293
 800155c:	3ed43de0 	.word	0x3ed43de0
 8001560:	513156ce 	.word	0x513156ce
 8001564:	3e5e42e2 	.word	0x3e5e42e2
 8001568:	61e4fa3e 	.word	0x61e4fa3e
 800156c:	3de4f327 	.word	0x3de4f327
 8001570:	47000000 	.word	0x47000000
 8001574:	43d70000 	.word	0x43d70000
 8001578:	bb801132 	.word	0xbb801132
 800157c:	37938317 	.word	0x37938317
 8001580:	b2c66d70 	.word	0xb2c66d70
 8001584:	b59b057f 	.word	0xb59b057f
 8001588:	42c80000 	.word	0x42c80000
 800158c:	c372051f 	.word	0xc372051f

08001590 <Max31865_Filter>:
  *readTemp = (*readTemp * 9.0f / 5.0f) + 32.0f;
  return isOk;
}
//#########################################################################################################################
float Max31865_Filter(float	newInput, float	lastOutput, float efectiveFactor)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	ed87 0a03 	vstr	s0, [r7, #12]
 800159a:	edc7 0a02 	vstr	s1, [r7, #8]
 800159e:	ed87 1a01 	vstr	s2, [r7, #4]
	return ((float)lastOutput*(1.0f-efectiveFactor)) + ((float)newInput*efectiveFactor) ;
 80015a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80015ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80015be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80015c6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a31      	ldr	r2, [pc, #196]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b2f      	ldr	r3, [pc, #188]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a2a      	ldr	r2, [pc, #168]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a1c      	ldr	r2, [pc, #112]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <MX_GPIO_Init+0xe4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLed_Pin|OrangeLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8001660:	4816      	ldr	r0, [pc, #88]	@ (80016bc <MX_GPIO_Init+0xe8>)
 8001662:	f001 f88b 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800166c:	4814      	ldr	r0, [pc, #80]	@ (80016c0 <MX_GPIO_Init+0xec>)
 800166e:	f001 f885 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GreenLed_Pin|OrangeLed_Pin|BlueLed_Pin;
 8001672:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	480c      	ldr	r0, [pc, #48]	@ (80016bc <MX_GPIO_Init+0xe8>)
 800168c:	f000 feda 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001690:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_GPIO_Init+0xec>)
 80016aa:	f000 fecb 	bl	8002444 <HAL_GPIO_Init>

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40020800 	.word	0x40020800

080016c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016cc:	f000 fd3e 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d0:	f000 f8f8 	bl	80018c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d4:	f7ff ff7e 	bl	80015d4 <MX_GPIO_Init>
  MX_TIM8_Init();
 80016d8:	f000 fb32 	bl	8001d40 <MX_TIM8_Init>
  MX_TIM11_Init();
 80016dc:	f000 fbb4 	bl	8001e48 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 80016e0:	f000 fc98 	bl	8002014 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80016e4:	f000 f95e 	bl	80019a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim6);
  HAL_TIM_Base_Start(&htim11);
 80016e8:	4860      	ldr	r0, [pc, #384]	@ (800186c <main+0x1a8>)
 80016ea:	f002 f9b5 	bl	8003a58 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 80016ee:	485f      	ldr	r0, [pc, #380]	@ (800186c <main+0x1a8>)
 80016f0:	f002 f9b2 	bl	8003a58 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80016f4:	2100      	movs	r1, #0
 80016f6:	485d      	ldr	r0, [pc, #372]	@ (800186c <main+0x1a8>)
 80016f8:	f002 fa70 	bl	8003bdc <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	485c      	ldr	r0, [pc, #368]	@ (8001870 <main+0x1ac>)
 8001700:	f002 fb8e 	bl	8003e20 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8001704:	2104      	movs	r1, #4
 8001706:	485a      	ldr	r0, [pc, #360]	@ (8001870 <main+0x1ac>)
 8001708:	f002 fb8a 	bl	8003e20 <HAL_TIM_IC_Start>
  TIM11->CCR1 = 3;
 800170c:	4b59      	ldr	r3, [pc, #356]	@ (8001874 <main+0x1b0>)
 800170e:	2203      	movs	r2, #3
 8001710:	635a      	str	r2, [r3, #52]	@ 0x34

  Max31865_init(&pt100,&hspi2,GPIOC,GPIO_PIN_8,3,50);
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	2303      	movs	r3, #3
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800171e:	4a56      	ldr	r2, [pc, #344]	@ (8001878 <main+0x1b4>)
 8001720:	4956      	ldr	r1, [pc, #344]	@ (800187c <main+0x1b8>)
 8001722:	4857      	ldr	r0, [pc, #348]	@ (8001880 <main+0x1bc>)
 8001724:	f7ff fd94 	bl	8001250 <Max31865_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(BlueLed_GPIO_Port, BlueLed_Pin);
 8001728:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800172c:	4855      	ldr	r0, [pc, #340]	@ (8001884 <main+0x1c0>)
 800172e:	f001 f83e 	bl	80027ae <HAL_GPIO_TogglePin>
	if (HAL_GetTick() - delay_hcsr04 >= 100){ // every 100 ms
 8001732:	f000 fd71 	bl	8002218 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	4b53      	ldr	r3, [pc, #332]	@ (8001888 <main+0x1c4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b63      	cmp	r3, #99	@ 0x63
 8001740:	d92c      	bls.n	800179c <main+0xd8>
		delay_hcsr04 = HAL_GetTick();
 8001742:	f000 fd69 	bl	8002218 <HAL_GetTick>
 8001746:	4603      	mov	r3, r0
 8001748:	4a4f      	ldr	r2, [pc, #316]	@ (8001888 <main+0x1c4>)
 800174a:	6013      	str	r3, [r2, #0]
		echo1 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 800174c:	2100      	movs	r1, #0
 800174e:	4848      	ldr	r0, [pc, #288]	@ (8001870 <main+0x1ac>)
 8001750:	f002 fde2 	bl	8004318 <HAL_TIM_ReadCapturedValue>
 8001754:	4603      	mov	r3, r0
 8001756:	4a4d      	ldr	r2, [pc, #308]	@ (800188c <main+0x1c8>)
 8001758:	6013      	str	r3, [r2, #0]
		echo2 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 800175a:	2104      	movs	r1, #4
 800175c:	4844      	ldr	r0, [pc, #272]	@ (8001870 <main+0x1ac>)
 800175e:	f002 fddb 	bl	8004318 <HAL_TIM_ReadCapturedValue>
 8001762:	4603      	mov	r3, r0
 8001764:	4a4a      	ldr	r2, [pc, #296]	@ (8001890 <main+0x1cc>)
 8001766:	6013      	str	r3, [r2, #0]
		dist1 = echo1 / 58.0f;
 8001768:	4b48      	ldr	r3, [pc, #288]	@ (800188c <main+0x1c8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001774:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8001894 <main+0x1d0>
 8001778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177c:	4b46      	ldr	r3, [pc, #280]	@ (8001898 <main+0x1d4>)
 800177e:	edc3 7a00 	vstr	s15, [r3]
		dist2 = echo2 / 58.0f;
 8001782:	4b43      	ldr	r3, [pc, #268]	@ (8001890 <main+0x1cc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800178e:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001894 <main+0x1d0>
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	4b41      	ldr	r3, [pc, #260]	@ (800189c <main+0x1d8>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
		Temperature = DHT11_Data.Temperature;
		Humidity = DHT11_Data.Humidity;
	}*/

	float t;
	HAL_GPIO_TogglePin(GreenLed_GPIO_Port, GreenLed_Pin);
 800179c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017a0:	4838      	ldr	r0, [pc, #224]	@ (8001884 <main+0x1c0>)
 80017a2:	f001 f804 	bl	80027ae <HAL_GPIO_TogglePin>

	pt100isOK = Max31865_readTempC(&pt100,&t);
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	4835      	ldr	r0, [pc, #212]	@ (8001880 <main+0x1bc>)
 80017ac:	f7ff fd90 	bl	80012d0 <Max31865_readTempC>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b3a      	ldr	r3, [pc, #232]	@ (80018a0 <main+0x1dc>)
 80017b6:	701a      	strb	r2, [r3, #0]
	rtd_raw = Max31865_readRTD(&pt100);
 80017b8:	4831      	ldr	r0, [pc, #196]	@ (8001880 <main+0x1bc>)
 80017ba:	f7ff fd1a 	bl	80011f2 <Max31865_readRTD>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <main+0x1e0>)
 80017c4:	801a      	strh	r2, [r3, #0]
	if (pt100isOK != false){
 80017c6:	4b36      	ldr	r3, [pc, #216]	@ (80018a0 <main+0x1dc>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d012      	beq.n	80017f4 <main+0x130>
		pt100Temp = Max31865_Filter(t,pt100Temp,0.1);
 80017ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d2:	4b35      	ldr	r3, [pc, #212]	@ (80018a8 <main+0x1e4>)
 80017d4:	ed93 7a00 	vldr	s14, [r3]
 80017d8:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 80018ac <main+0x1e8>
 80017dc:	eef0 0a47 	vmov.f32	s1, s14
 80017e0:	eeb0 0a67 	vmov.f32	s0, s15
 80017e4:	f7ff fed4 	bl	8001590 <Max31865_Filter>
 80017e8:	eef0 7a40 	vmov.f32	s15, s0
 80017ec:	4b2e      	ldr	r3, [pc, #184]	@ (80018a8 <main+0x1e4>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
 80017f2:	e006      	b.n	8001802 <main+0x13e>
	}
	else{
		fault = Max31865_readFault(&pt100);
 80017f4:	4822      	ldr	r0, [pc, #136]	@ (8001880 <main+0x1bc>)
 80017f6:	f7ff fc4b 	bl	8001090 <Max31865_readFault>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b2c      	ldr	r3, [pc, #176]	@ (80018b0 <main+0x1ec>)
 8001800:	701a      	strb	r2, [r3, #0]
	}


	snprintf((char*)txData, sizeof(txData), "%.2f,%.2f,%.2f\r\n", dist1,dist2,pt100Temp);
 8001802:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <main+0x1d4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe9e 	bl	8000548 <__aeabi_f2d>
 800180c:	4604      	mov	r4, r0
 800180e:	460d      	mov	r5, r1
 8001810:	4b22      	ldr	r3, [pc, #136]	@ (800189c <main+0x1d8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe97 	bl	8000548 <__aeabi_f2d>
 800181a:	4680      	mov	r8, r0
 800181c:	4689      	mov	r9, r1
 800181e:	4b22      	ldr	r3, [pc, #136]	@ (80018a8 <main+0x1e4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe90 	bl	8000548 <__aeabi_f2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001830:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001834:	e9cd 4500 	strd	r4, r5, [sp]
 8001838:	4a1e      	ldr	r2, [pc, #120]	@ (80018b4 <main+0x1f0>)
 800183a:	211e      	movs	r1, #30
 800183c:	481e      	ldr	r0, [pc, #120]	@ (80018b8 <main+0x1f4>)
 800183e:	f004 fca3 	bl	8006188 <sniprintf>
	HAL_UART_Transmit(&huart2, txData, sizeof(txData), 100);
 8001842:	2364      	movs	r3, #100	@ 0x64
 8001844:	221e      	movs	r2, #30
 8001846:	491c      	ldr	r1, [pc, #112]	@ (80018b8 <main+0x1f4>)
 8001848:	481c      	ldr	r0, [pc, #112]	@ (80018bc <main+0x1f8>)
 800184a:	f003 fb31 	bl	8004eb0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rxData, sizeof(rxData), 100);
 800184e:	2364      	movs	r3, #100	@ 0x64
 8001850:	2202      	movs	r2, #2
 8001852:	491b      	ldr	r1, [pc, #108]	@ (80018c0 <main+0x1fc>)
 8001854:	4819      	ldr	r0, [pc, #100]	@ (80018bc <main+0x1f8>)
 8001856:	f003 fbb6 	bl	8004fc6 <HAL_UART_Receive>
	HAL_GPIO_TogglePin(OrangeLed_GPIO_Port, OrangeLed_Pin);
 800185a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800185e:	4809      	ldr	r0, [pc, #36]	@ (8001884 <main+0x1c0>)
 8001860:	f000 ffa5 	bl	80027ae <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001864:	2064      	movs	r0, #100	@ 0x64
 8001866:	f000 fce3 	bl	8002230 <HAL_Delay>
  {
 800186a:	e75d      	b.n	8001728 <main+0x64>
 800186c:	200002e8 	.word	0x200002e8
 8001870:	200002a0 	.word	0x200002a0
 8001874:	40014800 	.word	0x40014800
 8001878:	40020800 	.word	0x40020800
 800187c:	20000244 	.word	0x20000244
 8001880:	20000228 	.word	0x20000228
 8001884:	40020c00 	.word	0x40020c00
 8001888:	2000021c 	.word	0x2000021c
 800188c:	20000214 	.word	0x20000214
 8001890:	20000218 	.word	0x20000218
 8001894:	42680000 	.word	0x42680000
 8001898:	20000220 	.word	0x20000220
 800189c:	20000224 	.word	0x20000224
 80018a0:	20000238 	.word	0x20000238
 80018a4:	20000242 	.word	0x20000242
 80018a8:	2000023c 	.word	0x2000023c
 80018ac:	3dcccccd 	.word	0x3dcccccd
 80018b0:	20000240 	.word	0x20000240
 80018b4:	08008468 	.word	0x08008468
 80018b8:	200001f0 	.word	0x200001f0
 80018bc:	20000330 	.word	0x20000330
 80018c0:	20000210 	.word	0x20000210

080018c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b094      	sub	sp, #80	@ 0x50
 80018c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	f107 0320 	add.w	r3, r7, #32
 80018ce:	2230      	movs	r2, #48	@ 0x30
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 fccf 	bl	8006276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <SystemClock_Config+0xcc>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	4a27      	ldr	r2, [pc, #156]	@ (8001990 <SystemClock_Config+0xcc>)
 80018f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f8:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <SystemClock_Config+0xcc>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <SystemClock_Config+0xd0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a21      	ldr	r2, [pc, #132]	@ (8001994 <SystemClock_Config+0xd0>)
 800190e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <SystemClock_Config+0xd0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001920:	2302      	movs	r3, #2
 8001922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001924:	2301      	movs	r3, #1
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001928:	2310      	movs	r3, #16
 800192a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192c:	2302      	movs	r3, #2
 800192e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001930:	2300      	movs	r3, #0
 8001932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001934:	2308      	movs	r3, #8
 8001936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001938:	23a0      	movs	r3, #160	@ 0xa0
 800193a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800193c:	2302      	movs	r3, #2
 800193e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001940:	2307      	movs	r3, #7
 8001942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001944:	f107 0320 	add.w	r3, r7, #32
 8001948:	4618      	mov	r0, r3
 800194a:	f000 ff4b 	bl	80027e4 <HAL_RCC_OscConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001954:	f000 f820 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001958:	230f      	movs	r3, #15
 800195a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195c:	2302      	movs	r3, #2
 800195e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001964:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800196a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800196e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2105      	movs	r1, #5
 8001976:	4618      	mov	r0, r3
 8001978:	f001 f9ac 	bl	8002cd4 <HAL_RCC_ClockConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001982:	f000 f809 	bl	8001998 <Error_Handler>
  }
}
 8001986:	bf00      	nop
 8001988:	3750      	adds	r7, #80	@ 0x50
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40007000 	.word	0x40007000

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <Error_Handler+0x8>

080019a4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019aa:	4a18      	ldr	r2, [pc, #96]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019d8:	2238      	movs	r2, #56	@ 0x38
 80019da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019f0:	220a      	movs	r2, #10
 80019f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019f6:	f001 fb8d 	bl	8003114 <HAL_SPI_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a00:	f7ff ffca 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000244 	.word	0x20000244
 8001a0c:	40003800 	.word	0x40003800

08001a10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	@ 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ad0 <HAL_SPI_MspInit+0xc0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d14a      	bne.n	8001ac8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	4a26      	ldr	r2, [pc, #152]	@ (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a18      	ldr	r2, [pc, #96]	@ (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <HAL_SPI_MspInit+0xc4>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a86:	230c      	movs	r3, #12
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a96:	2305      	movs	r3, #5
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <HAL_SPI_MspInit+0xc8>)
 8001aa2:	f000 fccf 	bl	8002444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ab8:	2305      	movs	r3, #5
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4806      	ldr	r0, [pc, #24]	@ (8001adc <HAL_SPI_MspInit+0xcc>)
 8001ac4:	f000 fcbe 	bl	8002444 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	@ 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40003800 	.word	0x40003800
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020400 	.word	0x40020400

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a0f      	ldr	r2, [pc, #60]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b1e:	2007      	movs	r0, #7
 8001b20:	f000 fc5c 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <NMI_Handler+0x4>

08001b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <MemManage_Handler+0x4>

08001b48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b86:	f000 fb33 	bl	80021f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  return 1;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_kill>:

int _kill(int pid, int sig)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba8:	f004 fbb8 	bl	800631c <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2216      	movs	r2, #22
 8001bb0:	601a      	str	r2, [r3, #0]
  return -1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_exit>:

void _exit (int status)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffe7 	bl	8001b9e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <_exit+0x12>

08001bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e00a      	b.n	8001bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be6:	f3af 8000 	nop.w
 8001bea:	4601      	mov	r1, r0
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	60ba      	str	r2, [r7, #8]
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf0      	blt.n	8001be6 <_read+0x12>
  }

  return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e009      	b.n	8001c34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf1      	blt.n	8001c20 <_write+0x12>
  }
  return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_close>:

int _close(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_isatty>:

int _isatty(int file)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f004 fb1c 	bl	800631c <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20020000 	.word	0x20020000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	2000029c 	.word	0x2000029c
 8001d18:	200004c8 	.word	0x200004c8

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <MX_TIM8_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	@ 0x30
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d6c:	4b34      	ldr	r3, [pc, #208]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001d6e:	4a35      	ldr	r2, [pc, #212]	@ (8001e44 <MX_TIM8_Init+0x104>)
 8001d70:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80;
 8001d72:	4b33      	ldr	r3, [pc, #204]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001d74:	2250      	movs	r2, #80	@ 0x50
 8001d76:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d78:	4b31      	ldr	r3, [pc, #196]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d7e:	4b30      	ldr	r3, [pc, #192]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001d80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d86:	4b2e      	ldr	r3, [pc, #184]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d98:	4829      	ldr	r0, [pc, #164]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001d9a:	f001 fe0d 	bl	80039b8 <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001da4:	f7ff fdf8 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001da8:	4825      	ldr	r0, [pc, #148]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001daa:	f001 ffdf 	bl	8003d6c <HAL_TIM_IC_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001db4:	f7ff fdf0 	bl	8001998 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001db8:	2304      	movs	r3, #4
 8001dba:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001dbc:	2360      	movs	r3, #96	@ 0x60
 8001dbe:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	481c      	ldr	r0, [pc, #112]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001dd0:	f002 fa60 	bl	8004294 <HAL_TIM_SlaveConfigSynchro>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001dda:	f7ff fddd 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4814      	ldr	r0, [pc, #80]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001dee:	f002 ff93 	bl	8004d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001df8:	f7ff fdce 	bl	8001998 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e00:	2301      	movs	r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4619      	mov	r1, r3
 8001e12:	480b      	ldr	r0, [pc, #44]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001e14:	f002 f8e0 	bl	8003fd8 <HAL_TIM_IC_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 8001e1e:	f7ff fdbb 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <MX_TIM8_Init+0x100>)
 8001e2a:	f002 f8d5 	bl	8003fd8 <HAL_TIM_IC_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001e34:	f7ff fdb0 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	3730      	adds	r7, #48	@ 0x30
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200002a0 	.word	0x200002a0
 8001e44:	40010400 	.word	0x40010400

08001e48 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
 8001e5c:	615a      	str	r2, [r3, #20]
 8001e5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001e60:	4b1e      	ldr	r3, [pc, #120]	@ (8001edc <MX_TIM11_Init+0x94>)
 8001e62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <MX_TIM11_Init+0x98>)
 8001e64:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 199;
 8001e66:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <MX_TIM11_Init+0x94>)
 8001e68:	22c7      	movs	r2, #199	@ 0xc7
 8001e6a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <MX_TIM11_Init+0x94>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <MX_TIM11_Init+0x94>)
 8001e74:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001e78:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <MX_TIM11_Init+0x94>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <MX_TIM11_Init+0x94>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001e86:	4815      	ldr	r0, [pc, #84]	@ (8001edc <MX_TIM11_Init+0x94>)
 8001e88:	f001 fd96 	bl	80039b8 <HAL_TIM_Base_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001e92:	f7ff fd81 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001e96:	4811      	ldr	r0, [pc, #68]	@ (8001edc <MX_TIM11_Init+0x94>)
 8001e98:	f001 fe46 	bl	8003b28 <HAL_TIM_PWM_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001ea2:	f7ff fd79 	bl	8001998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea6:	2360      	movs	r3, #96	@ 0x60
 8001ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4807      	ldr	r0, [pc, #28]	@ (8001edc <MX_TIM11_Init+0x94>)
 8001ebe:	f002 f927 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001ec8:	f7ff fd66 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001ecc:	4803      	ldr	r0, [pc, #12]	@ (8001edc <MX_TIM11_Init+0x94>)
 8001ece:	f000 f867 	bl	8001fa0 <HAL_TIM_MspPostInit>

}
 8001ed2:	bf00      	nop
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200002e8 	.word	0x200002e8
 8001ee0:	40014800 	.word	0x40014800

08001ee4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM8)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a23      	ldr	r2, [pc, #140]	@ (8001f90 <HAL_TIM_Base_MspInit+0xac>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12c      	bne.n	8001f60 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <HAL_TIM_Base_MspInit+0xb0>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	4a21      	ldr	r2, [pc, #132]	@ (8001f94 <HAL_TIM_Base_MspInit+0xb0>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f16:	4b1f      	ldr	r3, [pc, #124]	@ (8001f94 <HAL_TIM_Base_MspInit+0xb0>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <HAL_TIM_Base_MspInit+0xb0>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f94 <HAL_TIM_Base_MspInit+0xb0>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_TIM_Base_MspInit+0xb0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f3e:	23c0      	movs	r3, #192	@ 0xc0
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	480f      	ldr	r0, [pc, #60]	@ (8001f98 <HAL_TIM_Base_MspInit+0xb4>)
 8001f5a:	f000 fa73 	bl	8002444 <HAL_GPIO_Init>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001f5e:	e012      	b.n	8001f86 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM11)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	@ (8001f9c <HAL_TIM_Base_MspInit+0xb8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10d      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <HAL_TIM_Base_MspInit+0xb0>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	4a08      	ldr	r2, [pc, #32]	@ (8001f94 <HAL_TIM_Base_MspInit+0xb0>)
 8001f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_TIM_Base_MspInit+0xb0>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
}
 8001f86:	bf00      	nop
 8001f88:	3728      	adds	r7, #40	@ 0x28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40010400 	.word	0x40010400
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40014800 	.word	0x40014800

08001fa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM11)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <HAL_TIM_MspPostInit+0x68>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d11e      	bne.n	8002000 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <HAL_TIM_MspPostInit+0x6c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a10      	ldr	r2, [pc, #64]	@ (800200c <HAL_TIM_MspPostInit+0x6c>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_TIM_MspPostInit+0x6c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fe2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4805      	ldr	r0, [pc, #20]	@ (8002010 <HAL_TIM_MspPostInit+0x70>)
 8001ffc:	f000 fa22 	bl	8002444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002000:	bf00      	nop
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40014800 	.word	0x40014800
 800200c:	40023800 	.word	0x40023800
 8002010:	40020400 	.word	0x40020400

08002014 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <MX_USART2_UART_Init+0x4c>)
 800201a:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <MX_USART2_UART_Init+0x50>)
 800201c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <MX_USART2_UART_Init+0x4c>)
 8002020:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002026:	4b0e      	ldr	r3, [pc, #56]	@ (8002060 <MX_USART2_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <MX_USART2_UART_Init+0x4c>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002032:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <MX_USART2_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <MX_USART2_UART_Init+0x4c>)
 800203a:	220c      	movs	r2, #12
 800203c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203e:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <MX_USART2_UART_Init+0x4c>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <MX_USART2_UART_Init+0x4c>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	@ (8002060 <MX_USART2_UART_Init+0x4c>)
 800204c:	f002 fee0 	bl	8004e10 <HAL_UART_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002056:	f7ff fc9f 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000330 	.word	0x20000330
 8002064:	40004400 	.word	0x40004400

08002068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	@ 0x28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a19      	ldr	r2, [pc, #100]	@ (80020ec <HAL_UART_MspInit+0x84>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d12b      	bne.n	80020e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	4b18      	ldr	r3, [pc, #96]	@ (80020f0 <HAL_UART_MspInit+0x88>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	4a17      	ldr	r2, [pc, #92]	@ (80020f0 <HAL_UART_MspInit+0x88>)
 8002094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002098:	6413      	str	r3, [r2, #64]	@ 0x40
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <HAL_UART_MspInit+0x88>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <HAL_UART_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	4a10      	ldr	r2, [pc, #64]	@ (80020f0 <HAL_UART_MspInit+0x88>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_UART_MspInit+0x88>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020c2:	230c      	movs	r3, #12
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d2:	2307      	movs	r3, #7
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	@ (80020f4 <HAL_UART_MspInit+0x8c>)
 80020de:	f000 f9b1 	bl	8002444 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020e2:	bf00      	nop
 80020e4:	3728      	adds	r7, #40	@ 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40004400 	.word	0x40004400
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000

080020f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002130 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020fc:	f7ff fe0e 	bl	8001d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002100:	480c      	ldr	r0, [pc, #48]	@ (8002134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002102:	490d      	ldr	r1, [pc, #52]	@ (8002138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002104:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002118:	4c0a      	ldr	r4, [pc, #40]	@ (8002144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002126:	f004 f8ff 	bl	8006328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212a:	f7ff facb 	bl	80016c4 <main>
  bx  lr    
 800212e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002130:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800213c:	08008818 	.word	0x08008818
  ldr r2, =_sbss
 8002140:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002144:	200004c8 	.word	0x200004c8

08002148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC_IRQHandler>
	...

0800214c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002150:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <HAL_Init+0x40>)
 8002156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800215a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_Init+0x40>)
 8002162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a07      	ldr	r2, [pc, #28]	@ (800218c <HAL_Init+0x40>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f000 f931 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217a:	2000      	movs	r0, #0
 800217c:	f000 f808 	bl	8002190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fcae 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00

08002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <HAL_InitTick+0x54>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <HAL_InitTick+0x58>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f93b 	bl	800242a <HAL_SYSTICK_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00e      	b.n	80021dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d80a      	bhi.n	80021da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c4:	2200      	movs	r2, #0
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f000 f911 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d0:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <HAL_InitTick+0x5c>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20000004 	.word	0x20000004

080021f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000008 	.word	0x20000008
 8002214:	20000378 	.word	0x20000378

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000378 	.word	0x20000378

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff ffee 	bl	8002218 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffde 	bl	8002218 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000008 	.word	0x20000008

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	@ (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	@ (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	@ 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff47 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff5c 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff8e 	bl	8002330 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5d 	bl	80022dc <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffb0 	bl	8002398 <SysTick_Config>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	@ 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	e16b      	b.n	8002738 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	f040 815a 	bne.w	8002732 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d005      	beq.n	8002496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002492:	2b02      	cmp	r3, #2
 8002494:	d130      	bne.n	80024f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 0201 	and.w	r2, r3, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b03      	cmp	r3, #3
 8002502:	d017      	beq.n	8002534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d123      	bne.n	8002588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0203 	and.w	r2, r3, #3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80b4 	beq.w	8002732 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b60      	ldr	r3, [pc, #384]	@ (8002750 <HAL_GPIO_Init+0x30c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002750 <HAL_GPIO_Init+0x30c>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025da:	4b5d      	ldr	r3, [pc, #372]	@ (8002750 <HAL_GPIO_Init+0x30c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002754 <HAL_GPIO_Init+0x310>)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a52      	ldr	r2, [pc, #328]	@ (8002758 <HAL_GPIO_Init+0x314>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d02b      	beq.n	800266a <HAL_GPIO_Init+0x226>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a51      	ldr	r2, [pc, #324]	@ (800275c <HAL_GPIO_Init+0x318>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d025      	beq.n	8002666 <HAL_GPIO_Init+0x222>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a50      	ldr	r2, [pc, #320]	@ (8002760 <HAL_GPIO_Init+0x31c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01f      	beq.n	8002662 <HAL_GPIO_Init+0x21e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4f      	ldr	r2, [pc, #316]	@ (8002764 <HAL_GPIO_Init+0x320>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d019      	beq.n	800265e <HAL_GPIO_Init+0x21a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4e      	ldr	r2, [pc, #312]	@ (8002768 <HAL_GPIO_Init+0x324>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_GPIO_Init+0x216>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4d      	ldr	r2, [pc, #308]	@ (800276c <HAL_GPIO_Init+0x328>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00d      	beq.n	8002656 <HAL_GPIO_Init+0x212>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4c      	ldr	r2, [pc, #304]	@ (8002770 <HAL_GPIO_Init+0x32c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <HAL_GPIO_Init+0x20e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4b      	ldr	r2, [pc, #300]	@ (8002774 <HAL_GPIO_Init+0x330>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d101      	bne.n	800264e <HAL_GPIO_Init+0x20a>
 800264a:	2307      	movs	r3, #7
 800264c:	e00e      	b.n	800266c <HAL_GPIO_Init+0x228>
 800264e:	2308      	movs	r3, #8
 8002650:	e00c      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002652:	2306      	movs	r3, #6
 8002654:	e00a      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002656:	2305      	movs	r3, #5
 8002658:	e008      	b.n	800266c <HAL_GPIO_Init+0x228>
 800265a:	2304      	movs	r3, #4
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x228>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x228>
 800266a:	2300      	movs	r3, #0
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267c:	4935      	ldr	r1, [pc, #212]	@ (8002754 <HAL_GPIO_Init+0x310>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b3b      	ldr	r3, [pc, #236]	@ (8002778 <HAL_GPIO_Init+0x334>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a32      	ldr	r2, [pc, #200]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b30      	ldr	r3, [pc, #192]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a27      	ldr	r2, [pc, #156]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026de:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002702:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <HAL_GPIO_Init+0x334>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <HAL_GPIO_Init+0x334>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272c:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <HAL_GPIO_Init+0x334>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f67f ae90 	bls.w	8002460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3724      	adds	r7, #36	@ 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40021400 	.word	0x40021400
 8002770:	40021800 	.word	0x40021800
 8002774:	40021c00 	.word	0x40021c00
 8002778:	40013c00 	.word	0x40013c00

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002798:	e003      	b.n	80027a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	041a      	lsls	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	619a      	str	r2, [r3, #24]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027c0:	887a      	ldrh	r2, [r7, #2]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	041a      	lsls	r2, r3, #16
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	43d9      	mvns	r1, r3
 80027cc:	887b      	ldrh	r3, [r7, #2]
 80027ce:	400b      	ands	r3, r1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e267      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d075      	beq.n	80028ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002802:	4b88      	ldr	r3, [pc, #544]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d00c      	beq.n	8002828 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280e:	4b85      	ldr	r3, [pc, #532]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002816:	2b08      	cmp	r3, #8
 8002818:	d112      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4b82      	ldr	r3, [pc, #520]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002822:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002826:	d10b      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	4b7e      	ldr	r3, [pc, #504]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d05b      	beq.n	80028ec <HAL_RCC_OscConfig+0x108>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d157      	bne.n	80028ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e242      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002848:	d106      	bne.n	8002858 <HAL_RCC_OscConfig+0x74>
 800284a:	4b76      	ldr	r3, [pc, #472]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a75      	ldr	r2, [pc, #468]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x98>
 8002862:	4b70      	ldr	r3, [pc, #448]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6f      	ldr	r2, [pc, #444]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6c      	ldr	r2, [pc, #432]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 800287c:	4b69      	ldr	r3, [pc, #420]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a68      	ldr	r2, [pc, #416]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b66      	ldr	r3, [pc, #408]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a65      	ldr	r2, [pc, #404]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff fcbc 	bl	8002218 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff fcb8 	bl	8002218 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e207      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0xc0>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff fca8 	bl	8002218 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff fca4 	bl	8002218 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1f3      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	4b51      	ldr	r3, [pc, #324]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0xe8>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d063      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002906:	4b47      	ldr	r3, [pc, #284]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11c      	bne.n	800294c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b44      	ldr	r3, [pc, #272]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	4b41      	ldr	r3, [pc, #260]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x152>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1c7      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b3b      	ldr	r3, [pc, #236]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4937      	ldr	r1, [pc, #220]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	e03a      	b.n	80029c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002954:	4b34      	ldr	r3, [pc, #208]	@ (8002a28 <HAL_RCC_OscConfig+0x244>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7ff fc5d 	bl	8002218 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002962:	f7ff fc59 	bl	8002218 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1a8      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	4b2b      	ldr	r3, [pc, #172]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b28      	ldr	r3, [pc, #160]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4925      	ldr	r1, [pc, #148]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	4b24      	ldr	r3, [pc, #144]	@ (8002a28 <HAL_RCC_OscConfig+0x244>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7ff fc3c 	bl	8002218 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a4:	f7ff fc38 	bl	8002218 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e187      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d036      	beq.n	8002a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d6:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <HAL_RCC_OscConfig+0x248>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7ff fc1c 	bl	8002218 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e4:	f7ff fc18 	bl	8002218 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e167      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <HAL_RCC_OscConfig+0x240>)
 80029f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x200>
 8002a02:	e01b      	b.n	8002a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <HAL_RCC_OscConfig+0x248>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7ff fc05 	bl	8002218 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	e00e      	b.n	8002a30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a12:	f7ff fc01 	bl	8002218 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d907      	bls.n	8002a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e150      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
 8002a24:	40023800 	.word	0x40023800
 8002a28:	42470000 	.word	0x42470000
 8002a2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	4b88      	ldr	r3, [pc, #544]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ea      	bne.n	8002a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8097 	beq.w	8002b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4e:	4b81      	ldr	r3, [pc, #516]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	4a7c      	ldr	r2, [pc, #496]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a76:	2301      	movs	r3, #1
 8002a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b77      	ldr	r3, [pc, #476]	@ (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d118      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b74      	ldr	r3, [pc, #464]	@ (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a73      	ldr	r2, [pc, #460]	@ (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7ff fbc1 	bl	8002218 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7ff fbbd 	bl	8002218 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e10c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b6a      	ldr	r3, [pc, #424]	@ (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x2ea>
 8002ac0:	4b64      	ldr	r3, [pc, #400]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	4a63      	ldr	r2, [pc, #396]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002acc:	e01c      	b.n	8002b08 <HAL_RCC_OscConfig+0x324>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x30c>
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ada:	4a5e      	ldr	r2, [pc, #376]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0x324>
 8002af0:	4b58      	ldr	r3, [pc, #352]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af4:	4a57      	ldr	r2, [pc, #348]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afc:	4b55      	ldr	r3, [pc, #340]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	4a54      	ldr	r2, [pc, #336]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 0304 	bic.w	r3, r3, #4
 8002b06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7ff fb82 	bl	8002218 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7ff fb7e 	bl	8002218 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0cb      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2e:	4b49      	ldr	r3, [pc, #292]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ee      	beq.n	8002b18 <HAL_RCC_OscConfig+0x334>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3c:	f7ff fb6c 	bl	8002218 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7ff fb68 	bl	8002218 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0b5      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ee      	bne.n	8002b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6c:	4b39      	ldr	r3, [pc, #228]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	4a38      	ldr	r2, [pc, #224]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a1 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b82:	4b34      	ldr	r3, [pc, #208]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d05c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d141      	bne.n	8002c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b31      	ldr	r3, [pc, #196]	@ (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7ff fb3c 	bl	8002218 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7ff fb38 	bl	8002218 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e087      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	491b      	ldr	r1, [pc, #108]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7ff fb11 	bl	8002218 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7ff fb0d 	bl	8002218 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e05c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x416>
 8002c18:	e054      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b10      	ldr	r3, [pc, #64]	@ (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff fafa 	bl	8002218 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7ff faf6 	bl	8002218 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e045      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x444>
 8002c46:	e03d      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e038      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd0 <HAL_RCC_OscConfig+0x4ec>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d028      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d121      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d11a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0cc      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b68      	ldr	r3, [pc, #416]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d90c      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b65      	ldr	r3, [pc, #404]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b63      	ldr	r3, [pc, #396]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0b8      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d28:	4b59      	ldr	r3, [pc, #356]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a58      	ldr	r2, [pc, #352]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d40:	4b53      	ldr	r3, [pc, #332]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a52      	ldr	r2, [pc, #328]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b50      	ldr	r3, [pc, #320]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	494d      	ldr	r1, [pc, #308]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d044      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b47      	ldr	r3, [pc, #284]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d119      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	4b3f      	ldr	r3, [pc, #252]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b3b      	ldr	r3, [pc, #236]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e067      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b37      	ldr	r3, [pc, #220]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4934      	ldr	r1, [pc, #208]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7ff fa28 	bl	8002218 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7ff fa24 	bl	8002218 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e04f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b25      	ldr	r3, [pc, #148]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d20c      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e032      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e28:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4916      	ldr	r1, [pc, #88]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e46:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	490e      	ldr	r1, [pc, #56]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e5a:	f000 f821 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	490a      	ldr	r1, [pc, #40]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	5ccb      	ldrb	r3, [r1, r3]
 8002e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e72:	4a09      	ldr	r2, [pc, #36]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f988 	bl	8002190 <HAL_InitTick>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023c00 	.word	0x40023c00
 8002e90:	40023800 	.word	0x40023800
 8002e94:	0800847c 	.word	0x0800847c
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	20000004 	.word	0x20000004

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea4:	b094      	sub	sp, #80	@ 0x50
 8002ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb8:	4b79      	ldr	r3, [pc, #484]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	f200 80e1 	bhi.w	800308c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x3a>
 8002ed2:	e0db      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b73      	ldr	r3, [pc, #460]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ed8:	e0db      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eda:	4b73      	ldr	r3, [pc, #460]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002edc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ede:	e0d8      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ee8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eea:	4b6d      	ldr	r3, [pc, #436]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d063      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	099b      	lsrs	r3, r3, #6
 8002efc:	2200      	movs	r2, #0
 8002efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f12:	4622      	mov	r2, r4
 8002f14:	462b      	mov	r3, r5
 8002f16:	f04f 0000 	mov.w	r0, #0
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	0159      	lsls	r1, r3, #5
 8002f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f24:	0150      	lsls	r0, r2, #5
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	1a51      	subs	r1, r2, r1
 8002f2e:	6139      	str	r1, [r7, #16]
 8002f30:	4629      	mov	r1, r5
 8002f32:	eb63 0301 	sbc.w	r3, r3, r1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f44:	4659      	mov	r1, fp
 8002f46:	018b      	lsls	r3, r1, #6
 8002f48:	4651      	mov	r1, sl
 8002f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f4e:	4651      	mov	r1, sl
 8002f50:	018a      	lsls	r2, r1, #6
 8002f52:	4651      	mov	r1, sl
 8002f54:	ebb2 0801 	subs.w	r8, r2, r1
 8002f58:	4659      	mov	r1, fp
 8002f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f72:	4690      	mov	r8, r2
 8002f74:	4699      	mov	r9, r3
 8002f76:	4623      	mov	r3, r4
 8002f78:	eb18 0303 	adds.w	r3, r8, r3
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	462b      	mov	r3, r5
 8002f80:	eb49 0303 	adc.w	r3, r9, r3
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f92:	4629      	mov	r1, r5
 8002f94:	024b      	lsls	r3, r1, #9
 8002f96:	4621      	mov	r1, r4
 8002f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	024a      	lsls	r2, r1, #9
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fb0:	f7fd fe4a 	bl	8000c48 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fbc:	e058      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbe:	4b38      	ldr	r3, [pc, #224]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	099b      	lsrs	r3, r3, #6
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	4611      	mov	r1, r2
 8002fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fd8:	4642      	mov	r2, r8
 8002fda:	464b      	mov	r3, r9
 8002fdc:	f04f 0000 	mov.w	r0, #0
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	0159      	lsls	r1, r3, #5
 8002fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fea:	0150      	lsls	r0, r2, #5
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800300c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003010:	ebb2 040a 	subs.w	r4, r2, sl
 8003014:	eb63 050b 	sbc.w	r5, r3, fp
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	00eb      	lsls	r3, r5, #3
 8003022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003026:	00e2      	lsls	r2, r4, #3
 8003028:	4614      	mov	r4, r2
 800302a:	461d      	mov	r5, r3
 800302c:	4643      	mov	r3, r8
 800302e:	18e3      	adds	r3, r4, r3
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	464b      	mov	r3, r9
 8003034:	eb45 0303 	adc.w	r3, r5, r3
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003046:	4629      	mov	r1, r5
 8003048:	028b      	lsls	r3, r1, #10
 800304a:	4621      	mov	r1, r4
 800304c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003050:	4621      	mov	r1, r4
 8003052:	028a      	lsls	r2, r1, #10
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	61fa      	str	r2, [r7, #28]
 8003060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003064:	f7fd fdf0 	bl	8000c48 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	3301      	adds	r3, #1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003080:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800308a:	e002      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800308c:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800308e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003094:	4618      	mov	r0, r3
 8003096:	3750      	adds	r7, #80	@ 0x50
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	00f42400 	.word	0x00f42400
 80030a8:	007a1200 	.word	0x007a1200

080030ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b0:	4b03      	ldr	r3, [pc, #12]	@ (80030c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000000 	.word	0x20000000

080030c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c8:	f7ff fff0 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0a9b      	lsrs	r3, r3, #10
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4903      	ldr	r1, [pc, #12]	@ (80030e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	0800848c 	.word	0x0800848c

080030ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030f0:	f7ff ffdc 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	@ (800310c <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0b5b      	lsrs	r3, r3, #13
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	@ (8003110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	0800848c 	.word	0x0800848c

08003114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07b      	b.n	800321e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003136:	d009      	beq.n	800314c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
 800313e:	e005      	b.n	800314c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fe fc52 	bl	8001a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003182:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d0:	ea42 0103 	orr.w	r1, r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	f003 0104 	and.w	r1, r3, #4
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	f003 0210 	and.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800320c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b088      	sub	sp, #32
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003236:	f7fe ffef 	bl	8002218 <HAL_GetTick>
 800323a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
 800324e:	e12a      	b.n	80034a6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_SPI_Transmit+0x36>
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e122      	b.n	80034a6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_SPI_Transmit+0x48>
 800326a:	2302      	movs	r3, #2
 800326c:	e11b      	b.n	80034a6 <HAL_SPI_Transmit+0x280>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2203      	movs	r2, #3
 800327a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	88fa      	ldrh	r2, [r7, #6]
 8003294:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032bc:	d10f      	bne.n	80032de <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e8:	2b40      	cmp	r3, #64	@ 0x40
 80032ea:	d007      	beq.n	80032fc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003304:	d152      	bne.n	80033ac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_SPI_Transmit+0xee>
 800330e:	8b7b      	ldrh	r3, [r7, #26]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d145      	bne.n	80033a0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	1c9a      	adds	r2, r3, #2
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003338:	e032      	b.n	80033a0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	d112      	bne.n	800336e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800336c:	e018      	b.n	80033a0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800336e:	f7fe ff53 	bl	8002218 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d803      	bhi.n	8003386 <HAL_SPI_Transmit+0x160>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d102      	bne.n	800338c <HAL_SPI_Transmit+0x166>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e082      	b.n	80034a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1c7      	bne.n	800333a <HAL_SPI_Transmit+0x114>
 80033aa:	e053      	b.n	8003454 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_SPI_Transmit+0x194>
 80033b4:	8b7b      	ldrh	r3, [r7, #26]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d147      	bne.n	800344a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	330c      	adds	r3, #12
 80033c4:	7812      	ldrb	r2, [r2, #0]
 80033c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033e0:	e033      	b.n	800344a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d113      	bne.n	8003418 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	7812      	ldrb	r2, [r2, #0]
 80033fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003416:	e018      	b.n	800344a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003418:	f7fe fefe 	bl	8002218 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d803      	bhi.n	8003430 <HAL_SPI_Transmit+0x20a>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342e:	d102      	bne.n	8003436 <HAL_SPI_Transmit+0x210>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e02d      	b.n	80034a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1c6      	bne.n	80033e2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	6839      	ldr	r1, [r7, #0]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fa59 	bl	8003910 <SPI_EndRxTxTransaction>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80034a4:	2300      	movs	r3, #0
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b08a      	sub	sp, #40	@ 0x28
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034bc:	2301      	movs	r3, #1
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034c0:	f7fe feaa 	bl	8002218 <HAL_GetTick>
 80034c4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034cc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034d8:	7ffb      	ldrb	r3, [r7, #31]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d00c      	beq.n	80034f8 <HAL_SPI_TransmitReceive+0x4a>
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034e4:	d106      	bne.n	80034f4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <HAL_SPI_TransmitReceive+0x46>
 80034ee:	7ffb      	ldrb	r3, [r7, #31]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d001      	beq.n	80034f8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
 80034f6:	e17f      	b.n	80037f8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_SPI_TransmitReceive+0x5c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_SPI_TransmitReceive+0x5c>
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e174      	b.n	80037f8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_SPI_TransmitReceive+0x6e>
 8003518:	2302      	movs	r3, #2
 800351a:	e16d      	b.n	80037f8 <HAL_SPI_TransmitReceive+0x34a>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b04      	cmp	r3, #4
 800352e:	d003      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2205      	movs	r2, #5
 8003534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	887a      	ldrh	r2, [r7, #2]
 800354e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	887a      	ldrh	r2, [r7, #2]
 800355a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d007      	beq.n	800358c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800358a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003594:	d17e      	bne.n	8003694 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0xf6>
 800359e:	8afb      	ldrh	r3, [r7, #22]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d16c      	bne.n	800367e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	881a      	ldrh	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035c8:	e059      	b.n	800367e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d11b      	bne.n	8003610 <HAL_SPI_TransmitReceive+0x162>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_SPI_TransmitReceive+0x162>
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d113      	bne.n	8003610 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b01      	cmp	r3, #1
 800361c:	d119      	bne.n	8003652 <HAL_SPI_TransmitReceive+0x1a4>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d014      	beq.n	8003652 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003632:	b292      	uxth	r2, r2
 8003634:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363a:	1c9a      	adds	r2, r3, #2
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800364e:	2301      	movs	r3, #1
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003652:	f7fe fde1 	bl	8002218 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365e:	429a      	cmp	r2, r3
 8003660:	d80d      	bhi.n	800367e <HAL_SPI_TransmitReceive+0x1d0>
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d009      	beq.n	800367e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0bc      	b.n	80037f8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1a0      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x11c>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d19b      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x11c>
 8003692:	e082      	b.n	800379a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_SPI_TransmitReceive+0x1f4>
 800369c:	8afb      	ldrh	r3, [r7, #22]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d171      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036c8:	e05d      	b.n	8003786 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d11c      	bne.n	8003712 <HAL_SPI_TransmitReceive+0x264>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d017      	beq.n	8003712 <HAL_SPI_TransmitReceive+0x264>
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d114      	bne.n	8003712 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	7812      	ldrb	r2, [r2, #0]
 80036f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d119      	bne.n	8003754 <HAL_SPI_TransmitReceive+0x2a6>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d014      	beq.n	8003754 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003750:	2301      	movs	r3, #1
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003754:	f7fe fd60 	bl	8002218 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003760:	429a      	cmp	r2, r3
 8003762:	d803      	bhi.n	800376c <HAL_SPI_TransmitReceive+0x2be>
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	d102      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x2c4>
 800376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e038      	b.n	80037f8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d19c      	bne.n	80036ca <HAL_SPI_TransmitReceive+0x21c>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d197      	bne.n	80036ca <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8b6 	bl	8003910 <SPI_EndRxTxTransaction>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e01d      	b.n	80037f8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
  }
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3728      	adds	r7, #40	@ 0x28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003810:	f7fe fd02 	bl	8002218 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	4413      	add	r3, r2
 800381e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003820:	f7fe fcfa 	bl	8002218 <HAL_GetTick>
 8003824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003826:	4b39      	ldr	r3, [pc, #228]	@ (800390c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	015b      	lsls	r3, r3, #5
 800382c:	0d1b      	lsrs	r3, r3, #20
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	fb02 f303 	mul.w	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003836:	e054      	b.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d050      	beq.n	80038e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003840:	f7fe fcea 	bl	8002218 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	429a      	cmp	r2, r3
 800384e:	d902      	bls.n	8003856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d13d      	bne.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800386e:	d111      	bne.n	8003894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003878:	d004      	beq.n	8003884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003882:	d107      	bne.n	8003894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800389c:	d10f      	bne.n	80038be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e017      	b.n	8003902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3b01      	subs	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d19b      	bne.n	8003838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3720      	adds	r7, #32
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000

08003910 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2201      	movs	r2, #1
 8003924:	2102      	movs	r1, #2
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff ff6a 	bl	8003800 <SPI_WaitFlagStateUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e032      	b.n	80039a8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003942:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <SPI_EndRxTxTransaction+0xa0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1b      	ldr	r2, [pc, #108]	@ (80039b4 <SPI_EndRxTxTransaction+0xa4>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	0d5b      	lsrs	r3, r3, #21
 800394e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003960:	d112      	bne.n	8003988 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2200      	movs	r2, #0
 800396a:	2180      	movs	r1, #128	@ 0x80
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff ff47 	bl	8003800 <SPI_WaitFlagStateUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d016      	beq.n	80039a6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397c:	f043 0220 	orr.w	r2, r3, #32
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e00f      	b.n	80039a8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3b01      	subs	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399e:	2b80      	cmp	r3, #128	@ 0x80
 80039a0:	d0f2      	beq.n	8003988 <SPI_EndRxTxTransaction+0x78>
 80039a2:	e000      	b.n	80039a6 <SPI_EndRxTxTransaction+0x96>
        break;
 80039a4:	bf00      	nop
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000000 	.word	0x20000000
 80039b4:	165e9f81 	.word	0x165e9f81

080039b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e041      	b.n	8003a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe fa80 	bl	8001ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 fcd2 	bl	80043a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d001      	beq.n	8003a70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e046      	b.n	8003afe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a23      	ldr	r2, [pc, #140]	@ (8003b0c <HAL_TIM_Base_Start+0xb4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d022      	beq.n	8003ac8 <HAL_TIM_Base_Start+0x70>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8a:	d01d      	beq.n	8003ac8 <HAL_TIM_Base_Start+0x70>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1f      	ldr	r2, [pc, #124]	@ (8003b10 <HAL_TIM_Base_Start+0xb8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d018      	beq.n	8003ac8 <HAL_TIM_Base_Start+0x70>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <HAL_TIM_Base_Start+0xbc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_TIM_Base_Start+0x70>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b18 <HAL_TIM_Base_Start+0xc0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00e      	beq.n	8003ac8 <HAL_TIM_Base_Start+0x70>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1b      	ldr	r2, [pc, #108]	@ (8003b1c <HAL_TIM_Base_Start+0xc4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_TIM_Base_Start+0x70>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a19      	ldr	r2, [pc, #100]	@ (8003b20 <HAL_TIM_Base_Start+0xc8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <HAL_TIM_Base_Start+0x70>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a18      	ldr	r2, [pc, #96]	@ (8003b24 <HAL_TIM_Base_Start+0xcc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d111      	bne.n	8003aec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d010      	beq.n	8003afc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aea:	e007      	b.n	8003afc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	40010400 	.word	0x40010400
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40001800 	.word	0x40001800

08003b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e041      	b.n	8003bbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f839 	bl	8003bc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f000 fc1a 	bl	80043a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <HAL_TIM_PWM_Start+0x24>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e022      	b.n	8003c46 <HAL_TIM_PWM_Start+0x6a>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d109      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x3e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	bf14      	ite	ne
 8003c12:	2301      	movne	r3, #1
 8003c14:	2300      	moveq	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	e015      	b.n	8003c46 <HAL_TIM_PWM_Start+0x6a>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d109      	bne.n	8003c34 <HAL_TIM_PWM_Start+0x58>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e008      	b.n	8003c46 <HAL_TIM_PWM_Start+0x6a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07c      	b.n	8003d48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d104      	bne.n	8003c5e <HAL_TIM_PWM_Start+0x82>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c5c:	e013      	b.n	8003c86 <HAL_TIM_PWM_Start+0xaa>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d104      	bne.n	8003c6e <HAL_TIM_PWM_Start+0x92>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c6c:	e00b      	b.n	8003c86 <HAL_TIM_PWM_Start+0xaa>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d104      	bne.n	8003c7e <HAL_TIM_PWM_Start+0xa2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c7c:	e003      	b.n	8003c86 <HAL_TIM_PWM_Start+0xaa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2202      	movs	r2, #2
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 f81d 	bl	8004cce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2d      	ldr	r2, [pc, #180]	@ (8003d50 <HAL_TIM_PWM_Start+0x174>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIM_PWM_Start+0xcc>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d54 <HAL_TIM_PWM_Start+0x178>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_PWM_Start+0xd0>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_TIM_PWM_Start+0xd2>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a22      	ldr	r2, [pc, #136]	@ (8003d50 <HAL_TIM_PWM_Start+0x174>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd4:	d01d      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1f      	ldr	r2, [pc, #124]	@ (8003d58 <HAL_TIM_PWM_Start+0x17c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d018      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d5c <HAL_TIM_PWM_Start+0x180>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1c      	ldr	r2, [pc, #112]	@ (8003d60 <HAL_TIM_PWM_Start+0x184>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a16      	ldr	r2, [pc, #88]	@ (8003d54 <HAL_TIM_PWM_Start+0x178>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <HAL_TIM_PWM_Start+0x188>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_TIM_PWM_Start+0x136>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	@ (8003d68 <HAL_TIM_PWM_Start+0x18c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d111      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	d010      	beq.n	8003d46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	e007      	b.n	8003d46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40010400 	.word	0x40010400
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800
 8003d60:	40000c00 	.word	0x40000c00
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40001800 	.word	0x40001800

08003d6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e041      	b.n	8003e02 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f839 	bl	8003e0a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f000 faf8 	bl	80043a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_IC_Start+0x1a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	e013      	b.n	8003e62 <HAL_TIM_IC_Start+0x42>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_IC_Start+0x2a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	e00b      	b.n	8003e62 <HAL_TIM_IC_Start+0x42>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_IC_Start+0x3a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	e003      	b.n	8003e62 <HAL_TIM_IC_Start+0x42>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d104      	bne.n	8003e74 <HAL_TIM_IC_Start+0x54>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e013      	b.n	8003e9c <HAL_TIM_IC_Start+0x7c>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d104      	bne.n	8003e84 <HAL_TIM_IC_Start+0x64>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e00b      	b.n	8003e9c <HAL_TIM_IC_Start+0x7c>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d104      	bne.n	8003e94 <HAL_TIM_IC_Start+0x74>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e003      	b.n	8003e9c <HAL_TIM_IC_Start+0x7c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d102      	bne.n	8003eaa <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ea4:	7bbb      	ldrb	r3, [r7, #14]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d001      	beq.n	8003eae <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e081      	b.n	8003fb2 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_IC_Start+0x9e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ebc:	e013      	b.n	8003ee6 <HAL_TIM_IC_Start+0xc6>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_IC_Start+0xae>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ecc:	e00b      	b.n	8003ee6 <HAL_TIM_IC_Start+0xc6>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d104      	bne.n	8003ede <HAL_TIM_IC_Start+0xbe>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003edc:	e003      	b.n	8003ee6 <HAL_TIM_IC_Start+0xc6>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_IC_Start+0xd6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ef4:	e013      	b.n	8003f1e <HAL_TIM_IC_Start+0xfe>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_IC_Start+0xe6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f04:	e00b      	b.n	8003f1e <HAL_TIM_IC_Start+0xfe>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_IC_Start+0xf6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f14:	e003      	b.n	8003f1e <HAL_TIM_IC_Start+0xfe>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2201      	movs	r2, #1
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fed1 	bl	8004cce <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a22      	ldr	r2, [pc, #136]	@ (8003fbc <HAL_TIM_IC_Start+0x19c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d022      	beq.n	8003f7c <HAL_TIM_IC_Start+0x15c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3e:	d01d      	beq.n	8003f7c <HAL_TIM_IC_Start+0x15c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc0 <HAL_TIM_IC_Start+0x1a0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d018      	beq.n	8003f7c <HAL_TIM_IC_Start+0x15c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc4 <HAL_TIM_IC_Start+0x1a4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d013      	beq.n	8003f7c <HAL_TIM_IC_Start+0x15c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc8 <HAL_TIM_IC_Start+0x1a8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00e      	beq.n	8003f7c <HAL_TIM_IC_Start+0x15c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1a      	ldr	r2, [pc, #104]	@ (8003fcc <HAL_TIM_IC_Start+0x1ac>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d009      	beq.n	8003f7c <HAL_TIM_IC_Start+0x15c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a18      	ldr	r2, [pc, #96]	@ (8003fd0 <HAL_TIM_IC_Start+0x1b0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <HAL_TIM_IC_Start+0x15c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a17      	ldr	r2, [pc, #92]	@ (8003fd4 <HAL_TIM_IC_Start+0x1b4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d111      	bne.n	8003fa0 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d010      	beq.n	8003fb0 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9e:	e007      	b.n	8003fb0 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40010400 	.word	0x40010400
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40001800 	.word	0x40001800

08003fd8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e088      	b.n	8004108 <HAL_TIM_IC_ConfigChannel+0x130>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004014:	f000 fcb2 	bl	800497c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 020c 	bic.w	r2, r2, #12
 8004026:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6999      	ldr	r1, [r3, #24]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	619a      	str	r2, [r3, #24]
 800403a:	e060      	b.n	80040fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d11c      	bne.n	800407c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004052:	f000 fd36 	bl	8004ac2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004064:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6999      	ldr	r1, [r3, #24]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	021a      	lsls	r2, r3, #8
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	619a      	str	r2, [r3, #24]
 800407a:	e040      	b.n	80040fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b08      	cmp	r3, #8
 8004080:	d11b      	bne.n	80040ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004092:	f000 fd83 	bl	8004b9c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 020c 	bic.w	r2, r2, #12
 80040a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69d9      	ldr	r1, [r3, #28]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	61da      	str	r2, [r3, #28]
 80040b8:	e021      	b.n	80040fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	d11c      	bne.n	80040fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80040d0:	f000 fda0 	bl	8004c14 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80040e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69d9      	ldr	r1, [r3, #28]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	021a      	lsls	r2, r3, #8
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	61da      	str	r2, [r3, #28]
 80040f8:	e001      	b.n	80040fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800412a:	2302      	movs	r3, #2
 800412c:	e0ae      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b0c      	cmp	r3, #12
 800413a:	f200 809f 	bhi.w	800427c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800413e:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004179 	.word	0x08004179
 8004148:	0800427d 	.word	0x0800427d
 800414c:	0800427d 	.word	0x0800427d
 8004150:	0800427d 	.word	0x0800427d
 8004154:	080041b9 	.word	0x080041b9
 8004158:	0800427d 	.word	0x0800427d
 800415c:	0800427d 	.word	0x0800427d
 8004160:	0800427d 	.word	0x0800427d
 8004164:	080041fb 	.word	0x080041fb
 8004168:	0800427d 	.word	0x0800427d
 800416c:	0800427d 	.word	0x0800427d
 8004170:	0800427d 	.word	0x0800427d
 8004174:	0800423b 	.word	0x0800423b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f9ba 	bl	80044f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0208 	orr.w	r2, r2, #8
 8004192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0204 	bic.w	r2, r2, #4
 80041a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	619a      	str	r2, [r3, #24]
      break;
 80041b6:	e064      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fa0a 	bl	80045d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	619a      	str	r2, [r3, #24]
      break;
 80041f8:	e043      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fa5f 	bl	80046c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0208 	orr.w	r2, r2, #8
 8004214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0204 	bic.w	r2, r2, #4
 8004224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69d9      	ldr	r1, [r3, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	61da      	str	r2, [r3, #28]
      break;
 8004238:	e023      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fab3 	bl	80047ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69d9      	ldr	r1, [r3, #28]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	021a      	lsls	r2, r3, #8
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	61da      	str	r2, [r3, #28]
      break;
 800427a:	e002      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
      break;
 8004280:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIM_SlaveConfigSynchro+0x18>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e031      	b.n	8004310 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80042bc:	6839      	ldr	r1, [r7, #0]
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 faca 	bl	8004858 <TIM_SlaveTimer_SetConfig>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e018      	b.n	8004310 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042fc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b0c      	cmp	r3, #12
 800432a:	d831      	bhi.n	8004390 <HAL_TIM_ReadCapturedValue+0x78>
 800432c:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <HAL_TIM_ReadCapturedValue+0x1c>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004369 	.word	0x08004369
 8004338:	08004391 	.word	0x08004391
 800433c:	08004391 	.word	0x08004391
 8004340:	08004391 	.word	0x08004391
 8004344:	08004373 	.word	0x08004373
 8004348:	08004391 	.word	0x08004391
 800434c:	08004391 	.word	0x08004391
 8004350:	08004391 	.word	0x08004391
 8004354:	0800437d 	.word	0x0800437d
 8004358:	08004391 	.word	0x08004391
 800435c:	08004391 	.word	0x08004391
 8004360:	08004391 	.word	0x08004391
 8004364:	08004387 	.word	0x08004387
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436e:	60fb      	str	r3, [r7, #12]

      break;
 8004370:	e00f      	b.n	8004392 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004378:	60fb      	str	r3, [r7, #12]

      break;
 800437a:	e00a      	b.n	8004392 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004382:	60fb      	str	r3, [r7, #12]

      break;
 8004384:	e005      	b.n	8004392 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	60fb      	str	r3, [r7, #12]

      break;
 800438e:	e000      	b.n	8004392 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004390:	bf00      	nop
  }

  return tmpreg;
 8004392:	68fb      	ldr	r3, [r7, #12]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a46      	ldr	r2, [pc, #280]	@ (80044cc <TIM_Base_SetConfig+0x12c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d013      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043be:	d00f      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a43      	ldr	r2, [pc, #268]	@ (80044d0 <TIM_Base_SetConfig+0x130>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00b      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a42      	ldr	r2, [pc, #264]	@ (80044d4 <TIM_Base_SetConfig+0x134>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a41      	ldr	r2, [pc, #260]	@ (80044d8 <TIM_Base_SetConfig+0x138>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a40      	ldr	r2, [pc, #256]	@ (80044dc <TIM_Base_SetConfig+0x13c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a35      	ldr	r2, [pc, #212]	@ (80044cc <TIM_Base_SetConfig+0x12c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d02b      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004400:	d027      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a32      	ldr	r2, [pc, #200]	@ (80044d0 <TIM_Base_SetConfig+0x130>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d023      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a31      	ldr	r2, [pc, #196]	@ (80044d4 <TIM_Base_SetConfig+0x134>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d01f      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a30      	ldr	r2, [pc, #192]	@ (80044d8 <TIM_Base_SetConfig+0x138>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01b      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a2f      	ldr	r2, [pc, #188]	@ (80044dc <TIM_Base_SetConfig+0x13c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d017      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a2e      	ldr	r2, [pc, #184]	@ (80044e0 <TIM_Base_SetConfig+0x140>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a2d      	ldr	r2, [pc, #180]	@ (80044e4 <TIM_Base_SetConfig+0x144>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00f      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2c      	ldr	r2, [pc, #176]	@ (80044e8 <TIM_Base_SetConfig+0x148>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00b      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a2b      	ldr	r2, [pc, #172]	@ (80044ec <TIM_Base_SetConfig+0x14c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d007      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2a      	ldr	r2, [pc, #168]	@ (80044f0 <TIM_Base_SetConfig+0x150>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d003      	beq.n	8004452 <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a29      	ldr	r2, [pc, #164]	@ (80044f4 <TIM_Base_SetConfig+0x154>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d108      	bne.n	8004464 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a10      	ldr	r2, [pc, #64]	@ (80044cc <TIM_Base_SetConfig+0x12c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_Base_SetConfig+0xf8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a12      	ldr	r2, [pc, #72]	@ (80044dc <TIM_Base_SetConfig+0x13c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d103      	bne.n	80044a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d105      	bne.n	80044be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	611a      	str	r2, [r3, #16]
  }
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800
 80044d8:	40000c00 	.word	0x40000c00
 80044dc:	40010400 	.word	0x40010400
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40014400 	.word	0x40014400
 80044e8:	40014800 	.word	0x40014800
 80044ec:	40001800 	.word	0x40001800
 80044f0:	40001c00 	.word	0x40001c00
 80044f4:	40002000 	.word	0x40002000

080044f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f023 0201 	bic.w	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f023 0302 	bic.w	r3, r3, #2
 8004540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a20      	ldr	r2, [pc, #128]	@ (80045d0 <TIM_OC1_SetConfig+0xd8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_OC1_SetConfig+0x64>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a1f      	ldr	r2, [pc, #124]	@ (80045d4 <TIM_OC1_SetConfig+0xdc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d10c      	bne.n	8004576 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0308 	bic.w	r3, r3, #8
 8004562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 0304 	bic.w	r3, r3, #4
 8004574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a15      	ldr	r2, [pc, #84]	@ (80045d0 <TIM_OC1_SetConfig+0xd8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC1_SetConfig+0x8e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a14      	ldr	r2, [pc, #80]	@ (80045d4 <TIM_OC1_SetConfig+0xdc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d111      	bne.n	80045aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800458c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	621a      	str	r2, [r3, #32]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40010400 	.word	0x40010400

080045d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f023 0210 	bic.w	r2, r3, #16
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0320 	bic.w	r3, r3, #32
 8004622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a22      	ldr	r2, [pc, #136]	@ (80046bc <TIM_OC2_SetConfig+0xe4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC2_SetConfig+0x68>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a21      	ldr	r2, [pc, #132]	@ (80046c0 <TIM_OC2_SetConfig+0xe8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10d      	bne.n	800465c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800465a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a17      	ldr	r2, [pc, #92]	@ (80046bc <TIM_OC2_SetConfig+0xe4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_OC2_SetConfig+0x94>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a16      	ldr	r2, [pc, #88]	@ (80046c0 <TIM_OC2_SetConfig+0xe8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d113      	bne.n	8004694 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800467a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40010000 	.word	0x40010000
 80046c0:	40010400 	.word	0x40010400

080046c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0303 	bic.w	r3, r3, #3
 80046fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800470c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	021b      	lsls	r3, r3, #8
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a21      	ldr	r2, [pc, #132]	@ (80047a4 <TIM_OC3_SetConfig+0xe0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_OC3_SetConfig+0x66>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a20      	ldr	r2, [pc, #128]	@ (80047a8 <TIM_OC3_SetConfig+0xe4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10d      	bne.n	8004746 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <TIM_OC3_SetConfig+0xe0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_OC3_SetConfig+0x92>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a15      	ldr	r2, [pc, #84]	@ (80047a8 <TIM_OC3_SetConfig+0xe4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d113      	bne.n	800477e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800475c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	621a      	str	r2, [r3, #32]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40010400 	.word	0x40010400

080047ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	031b      	lsls	r3, r3, #12
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a12      	ldr	r2, [pc, #72]	@ (8004850 <TIM_OC4_SetConfig+0xa4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_OC4_SetConfig+0x68>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a11      	ldr	r2, [pc, #68]	@ (8004854 <TIM_OC4_SetConfig+0xa8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d109      	bne.n	8004828 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800481a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	019b      	lsls	r3, r3, #6
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40010000 	.word	0x40010000
 8004854:	40010400 	.word	0x40010400

08004858 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004874:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f023 0307 	bic.w	r3, r3, #7
 8004886:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b70      	cmp	r3, #112	@ 0x70
 80048a0:	d01a      	beq.n	80048d8 <TIM_SlaveTimer_SetConfig+0x80>
 80048a2:	2b70      	cmp	r3, #112	@ 0x70
 80048a4:	d860      	bhi.n	8004968 <TIM_SlaveTimer_SetConfig+0x110>
 80048a6:	2b60      	cmp	r3, #96	@ 0x60
 80048a8:	d054      	beq.n	8004954 <TIM_SlaveTimer_SetConfig+0xfc>
 80048aa:	2b60      	cmp	r3, #96	@ 0x60
 80048ac:	d85c      	bhi.n	8004968 <TIM_SlaveTimer_SetConfig+0x110>
 80048ae:	2b50      	cmp	r3, #80	@ 0x50
 80048b0:	d046      	beq.n	8004940 <TIM_SlaveTimer_SetConfig+0xe8>
 80048b2:	2b50      	cmp	r3, #80	@ 0x50
 80048b4:	d858      	bhi.n	8004968 <TIM_SlaveTimer_SetConfig+0x110>
 80048b6:	2b40      	cmp	r3, #64	@ 0x40
 80048b8:	d019      	beq.n	80048ee <TIM_SlaveTimer_SetConfig+0x96>
 80048ba:	2b40      	cmp	r3, #64	@ 0x40
 80048bc:	d854      	bhi.n	8004968 <TIM_SlaveTimer_SetConfig+0x110>
 80048be:	2b30      	cmp	r3, #48	@ 0x30
 80048c0:	d055      	beq.n	800496e <TIM_SlaveTimer_SetConfig+0x116>
 80048c2:	2b30      	cmp	r3, #48	@ 0x30
 80048c4:	d850      	bhi.n	8004968 <TIM_SlaveTimer_SetConfig+0x110>
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d051      	beq.n	800496e <TIM_SlaveTimer_SetConfig+0x116>
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d84c      	bhi.n	8004968 <TIM_SlaveTimer_SetConfig+0x110>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d04d      	beq.n	800496e <TIM_SlaveTimer_SetConfig+0x116>
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d04b      	beq.n	800496e <TIM_SlaveTimer_SetConfig+0x116>
 80048d6:	e047      	b.n	8004968 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80048e8:	f000 f9d1 	bl	8004c8e <TIM_ETR_SetConfig>
      break;
 80048ec:	e040      	b.n	8004970 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d101      	bne.n	80048fa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e03b      	b.n	8004972 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a1a      	ldr	r2, [r3, #32]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004920:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	4313      	orrs	r3, r2
 800492c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]
      break;
 800493e:	e017      	b.n	8004970 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800494c:	461a      	mov	r2, r3
 800494e:	f000 f889 	bl	8004a64 <TIM_TI1_ConfigInputStage>
      break;
 8004952:	e00d      	b.n	8004970 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004960:	461a      	mov	r2, r3
 8004962:	f000 f8eb 	bl	8004b3c <TIM_TI2_ConfigInputStage>
      break;
 8004966:	e003      	b.n	8004970 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	75fb      	strb	r3, [r7, #23]
      break;
 800496c:	e000      	b.n	8004970 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800496e:	bf00      	nop
  }

  return status;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f023 0201 	bic.w	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a28      	ldr	r2, [pc, #160]	@ (8004a48 <TIM_TI1_SetConfig+0xcc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01b      	beq.n	80049e2 <TIM_TI1_SetConfig+0x66>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b0:	d017      	beq.n	80049e2 <TIM_TI1_SetConfig+0x66>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a25      	ldr	r2, [pc, #148]	@ (8004a4c <TIM_TI1_SetConfig+0xd0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <TIM_TI1_SetConfig+0x66>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a24      	ldr	r2, [pc, #144]	@ (8004a50 <TIM_TI1_SetConfig+0xd4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00f      	beq.n	80049e2 <TIM_TI1_SetConfig+0x66>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a23      	ldr	r2, [pc, #140]	@ (8004a54 <TIM_TI1_SetConfig+0xd8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_TI1_SetConfig+0x66>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4a22      	ldr	r2, [pc, #136]	@ (8004a58 <TIM_TI1_SetConfig+0xdc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_TI1_SetConfig+0x66>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4a21      	ldr	r2, [pc, #132]	@ (8004a5c <TIM_TI1_SetConfig+0xe0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_TI1_SetConfig+0x66>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a20      	ldr	r2, [pc, #128]	@ (8004a60 <TIM_TI1_SetConfig+0xe4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <TIM_TI1_SetConfig+0x6a>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <TIM_TI1_SetConfig+0x6c>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	e003      	b.n	8004a06 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f023 030a 	bic.w	r3, r3, #10
 8004a20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f003 030a 	and.w	r3, r3, #10
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40010400 	.word	0x40010400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40001800 	.word	0x40001800

08004a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0201 	bic.w	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f023 030a 	bic.w	r3, r3, #10
 8004aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b087      	sub	sp, #28
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
 8004ace:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f023 0210 	bic.w	r2, r3, #16
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	031b      	lsls	r3, r3, #12
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	621a      	str	r2, [r3, #32]
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f023 0210 	bic.w	r2, r3, #16
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	031b      	lsls	r3, r3, #12
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	621a      	str	r2, [r3, #32]
}
 8004b90:	bf00      	nop
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f023 0303 	bic.w	r3, r3, #3
 8004bc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bd8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004bec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c40:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	031b      	lsls	r3, r3, #12
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004c66:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	031b      	lsls	r3, r3, #12
 8004c6c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b087      	sub	sp, #28
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	021a      	lsls	r2, r3, #8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	609a      	str	r2, [r3, #8]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b087      	sub	sp, #28
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1a      	ldr	r2, [r3, #32]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	401a      	ands	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a1a      	ldr	r2, [r3, #32]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	431a      	orrs	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	621a      	str	r2, [r3, #32]
}
 8004d0c:	bf00      	nop
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e05a      	b.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a21      	ldr	r2, [pc, #132]	@ (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d022      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7c:	d01d      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1d      	ldr	r2, [pc, #116]	@ (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d018      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1a      	ldr	r2, [pc, #104]	@ (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00e      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a18      	ldr	r2, [pc, #96]	@ (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a17      	ldr	r2, [pc, #92]	@ (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a15      	ldr	r2, [pc, #84]	@ (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d10c      	bne.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40010000 	.word	0x40010000
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40000800 	.word	0x40000800
 8004e00:	40000c00 	.word	0x40000c00
 8004e04:	40010400 	.word	0x40010400
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40001800 	.word	0x40001800

08004e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e042      	b.n	8004ea8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fd f916 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2224      	movs	r2, #36	@ 0x24
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa09 	bl	800526c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	@ 0x28
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d175      	bne.n	8004fbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_UART_Transmit+0x2c>
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e06e      	b.n	8004fbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2221      	movs	r2, #33	@ 0x21
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eee:	f7fd f993 	bl	8002218 <HAL_GetTick>
 8004ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	88fa      	ldrh	r2, [r7, #6]
 8004efe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f08:	d108      	bne.n	8004f1c <HAL_UART_Transmit+0x6c>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d104      	bne.n	8004f1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	e003      	b.n	8004f24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f24:	e02e      	b.n	8004f84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2180      	movs	r1, #128	@ 0x80
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f8df 	bl	80050f4 <UART_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e03a      	b.n	8004fbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	3302      	adds	r3, #2
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	e007      	b.n	8004f76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	781a      	ldrb	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1cb      	bne.n	8004f26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2140      	movs	r1, #64	@ 0x40
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f8ab 	bl	80050f4 <UART_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e006      	b.n	8004fbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e000      	b.n	8004fbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fbc:	2302      	movs	r3, #2
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b08a      	sub	sp, #40	@ 0x28
 8004fca:	af02      	add	r7, sp, #8
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	f040 8081 	bne.w	80050ea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_UART_Receive+0x2e>
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e079      	b.n	80050ec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2222      	movs	r2, #34	@ 0x22
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800500c:	f7fd f904 	bl	8002218 <HAL_GetTick>
 8005010:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005026:	d108      	bne.n	800503a <HAL_UART_Receive+0x74>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	e003      	b.n	8005042 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005042:	e047      	b.n	80050d4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	2120      	movs	r1, #32
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f850 	bl	80050f4 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e042      	b.n	80050ec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005078:	b29a      	uxth	r2, r3
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	3302      	adds	r3, #2
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	e01f      	b.n	80050c6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800508e:	d007      	beq.n	80050a0 <HAL_UART_Receive+0xda>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <HAL_UART_Receive+0xe8>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	e008      	b.n	80050c0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1b2      	bne.n	8005044 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e000      	b.n	80050ec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80050ea:	2302      	movs	r3, #2
  }
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	4613      	mov	r3, r2
 8005102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005104:	e03b      	b.n	800517e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d037      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510e:	f7fd f883 	bl	8002218 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	6a3a      	ldr	r2, [r7, #32]
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <UART_WaitOnFlagUntilTimeout+0x30>
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e03a      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d023      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b80      	cmp	r3, #128	@ 0x80
 800513a:	d020      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0x8a>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b40      	cmp	r3, #64	@ 0x40
 8005140:	d01d      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b08      	cmp	r3, #8
 800514e:	d116      	bne.n	800517e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f81d 	bl	80051a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2208      	movs	r2, #8
 8005170:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e00f      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4013      	ands	r3, r2
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	bf0c      	ite	eq
 800518e:	2301      	moveq	r3, #1
 8005190:	2300      	movne	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	429a      	cmp	r2, r3
 800519a:	d0b4      	beq.n	8005106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b095      	sub	sp, #84	@ 0x54
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80051d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e5      	bne.n	80051ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3314      	adds	r3, #20
 80051e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f023 0301 	bic.w	r3, r3, #1
 80051f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3314      	adds	r3, #20
 8005200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e5      	bne.n	80051e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521a:	2b01      	cmp	r3, #1
 800521c:	d119      	bne.n	8005252 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	60bb      	str	r3, [r7, #8]
   return(result);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 0310 	bic.w	r3, r3, #16
 8005234:	647b      	str	r3, [r7, #68]	@ 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800523e:	61ba      	str	r2, [r7, #24]
 8005240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6979      	ldr	r1, [r7, #20]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	613b      	str	r3, [r7, #16]
   return(result);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e5      	bne.n	800521e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005260:	bf00      	nop
 8005262:	3754      	adds	r7, #84	@ 0x54
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800526c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005270:	b0c0      	sub	sp, #256	@ 0x100
 8005272:	af00      	add	r7, sp, #0
 8005274:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005288:	68d9      	ldr	r1, [r3, #12]
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	ea40 0301 	orr.w	r3, r0, r1
 8005294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052c4:	f021 010c 	bic.w	r1, r1, #12
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052d2:	430b      	orrs	r3, r1
 80052d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e6:	6999      	ldr	r1, [r3, #24]
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	ea40 0301 	orr.w	r3, r0, r1
 80052f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b8f      	ldr	r3, [pc, #572]	@ (8005538 <UART_SetConfig+0x2cc>)
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d005      	beq.n	800530c <UART_SetConfig+0xa0>
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	4b8d      	ldr	r3, [pc, #564]	@ (800553c <UART_SetConfig+0x2d0>)
 8005308:	429a      	cmp	r2, r3
 800530a:	d104      	bne.n	8005316 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800530c:	f7fd feee 	bl	80030ec <HAL_RCC_GetPCLK2Freq>
 8005310:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005314:	e003      	b.n	800531e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005316:	f7fd fed5 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 800531a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005328:	f040 810c 	bne.w	8005544 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800532c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005330:	2200      	movs	r2, #0
 8005332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005336:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800533a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800533e:	4622      	mov	r2, r4
 8005340:	462b      	mov	r3, r5
 8005342:	1891      	adds	r1, r2, r2
 8005344:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005346:	415b      	adcs	r3, r3
 8005348:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800534a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800534e:	4621      	mov	r1, r4
 8005350:	eb12 0801 	adds.w	r8, r2, r1
 8005354:	4629      	mov	r1, r5
 8005356:	eb43 0901 	adc.w	r9, r3, r1
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800536a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800536e:	4690      	mov	r8, r2
 8005370:	4699      	mov	r9, r3
 8005372:	4623      	mov	r3, r4
 8005374:	eb18 0303 	adds.w	r3, r8, r3
 8005378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800537c:	462b      	mov	r3, r5
 800537e:	eb49 0303 	adc.w	r3, r9, r3
 8005382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005392:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800539a:	460b      	mov	r3, r1
 800539c:	18db      	adds	r3, r3, r3
 800539e:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a0:	4613      	mov	r3, r2
 80053a2:	eb42 0303 	adc.w	r3, r2, r3
 80053a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80053a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053b0:	f7fb fc4a 	bl	8000c48 <__aeabi_uldivmod>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4b61      	ldr	r3, [pc, #388]	@ (8005540 <UART_SetConfig+0x2d4>)
 80053ba:	fba3 2302 	umull	r2, r3, r3, r2
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	011c      	lsls	r4, r3, #4
 80053c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053d4:	4642      	mov	r2, r8
 80053d6:	464b      	mov	r3, r9
 80053d8:	1891      	adds	r1, r2, r2
 80053da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053dc:	415b      	adcs	r3, r3
 80053de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053e4:	4641      	mov	r1, r8
 80053e6:	eb12 0a01 	adds.w	sl, r2, r1
 80053ea:	4649      	mov	r1, r9
 80053ec:	eb43 0b01 	adc.w	fp, r3, r1
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005404:	4692      	mov	sl, r2
 8005406:	469b      	mov	fp, r3
 8005408:	4643      	mov	r3, r8
 800540a:	eb1a 0303 	adds.w	r3, sl, r3
 800540e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005412:	464b      	mov	r3, r9
 8005414:	eb4b 0303 	adc.w	r3, fp, r3
 8005418:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005428:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800542c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005430:	460b      	mov	r3, r1
 8005432:	18db      	adds	r3, r3, r3
 8005434:	643b      	str	r3, [r7, #64]	@ 0x40
 8005436:	4613      	mov	r3, r2
 8005438:	eb42 0303 	adc.w	r3, r2, r3
 800543c:	647b      	str	r3, [r7, #68]	@ 0x44
 800543e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005442:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005446:	f7fb fbff 	bl	8000c48 <__aeabi_uldivmod>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4611      	mov	r1, r2
 8005450:	4b3b      	ldr	r3, [pc, #236]	@ (8005540 <UART_SetConfig+0x2d4>)
 8005452:	fba3 2301 	umull	r2, r3, r3, r1
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2264      	movs	r2, #100	@ 0x64
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	1acb      	subs	r3, r1, r3
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005466:	4b36      	ldr	r3, [pc, #216]	@ (8005540 <UART_SetConfig+0x2d4>)
 8005468:	fba3 2302 	umull	r2, r3, r3, r2
 800546c:	095b      	lsrs	r3, r3, #5
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005474:	441c      	add	r4, r3
 8005476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800547a:	2200      	movs	r2, #0
 800547c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005480:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005484:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	1891      	adds	r1, r2, r2
 800548e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005490:	415b      	adcs	r3, r3
 8005492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005498:	4641      	mov	r1, r8
 800549a:	1851      	adds	r1, r2, r1
 800549c:	6339      	str	r1, [r7, #48]	@ 0x30
 800549e:	4649      	mov	r1, r9
 80054a0:	414b      	adcs	r3, r1
 80054a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054b0:	4659      	mov	r1, fp
 80054b2:	00cb      	lsls	r3, r1, #3
 80054b4:	4651      	mov	r1, sl
 80054b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ba:	4651      	mov	r1, sl
 80054bc:	00ca      	lsls	r2, r1, #3
 80054be:	4610      	mov	r0, r2
 80054c0:	4619      	mov	r1, r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	4642      	mov	r2, r8
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054cc:	464b      	mov	r3, r9
 80054ce:	460a      	mov	r2, r1
 80054d0:	eb42 0303 	adc.w	r3, r2, r3
 80054d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054ec:	460b      	mov	r3, r1
 80054ee:	18db      	adds	r3, r3, r3
 80054f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054f2:	4613      	mov	r3, r2
 80054f4:	eb42 0303 	adc.w	r3, r2, r3
 80054f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005502:	f7fb fba1 	bl	8000c48 <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <UART_SetConfig+0x2d4>)
 800550c:	fba3 1302 	umull	r1, r3, r3, r2
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	2164      	movs	r1, #100	@ 0x64
 8005514:	fb01 f303 	mul.w	r3, r1, r3
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	3332      	adds	r3, #50	@ 0x32
 800551e:	4a08      	ldr	r2, [pc, #32]	@ (8005540 <UART_SetConfig+0x2d4>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	f003 0207 	and.w	r2, r3, #7
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4422      	add	r2, r4
 8005532:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005534:	e106      	b.n	8005744 <UART_SetConfig+0x4d8>
 8005536:	bf00      	nop
 8005538:	40011000 	.word	0x40011000
 800553c:	40011400 	.word	0x40011400
 8005540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005548:	2200      	movs	r2, #0
 800554a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800554e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005556:	4642      	mov	r2, r8
 8005558:	464b      	mov	r3, r9
 800555a:	1891      	adds	r1, r2, r2
 800555c:	6239      	str	r1, [r7, #32]
 800555e:	415b      	adcs	r3, r3
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24
 8005562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005566:	4641      	mov	r1, r8
 8005568:	1854      	adds	r4, r2, r1
 800556a:	4649      	mov	r1, r9
 800556c:	eb43 0501 	adc.w	r5, r3, r1
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	00eb      	lsls	r3, r5, #3
 800557a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800557e:	00e2      	lsls	r2, r4, #3
 8005580:	4614      	mov	r4, r2
 8005582:	461d      	mov	r5, r3
 8005584:	4643      	mov	r3, r8
 8005586:	18e3      	adds	r3, r4, r3
 8005588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800558c:	464b      	mov	r3, r9
 800558e:	eb45 0303 	adc.w	r3, r5, r3
 8005592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055b2:	4629      	mov	r1, r5
 80055b4:	008b      	lsls	r3, r1, #2
 80055b6:	4621      	mov	r1, r4
 80055b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055bc:	4621      	mov	r1, r4
 80055be:	008a      	lsls	r2, r1, #2
 80055c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055c4:	f7fb fb40 	bl	8000c48 <__aeabi_uldivmod>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4b60      	ldr	r3, [pc, #384]	@ (8005750 <UART_SetConfig+0x4e4>)
 80055ce:	fba3 2302 	umull	r2, r3, r3, r2
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	011c      	lsls	r4, r3, #4
 80055d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80055e8:	4642      	mov	r2, r8
 80055ea:	464b      	mov	r3, r9
 80055ec:	1891      	adds	r1, r2, r2
 80055ee:	61b9      	str	r1, [r7, #24]
 80055f0:	415b      	adcs	r3, r3
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055f8:	4641      	mov	r1, r8
 80055fa:	1851      	adds	r1, r2, r1
 80055fc:	6139      	str	r1, [r7, #16]
 80055fe:	4649      	mov	r1, r9
 8005600:	414b      	adcs	r3, r1
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005610:	4659      	mov	r1, fp
 8005612:	00cb      	lsls	r3, r1, #3
 8005614:	4651      	mov	r1, sl
 8005616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800561a:	4651      	mov	r1, sl
 800561c:	00ca      	lsls	r2, r1, #3
 800561e:	4610      	mov	r0, r2
 8005620:	4619      	mov	r1, r3
 8005622:	4603      	mov	r3, r0
 8005624:	4642      	mov	r2, r8
 8005626:	189b      	adds	r3, r3, r2
 8005628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800562c:	464b      	mov	r3, r9
 800562e:	460a      	mov	r2, r1
 8005630:	eb42 0303 	adc.w	r3, r2, r3
 8005634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005642:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005650:	4649      	mov	r1, r9
 8005652:	008b      	lsls	r3, r1, #2
 8005654:	4641      	mov	r1, r8
 8005656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800565a:	4641      	mov	r1, r8
 800565c:	008a      	lsls	r2, r1, #2
 800565e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005662:	f7fb faf1 	bl	8000c48 <__aeabi_uldivmod>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4611      	mov	r1, r2
 800566c:	4b38      	ldr	r3, [pc, #224]	@ (8005750 <UART_SetConfig+0x4e4>)
 800566e:	fba3 2301 	umull	r2, r3, r3, r1
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	2264      	movs	r2, #100	@ 0x64
 8005676:	fb02 f303 	mul.w	r3, r2, r3
 800567a:	1acb      	subs	r3, r1, r3
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	3332      	adds	r3, #50	@ 0x32
 8005680:	4a33      	ldr	r2, [pc, #204]	@ (8005750 <UART_SetConfig+0x4e4>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800568c:	441c      	add	r4, r3
 800568e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005692:	2200      	movs	r2, #0
 8005694:	673b      	str	r3, [r7, #112]	@ 0x70
 8005696:	677a      	str	r2, [r7, #116]	@ 0x74
 8005698:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800569c:	4642      	mov	r2, r8
 800569e:	464b      	mov	r3, r9
 80056a0:	1891      	adds	r1, r2, r2
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	415b      	adcs	r3, r3
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056ac:	4641      	mov	r1, r8
 80056ae:	1851      	adds	r1, r2, r1
 80056b0:	6039      	str	r1, [r7, #0]
 80056b2:	4649      	mov	r1, r9
 80056b4:	414b      	adcs	r3, r1
 80056b6:	607b      	str	r3, [r7, #4]
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056c4:	4659      	mov	r1, fp
 80056c6:	00cb      	lsls	r3, r1, #3
 80056c8:	4651      	mov	r1, sl
 80056ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ce:	4651      	mov	r1, sl
 80056d0:	00ca      	lsls	r2, r1, #3
 80056d2:	4610      	mov	r0, r2
 80056d4:	4619      	mov	r1, r3
 80056d6:	4603      	mov	r3, r0
 80056d8:	4642      	mov	r2, r8
 80056da:	189b      	adds	r3, r3, r2
 80056dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056de:	464b      	mov	r3, r9
 80056e0:	460a      	mov	r2, r1
 80056e2:	eb42 0303 	adc.w	r3, r2, r3
 80056e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80056f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005700:	4649      	mov	r1, r9
 8005702:	008b      	lsls	r3, r1, #2
 8005704:	4641      	mov	r1, r8
 8005706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800570a:	4641      	mov	r1, r8
 800570c:	008a      	lsls	r2, r1, #2
 800570e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005712:	f7fb fa99 	bl	8000c48 <__aeabi_uldivmod>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4b0d      	ldr	r3, [pc, #52]	@ (8005750 <UART_SetConfig+0x4e4>)
 800571c:	fba3 1302 	umull	r1, r3, r3, r2
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	2164      	movs	r1, #100	@ 0x64
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	3332      	adds	r3, #50	@ 0x32
 800572e:	4a08      	ldr	r2, [pc, #32]	@ (8005750 <UART_SetConfig+0x4e4>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	f003 020f 	and.w	r2, r3, #15
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4422      	add	r2, r4
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800574a:	46bd      	mov	sp, r7
 800574c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005750:	51eb851f 	.word	0x51eb851f

08005754 <__cvt>:
 8005754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	ec57 6b10 	vmov	r6, r7, d0
 800575c:	2f00      	cmp	r7, #0
 800575e:	460c      	mov	r4, r1
 8005760:	4619      	mov	r1, r3
 8005762:	463b      	mov	r3, r7
 8005764:	bfbb      	ittet	lt
 8005766:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800576a:	461f      	movlt	r7, r3
 800576c:	2300      	movge	r3, #0
 800576e:	232d      	movlt	r3, #45	@ 0x2d
 8005770:	700b      	strb	r3, [r1, #0]
 8005772:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005774:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005778:	4691      	mov	r9, r2
 800577a:	f023 0820 	bic.w	r8, r3, #32
 800577e:	bfbc      	itt	lt
 8005780:	4632      	movlt	r2, r6
 8005782:	4616      	movlt	r6, r2
 8005784:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005788:	d005      	beq.n	8005796 <__cvt+0x42>
 800578a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800578e:	d100      	bne.n	8005792 <__cvt+0x3e>
 8005790:	3401      	adds	r4, #1
 8005792:	2102      	movs	r1, #2
 8005794:	e000      	b.n	8005798 <__cvt+0x44>
 8005796:	2103      	movs	r1, #3
 8005798:	ab03      	add	r3, sp, #12
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	ab02      	add	r3, sp, #8
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	ec47 6b10 	vmov	d0, r6, r7
 80057a4:	4653      	mov	r3, sl
 80057a6:	4622      	mov	r2, r4
 80057a8:	f000 fe6e 	bl	8006488 <_dtoa_r>
 80057ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80057b0:	4605      	mov	r5, r0
 80057b2:	d119      	bne.n	80057e8 <__cvt+0x94>
 80057b4:	f019 0f01 	tst.w	r9, #1
 80057b8:	d00e      	beq.n	80057d8 <__cvt+0x84>
 80057ba:	eb00 0904 	add.w	r9, r0, r4
 80057be:	2200      	movs	r2, #0
 80057c0:	2300      	movs	r3, #0
 80057c2:	4630      	mov	r0, r6
 80057c4:	4639      	mov	r1, r7
 80057c6:	f7fb f97f 	bl	8000ac8 <__aeabi_dcmpeq>
 80057ca:	b108      	cbz	r0, 80057d0 <__cvt+0x7c>
 80057cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80057d0:	2230      	movs	r2, #48	@ 0x30
 80057d2:	9b03      	ldr	r3, [sp, #12]
 80057d4:	454b      	cmp	r3, r9
 80057d6:	d31e      	bcc.n	8005816 <__cvt+0xc2>
 80057d8:	9b03      	ldr	r3, [sp, #12]
 80057da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057dc:	1b5b      	subs	r3, r3, r5
 80057de:	4628      	mov	r0, r5
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	b004      	add	sp, #16
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057ec:	eb00 0904 	add.w	r9, r0, r4
 80057f0:	d1e5      	bne.n	80057be <__cvt+0x6a>
 80057f2:	7803      	ldrb	r3, [r0, #0]
 80057f4:	2b30      	cmp	r3, #48	@ 0x30
 80057f6:	d10a      	bne.n	800580e <__cvt+0xba>
 80057f8:	2200      	movs	r2, #0
 80057fa:	2300      	movs	r3, #0
 80057fc:	4630      	mov	r0, r6
 80057fe:	4639      	mov	r1, r7
 8005800:	f7fb f962 	bl	8000ac8 <__aeabi_dcmpeq>
 8005804:	b918      	cbnz	r0, 800580e <__cvt+0xba>
 8005806:	f1c4 0401 	rsb	r4, r4, #1
 800580a:	f8ca 4000 	str.w	r4, [sl]
 800580e:	f8da 3000 	ldr.w	r3, [sl]
 8005812:	4499      	add	r9, r3
 8005814:	e7d3      	b.n	80057be <__cvt+0x6a>
 8005816:	1c59      	adds	r1, r3, #1
 8005818:	9103      	str	r1, [sp, #12]
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	e7d9      	b.n	80057d2 <__cvt+0x7e>

0800581e <__exponent>:
 800581e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005820:	2900      	cmp	r1, #0
 8005822:	bfba      	itte	lt
 8005824:	4249      	neglt	r1, r1
 8005826:	232d      	movlt	r3, #45	@ 0x2d
 8005828:	232b      	movge	r3, #43	@ 0x2b
 800582a:	2909      	cmp	r1, #9
 800582c:	7002      	strb	r2, [r0, #0]
 800582e:	7043      	strb	r3, [r0, #1]
 8005830:	dd29      	ble.n	8005886 <__exponent+0x68>
 8005832:	f10d 0307 	add.w	r3, sp, #7
 8005836:	461d      	mov	r5, r3
 8005838:	270a      	movs	r7, #10
 800583a:	461a      	mov	r2, r3
 800583c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005840:	fb07 1416 	mls	r4, r7, r6, r1
 8005844:	3430      	adds	r4, #48	@ 0x30
 8005846:	f802 4c01 	strb.w	r4, [r2, #-1]
 800584a:	460c      	mov	r4, r1
 800584c:	2c63      	cmp	r4, #99	@ 0x63
 800584e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005852:	4631      	mov	r1, r6
 8005854:	dcf1      	bgt.n	800583a <__exponent+0x1c>
 8005856:	3130      	adds	r1, #48	@ 0x30
 8005858:	1e94      	subs	r4, r2, #2
 800585a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800585e:	1c41      	adds	r1, r0, #1
 8005860:	4623      	mov	r3, r4
 8005862:	42ab      	cmp	r3, r5
 8005864:	d30a      	bcc.n	800587c <__exponent+0x5e>
 8005866:	f10d 0309 	add.w	r3, sp, #9
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	42ac      	cmp	r4, r5
 800586e:	bf88      	it	hi
 8005870:	2300      	movhi	r3, #0
 8005872:	3302      	adds	r3, #2
 8005874:	4403      	add	r3, r0
 8005876:	1a18      	subs	r0, r3, r0
 8005878:	b003      	add	sp, #12
 800587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005880:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005884:	e7ed      	b.n	8005862 <__exponent+0x44>
 8005886:	2330      	movs	r3, #48	@ 0x30
 8005888:	3130      	adds	r1, #48	@ 0x30
 800588a:	7083      	strb	r3, [r0, #2]
 800588c:	70c1      	strb	r1, [r0, #3]
 800588e:	1d03      	adds	r3, r0, #4
 8005890:	e7f1      	b.n	8005876 <__exponent+0x58>
	...

08005894 <_printf_float>:
 8005894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005898:	b08d      	sub	sp, #52	@ 0x34
 800589a:	460c      	mov	r4, r1
 800589c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80058a0:	4616      	mov	r6, r2
 80058a2:	461f      	mov	r7, r3
 80058a4:	4605      	mov	r5, r0
 80058a6:	f000 fcef 	bl	8006288 <_localeconv_r>
 80058aa:	6803      	ldr	r3, [r0, #0]
 80058ac:	9304      	str	r3, [sp, #16]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fa fcde 	bl	8000270 <strlen>
 80058b4:	2300      	movs	r3, #0
 80058b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80058b8:	f8d8 3000 	ldr.w	r3, [r8]
 80058bc:	9005      	str	r0, [sp, #20]
 80058be:	3307      	adds	r3, #7
 80058c0:	f023 0307 	bic.w	r3, r3, #7
 80058c4:	f103 0208 	add.w	r2, r3, #8
 80058c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058cc:	f8d4 b000 	ldr.w	fp, [r4]
 80058d0:	f8c8 2000 	str.w	r2, [r8]
 80058d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058dc:	9307      	str	r3, [sp, #28]
 80058de:	f8cd 8018 	str.w	r8, [sp, #24]
 80058e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058ea:	4b9c      	ldr	r3, [pc, #624]	@ (8005b5c <_printf_float+0x2c8>)
 80058ec:	f04f 32ff 	mov.w	r2, #4294967295
 80058f0:	f7fb f91c 	bl	8000b2c <__aeabi_dcmpun>
 80058f4:	bb70      	cbnz	r0, 8005954 <_printf_float+0xc0>
 80058f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058fa:	4b98      	ldr	r3, [pc, #608]	@ (8005b5c <_printf_float+0x2c8>)
 80058fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005900:	f7fb f8f6 	bl	8000af0 <__aeabi_dcmple>
 8005904:	bb30      	cbnz	r0, 8005954 <_printf_float+0xc0>
 8005906:	2200      	movs	r2, #0
 8005908:	2300      	movs	r3, #0
 800590a:	4640      	mov	r0, r8
 800590c:	4649      	mov	r1, r9
 800590e:	f7fb f8e5 	bl	8000adc <__aeabi_dcmplt>
 8005912:	b110      	cbz	r0, 800591a <_printf_float+0x86>
 8005914:	232d      	movs	r3, #45	@ 0x2d
 8005916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800591a:	4a91      	ldr	r2, [pc, #580]	@ (8005b60 <_printf_float+0x2cc>)
 800591c:	4b91      	ldr	r3, [pc, #580]	@ (8005b64 <_printf_float+0x2d0>)
 800591e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005922:	bf94      	ite	ls
 8005924:	4690      	movls	r8, r2
 8005926:	4698      	movhi	r8, r3
 8005928:	2303      	movs	r3, #3
 800592a:	6123      	str	r3, [r4, #16]
 800592c:	f02b 0304 	bic.w	r3, fp, #4
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	f04f 0900 	mov.w	r9, #0
 8005936:	9700      	str	r7, [sp, #0]
 8005938:	4633      	mov	r3, r6
 800593a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800593c:	4621      	mov	r1, r4
 800593e:	4628      	mov	r0, r5
 8005940:	f000 f9d2 	bl	8005ce8 <_printf_common>
 8005944:	3001      	adds	r0, #1
 8005946:	f040 808d 	bne.w	8005a64 <_printf_float+0x1d0>
 800594a:	f04f 30ff 	mov.w	r0, #4294967295
 800594e:	b00d      	add	sp, #52	@ 0x34
 8005950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005954:	4642      	mov	r2, r8
 8005956:	464b      	mov	r3, r9
 8005958:	4640      	mov	r0, r8
 800595a:	4649      	mov	r1, r9
 800595c:	f7fb f8e6 	bl	8000b2c <__aeabi_dcmpun>
 8005960:	b140      	cbz	r0, 8005974 <_printf_float+0xe0>
 8005962:	464b      	mov	r3, r9
 8005964:	2b00      	cmp	r3, #0
 8005966:	bfbc      	itt	lt
 8005968:	232d      	movlt	r3, #45	@ 0x2d
 800596a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800596e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b68 <_printf_float+0x2d4>)
 8005970:	4b7e      	ldr	r3, [pc, #504]	@ (8005b6c <_printf_float+0x2d8>)
 8005972:	e7d4      	b.n	800591e <_printf_float+0x8a>
 8005974:	6863      	ldr	r3, [r4, #4]
 8005976:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800597a:	9206      	str	r2, [sp, #24]
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	d13b      	bne.n	80059f8 <_printf_float+0x164>
 8005980:	2306      	movs	r3, #6
 8005982:	6063      	str	r3, [r4, #4]
 8005984:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005988:	2300      	movs	r3, #0
 800598a:	6022      	str	r2, [r4, #0]
 800598c:	9303      	str	r3, [sp, #12]
 800598e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005990:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005994:	ab09      	add	r3, sp, #36	@ 0x24
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	6861      	ldr	r1, [r4, #4]
 800599a:	ec49 8b10 	vmov	d0, r8, r9
 800599e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80059a2:	4628      	mov	r0, r5
 80059a4:	f7ff fed6 	bl	8005754 <__cvt>
 80059a8:	9b06      	ldr	r3, [sp, #24]
 80059aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059ac:	2b47      	cmp	r3, #71	@ 0x47
 80059ae:	4680      	mov	r8, r0
 80059b0:	d129      	bne.n	8005a06 <_printf_float+0x172>
 80059b2:	1cc8      	adds	r0, r1, #3
 80059b4:	db02      	blt.n	80059bc <_printf_float+0x128>
 80059b6:	6863      	ldr	r3, [r4, #4]
 80059b8:	4299      	cmp	r1, r3
 80059ba:	dd41      	ble.n	8005a40 <_printf_float+0x1ac>
 80059bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80059c0:	fa5f fa8a 	uxtb.w	sl, sl
 80059c4:	3901      	subs	r1, #1
 80059c6:	4652      	mov	r2, sl
 80059c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80059ce:	f7ff ff26 	bl	800581e <__exponent>
 80059d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059d4:	1813      	adds	r3, r2, r0
 80059d6:	2a01      	cmp	r2, #1
 80059d8:	4681      	mov	r9, r0
 80059da:	6123      	str	r3, [r4, #16]
 80059dc:	dc02      	bgt.n	80059e4 <_printf_float+0x150>
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	07d2      	lsls	r2, r2, #31
 80059e2:	d501      	bpl.n	80059e8 <_printf_float+0x154>
 80059e4:	3301      	adds	r3, #1
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0a2      	beq.n	8005936 <_printf_float+0xa2>
 80059f0:	232d      	movs	r3, #45	@ 0x2d
 80059f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f6:	e79e      	b.n	8005936 <_printf_float+0xa2>
 80059f8:	9a06      	ldr	r2, [sp, #24]
 80059fa:	2a47      	cmp	r2, #71	@ 0x47
 80059fc:	d1c2      	bne.n	8005984 <_printf_float+0xf0>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1c0      	bne.n	8005984 <_printf_float+0xf0>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e7bd      	b.n	8005982 <_printf_float+0xee>
 8005a06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a0a:	d9db      	bls.n	80059c4 <_printf_float+0x130>
 8005a0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a10:	d118      	bne.n	8005a44 <_printf_float+0x1b0>
 8005a12:	2900      	cmp	r1, #0
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	dd0b      	ble.n	8005a30 <_printf_float+0x19c>
 8005a18:	6121      	str	r1, [r4, #16]
 8005a1a:	b913      	cbnz	r3, 8005a22 <_printf_float+0x18e>
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	07d0      	lsls	r0, r2, #31
 8005a20:	d502      	bpl.n	8005a28 <_printf_float+0x194>
 8005a22:	3301      	adds	r3, #1
 8005a24:	440b      	add	r3, r1
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a2a:	f04f 0900 	mov.w	r9, #0
 8005a2e:	e7db      	b.n	80059e8 <_printf_float+0x154>
 8005a30:	b913      	cbnz	r3, 8005a38 <_printf_float+0x1a4>
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	07d2      	lsls	r2, r2, #31
 8005a36:	d501      	bpl.n	8005a3c <_printf_float+0x1a8>
 8005a38:	3302      	adds	r3, #2
 8005a3a:	e7f4      	b.n	8005a26 <_printf_float+0x192>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e7f2      	b.n	8005a26 <_printf_float+0x192>
 8005a40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a46:	4299      	cmp	r1, r3
 8005a48:	db05      	blt.n	8005a56 <_printf_float+0x1c2>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	6121      	str	r1, [r4, #16]
 8005a4e:	07d8      	lsls	r0, r3, #31
 8005a50:	d5ea      	bpl.n	8005a28 <_printf_float+0x194>
 8005a52:	1c4b      	adds	r3, r1, #1
 8005a54:	e7e7      	b.n	8005a26 <_printf_float+0x192>
 8005a56:	2900      	cmp	r1, #0
 8005a58:	bfd4      	ite	le
 8005a5a:	f1c1 0202 	rsble	r2, r1, #2
 8005a5e:	2201      	movgt	r2, #1
 8005a60:	4413      	add	r3, r2
 8005a62:	e7e0      	b.n	8005a26 <_printf_float+0x192>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	055a      	lsls	r2, r3, #21
 8005a68:	d407      	bmi.n	8005a7a <_printf_float+0x1e6>
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b8      	blx	r7
 8005a74:	3001      	adds	r0, #1
 8005a76:	d12b      	bne.n	8005ad0 <_printf_float+0x23c>
 8005a78:	e767      	b.n	800594a <_printf_float+0xb6>
 8005a7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a7e:	f240 80dd 	bls.w	8005c3c <_printf_float+0x3a8>
 8005a82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a86:	2200      	movs	r2, #0
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f7fb f81d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d033      	beq.n	8005afa <_printf_float+0x266>
 8005a92:	4a37      	ldr	r2, [pc, #220]	@ (8005b70 <_printf_float+0x2dc>)
 8005a94:	2301      	movs	r3, #1
 8005a96:	4631      	mov	r1, r6
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f43f af54 	beq.w	800594a <_printf_float+0xb6>
 8005aa2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005aa6:	4543      	cmp	r3, r8
 8005aa8:	db02      	blt.n	8005ab0 <_printf_float+0x21c>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	07d8      	lsls	r0, r3, #31
 8005aae:	d50f      	bpl.n	8005ad0 <_printf_float+0x23c>
 8005ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	f43f af45 	beq.w	800594a <_printf_float+0xb6>
 8005ac0:	f04f 0900 	mov.w	r9, #0
 8005ac4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ac8:	f104 0a1a 	add.w	sl, r4, #26
 8005acc:	45c8      	cmp	r8, r9
 8005ace:	dc09      	bgt.n	8005ae4 <_printf_float+0x250>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	079b      	lsls	r3, r3, #30
 8005ad4:	f100 8103 	bmi.w	8005cde <_printf_float+0x44a>
 8005ad8:	68e0      	ldr	r0, [r4, #12]
 8005ada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005adc:	4298      	cmp	r0, r3
 8005ade:	bfb8      	it	lt
 8005ae0:	4618      	movlt	r0, r3
 8005ae2:	e734      	b.n	800594e <_printf_float+0xba>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4652      	mov	r2, sl
 8005ae8:	4631      	mov	r1, r6
 8005aea:	4628      	mov	r0, r5
 8005aec:	47b8      	blx	r7
 8005aee:	3001      	adds	r0, #1
 8005af0:	f43f af2b 	beq.w	800594a <_printf_float+0xb6>
 8005af4:	f109 0901 	add.w	r9, r9, #1
 8005af8:	e7e8      	b.n	8005acc <_printf_float+0x238>
 8005afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	dc39      	bgt.n	8005b74 <_printf_float+0x2e0>
 8005b00:	4a1b      	ldr	r2, [pc, #108]	@ (8005b70 <_printf_float+0x2dc>)
 8005b02:	2301      	movs	r3, #1
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f af1d 	beq.w	800594a <_printf_float+0xb6>
 8005b10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b14:	ea59 0303 	orrs.w	r3, r9, r3
 8005b18:	d102      	bne.n	8005b20 <_printf_float+0x28c>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	07d9      	lsls	r1, r3, #31
 8005b1e:	d5d7      	bpl.n	8005ad0 <_printf_float+0x23c>
 8005b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	f43f af0d 	beq.w	800594a <_printf_float+0xb6>
 8005b30:	f04f 0a00 	mov.w	sl, #0
 8005b34:	f104 0b1a 	add.w	fp, r4, #26
 8005b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3a:	425b      	negs	r3, r3
 8005b3c:	4553      	cmp	r3, sl
 8005b3e:	dc01      	bgt.n	8005b44 <_printf_float+0x2b0>
 8005b40:	464b      	mov	r3, r9
 8005b42:	e793      	b.n	8005a6c <_printf_float+0x1d8>
 8005b44:	2301      	movs	r3, #1
 8005b46:	465a      	mov	r2, fp
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b8      	blx	r7
 8005b4e:	3001      	adds	r0, #1
 8005b50:	f43f aefb 	beq.w	800594a <_printf_float+0xb6>
 8005b54:	f10a 0a01 	add.w	sl, sl, #1
 8005b58:	e7ee      	b.n	8005b38 <_printf_float+0x2a4>
 8005b5a:	bf00      	nop
 8005b5c:	7fefffff 	.word	0x7fefffff
 8005b60:	08008494 	.word	0x08008494
 8005b64:	08008498 	.word	0x08008498
 8005b68:	0800849c 	.word	0x0800849c
 8005b6c:	080084a0 	.word	0x080084a0
 8005b70:	080084a4 	.word	0x080084a4
 8005b74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b7a:	4553      	cmp	r3, sl
 8005b7c:	bfa8      	it	ge
 8005b7e:	4653      	movge	r3, sl
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	4699      	mov	r9, r3
 8005b84:	dc36      	bgt.n	8005bf4 <_printf_float+0x360>
 8005b86:	f04f 0b00 	mov.w	fp, #0
 8005b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b8e:	f104 021a 	add.w	r2, r4, #26
 8005b92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b94:	9306      	str	r3, [sp, #24]
 8005b96:	eba3 0309 	sub.w	r3, r3, r9
 8005b9a:	455b      	cmp	r3, fp
 8005b9c:	dc31      	bgt.n	8005c02 <_printf_float+0x36e>
 8005b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba0:	459a      	cmp	sl, r3
 8005ba2:	dc3a      	bgt.n	8005c1a <_printf_float+0x386>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	07da      	lsls	r2, r3, #31
 8005ba8:	d437      	bmi.n	8005c1a <_printf_float+0x386>
 8005baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bac:	ebaa 0903 	sub.w	r9, sl, r3
 8005bb0:	9b06      	ldr	r3, [sp, #24]
 8005bb2:	ebaa 0303 	sub.w	r3, sl, r3
 8005bb6:	4599      	cmp	r9, r3
 8005bb8:	bfa8      	it	ge
 8005bba:	4699      	movge	r9, r3
 8005bbc:	f1b9 0f00 	cmp.w	r9, #0
 8005bc0:	dc33      	bgt.n	8005c2a <_printf_float+0x396>
 8005bc2:	f04f 0800 	mov.w	r8, #0
 8005bc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bca:	f104 0b1a 	add.w	fp, r4, #26
 8005bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd0:	ebaa 0303 	sub.w	r3, sl, r3
 8005bd4:	eba3 0309 	sub.w	r3, r3, r9
 8005bd8:	4543      	cmp	r3, r8
 8005bda:	f77f af79 	ble.w	8005ad0 <_printf_float+0x23c>
 8005bde:	2301      	movs	r3, #1
 8005be0:	465a      	mov	r2, fp
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	f43f aeae 	beq.w	800594a <_printf_float+0xb6>
 8005bee:	f108 0801 	add.w	r8, r8, #1
 8005bf2:	e7ec      	b.n	8005bce <_printf_float+0x33a>
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d1c2      	bne.n	8005b86 <_printf_float+0x2f2>
 8005c00:	e6a3      	b.n	800594a <_printf_float+0xb6>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4631      	mov	r1, r6
 8005c06:	4628      	mov	r0, r5
 8005c08:	9206      	str	r2, [sp, #24]
 8005c0a:	47b8      	blx	r7
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	f43f ae9c 	beq.w	800594a <_printf_float+0xb6>
 8005c12:	9a06      	ldr	r2, [sp, #24]
 8005c14:	f10b 0b01 	add.w	fp, fp, #1
 8005c18:	e7bb      	b.n	8005b92 <_printf_float+0x2fe>
 8005c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	d1c0      	bne.n	8005baa <_printf_float+0x316>
 8005c28:	e68f      	b.n	800594a <_printf_float+0xb6>
 8005c2a:	9a06      	ldr	r2, [sp, #24]
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	4442      	add	r2, r8
 8005c30:	4631      	mov	r1, r6
 8005c32:	4628      	mov	r0, r5
 8005c34:	47b8      	blx	r7
 8005c36:	3001      	adds	r0, #1
 8005c38:	d1c3      	bne.n	8005bc2 <_printf_float+0x32e>
 8005c3a:	e686      	b.n	800594a <_printf_float+0xb6>
 8005c3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c40:	f1ba 0f01 	cmp.w	sl, #1
 8005c44:	dc01      	bgt.n	8005c4a <_printf_float+0x3b6>
 8005c46:	07db      	lsls	r3, r3, #31
 8005c48:	d536      	bpl.n	8005cb8 <_printf_float+0x424>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	4631      	mov	r1, r6
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b8      	blx	r7
 8005c54:	3001      	adds	r0, #1
 8005c56:	f43f ae78 	beq.w	800594a <_printf_float+0xb6>
 8005c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	f43f ae70 	beq.w	800594a <_printf_float+0xb6>
 8005c6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2300      	movs	r3, #0
 8005c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c76:	f7fa ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c7a:	b9c0      	cbnz	r0, 8005cae <_printf_float+0x41a>
 8005c7c:	4653      	mov	r3, sl
 8005c7e:	f108 0201 	add.w	r2, r8, #1
 8005c82:	4631      	mov	r1, r6
 8005c84:	4628      	mov	r0, r5
 8005c86:	47b8      	blx	r7
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d10c      	bne.n	8005ca6 <_printf_float+0x412>
 8005c8c:	e65d      	b.n	800594a <_printf_float+0xb6>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	465a      	mov	r2, fp
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b8      	blx	r7
 8005c98:	3001      	adds	r0, #1
 8005c9a:	f43f ae56 	beq.w	800594a <_printf_float+0xb6>
 8005c9e:	f108 0801 	add.w	r8, r8, #1
 8005ca2:	45d0      	cmp	r8, sl
 8005ca4:	dbf3      	blt.n	8005c8e <_printf_float+0x3fa>
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005cac:	e6df      	b.n	8005a6e <_printf_float+0x1da>
 8005cae:	f04f 0800 	mov.w	r8, #0
 8005cb2:	f104 0b1a 	add.w	fp, r4, #26
 8005cb6:	e7f4      	b.n	8005ca2 <_printf_float+0x40e>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	4642      	mov	r2, r8
 8005cbc:	e7e1      	b.n	8005c82 <_printf_float+0x3ee>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	464a      	mov	r2, r9
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f43f ae3e 	beq.w	800594a <_printf_float+0xb6>
 8005cce:	f108 0801 	add.w	r8, r8, #1
 8005cd2:	68e3      	ldr	r3, [r4, #12]
 8005cd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cd6:	1a5b      	subs	r3, r3, r1
 8005cd8:	4543      	cmp	r3, r8
 8005cda:	dcf0      	bgt.n	8005cbe <_printf_float+0x42a>
 8005cdc:	e6fc      	b.n	8005ad8 <_printf_float+0x244>
 8005cde:	f04f 0800 	mov.w	r8, #0
 8005ce2:	f104 0919 	add.w	r9, r4, #25
 8005ce6:	e7f4      	b.n	8005cd2 <_printf_float+0x43e>

08005ce8 <_printf_common>:
 8005ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cec:	4616      	mov	r6, r2
 8005cee:	4698      	mov	r8, r3
 8005cf0:	688a      	ldr	r2, [r1, #8]
 8005cf2:	690b      	ldr	r3, [r1, #16]
 8005cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	bfb8      	it	lt
 8005cfc:	4613      	movlt	r3, r2
 8005cfe:	6033      	str	r3, [r6, #0]
 8005d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d04:	4607      	mov	r7, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	b10a      	cbz	r2, 8005d0e <_printf_common+0x26>
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	6033      	str	r3, [r6, #0]
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	0699      	lsls	r1, r3, #26
 8005d12:	bf42      	ittt	mi
 8005d14:	6833      	ldrmi	r3, [r6, #0]
 8005d16:	3302      	addmi	r3, #2
 8005d18:	6033      	strmi	r3, [r6, #0]
 8005d1a:	6825      	ldr	r5, [r4, #0]
 8005d1c:	f015 0506 	ands.w	r5, r5, #6
 8005d20:	d106      	bne.n	8005d30 <_printf_common+0x48>
 8005d22:	f104 0a19 	add.w	sl, r4, #25
 8005d26:	68e3      	ldr	r3, [r4, #12]
 8005d28:	6832      	ldr	r2, [r6, #0]
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	42ab      	cmp	r3, r5
 8005d2e:	dc26      	bgt.n	8005d7e <_printf_common+0x96>
 8005d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d34:	6822      	ldr	r2, [r4, #0]
 8005d36:	3b00      	subs	r3, #0
 8005d38:	bf18      	it	ne
 8005d3a:	2301      	movne	r3, #1
 8005d3c:	0692      	lsls	r2, r2, #26
 8005d3e:	d42b      	bmi.n	8005d98 <_printf_common+0xb0>
 8005d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d44:	4641      	mov	r1, r8
 8005d46:	4638      	mov	r0, r7
 8005d48:	47c8      	blx	r9
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d01e      	beq.n	8005d8c <_printf_common+0xa4>
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	6922      	ldr	r2, [r4, #16]
 8005d52:	f003 0306 	and.w	r3, r3, #6
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	bf02      	ittt	eq
 8005d5a:	68e5      	ldreq	r5, [r4, #12]
 8005d5c:	6833      	ldreq	r3, [r6, #0]
 8005d5e:	1aed      	subeq	r5, r5, r3
 8005d60:	68a3      	ldr	r3, [r4, #8]
 8005d62:	bf0c      	ite	eq
 8005d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d68:	2500      	movne	r5, #0
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	bfc4      	itt	gt
 8005d6e:	1a9b      	subgt	r3, r3, r2
 8005d70:	18ed      	addgt	r5, r5, r3
 8005d72:	2600      	movs	r6, #0
 8005d74:	341a      	adds	r4, #26
 8005d76:	42b5      	cmp	r5, r6
 8005d78:	d11a      	bne.n	8005db0 <_printf_common+0xc8>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	e008      	b.n	8005d90 <_printf_common+0xa8>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4652      	mov	r2, sl
 8005d82:	4641      	mov	r1, r8
 8005d84:	4638      	mov	r0, r7
 8005d86:	47c8      	blx	r9
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d103      	bne.n	8005d94 <_printf_common+0xac>
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d94:	3501      	adds	r5, #1
 8005d96:	e7c6      	b.n	8005d26 <_printf_common+0x3e>
 8005d98:	18e1      	adds	r1, r4, r3
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	2030      	movs	r0, #48	@ 0x30
 8005d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005da2:	4422      	add	r2, r4
 8005da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dac:	3302      	adds	r3, #2
 8005dae:	e7c7      	b.n	8005d40 <_printf_common+0x58>
 8005db0:	2301      	movs	r3, #1
 8005db2:	4622      	mov	r2, r4
 8005db4:	4641      	mov	r1, r8
 8005db6:	4638      	mov	r0, r7
 8005db8:	47c8      	blx	r9
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d0e6      	beq.n	8005d8c <_printf_common+0xa4>
 8005dbe:	3601      	adds	r6, #1
 8005dc0:	e7d9      	b.n	8005d76 <_printf_common+0x8e>
	...

08005dc4 <_printf_i>:
 8005dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	7e0f      	ldrb	r7, [r1, #24]
 8005dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dcc:	2f78      	cmp	r7, #120	@ 0x78
 8005dce:	4691      	mov	r9, r2
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	469a      	mov	sl, r3
 8005dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dda:	d807      	bhi.n	8005dec <_printf_i+0x28>
 8005ddc:	2f62      	cmp	r7, #98	@ 0x62
 8005dde:	d80a      	bhi.n	8005df6 <_printf_i+0x32>
 8005de0:	2f00      	cmp	r7, #0
 8005de2:	f000 80d2 	beq.w	8005f8a <_printf_i+0x1c6>
 8005de6:	2f58      	cmp	r7, #88	@ 0x58
 8005de8:	f000 80b9 	beq.w	8005f5e <_printf_i+0x19a>
 8005dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005df4:	e03a      	b.n	8005e6c <_printf_i+0xa8>
 8005df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dfa:	2b15      	cmp	r3, #21
 8005dfc:	d8f6      	bhi.n	8005dec <_printf_i+0x28>
 8005dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8005e04 <_printf_i+0x40>)
 8005e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e04:	08005e5d 	.word	0x08005e5d
 8005e08:	08005e71 	.word	0x08005e71
 8005e0c:	08005ded 	.word	0x08005ded
 8005e10:	08005ded 	.word	0x08005ded
 8005e14:	08005ded 	.word	0x08005ded
 8005e18:	08005ded 	.word	0x08005ded
 8005e1c:	08005e71 	.word	0x08005e71
 8005e20:	08005ded 	.word	0x08005ded
 8005e24:	08005ded 	.word	0x08005ded
 8005e28:	08005ded 	.word	0x08005ded
 8005e2c:	08005ded 	.word	0x08005ded
 8005e30:	08005f71 	.word	0x08005f71
 8005e34:	08005e9b 	.word	0x08005e9b
 8005e38:	08005f2b 	.word	0x08005f2b
 8005e3c:	08005ded 	.word	0x08005ded
 8005e40:	08005ded 	.word	0x08005ded
 8005e44:	08005f93 	.word	0x08005f93
 8005e48:	08005ded 	.word	0x08005ded
 8005e4c:	08005e9b 	.word	0x08005e9b
 8005e50:	08005ded 	.word	0x08005ded
 8005e54:	08005ded 	.word	0x08005ded
 8005e58:	08005f33 	.word	0x08005f33
 8005e5c:	6833      	ldr	r3, [r6, #0]
 8005e5e:	1d1a      	adds	r2, r3, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6032      	str	r2, [r6, #0]
 8005e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e09d      	b.n	8005fac <_printf_i+0x1e8>
 8005e70:	6833      	ldr	r3, [r6, #0]
 8005e72:	6820      	ldr	r0, [r4, #0]
 8005e74:	1d19      	adds	r1, r3, #4
 8005e76:	6031      	str	r1, [r6, #0]
 8005e78:	0606      	lsls	r6, r0, #24
 8005e7a:	d501      	bpl.n	8005e80 <_printf_i+0xbc>
 8005e7c:	681d      	ldr	r5, [r3, #0]
 8005e7e:	e003      	b.n	8005e88 <_printf_i+0xc4>
 8005e80:	0645      	lsls	r5, r0, #25
 8005e82:	d5fb      	bpl.n	8005e7c <_printf_i+0xb8>
 8005e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	da03      	bge.n	8005e94 <_printf_i+0xd0>
 8005e8c:	232d      	movs	r3, #45	@ 0x2d
 8005e8e:	426d      	negs	r5, r5
 8005e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e94:	4859      	ldr	r0, [pc, #356]	@ (8005ffc <_printf_i+0x238>)
 8005e96:	230a      	movs	r3, #10
 8005e98:	e011      	b.n	8005ebe <_printf_i+0xfa>
 8005e9a:	6821      	ldr	r1, [r4, #0]
 8005e9c:	6833      	ldr	r3, [r6, #0]
 8005e9e:	0608      	lsls	r0, r1, #24
 8005ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ea4:	d402      	bmi.n	8005eac <_printf_i+0xe8>
 8005ea6:	0649      	lsls	r1, r1, #25
 8005ea8:	bf48      	it	mi
 8005eaa:	b2ad      	uxthmi	r5, r5
 8005eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eae:	4853      	ldr	r0, [pc, #332]	@ (8005ffc <_printf_i+0x238>)
 8005eb0:	6033      	str	r3, [r6, #0]
 8005eb2:	bf14      	ite	ne
 8005eb4:	230a      	movne	r3, #10
 8005eb6:	2308      	moveq	r3, #8
 8005eb8:	2100      	movs	r1, #0
 8005eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ebe:	6866      	ldr	r6, [r4, #4]
 8005ec0:	60a6      	str	r6, [r4, #8]
 8005ec2:	2e00      	cmp	r6, #0
 8005ec4:	bfa2      	ittt	ge
 8005ec6:	6821      	ldrge	r1, [r4, #0]
 8005ec8:	f021 0104 	bicge.w	r1, r1, #4
 8005ecc:	6021      	strge	r1, [r4, #0]
 8005ece:	b90d      	cbnz	r5, 8005ed4 <_printf_i+0x110>
 8005ed0:	2e00      	cmp	r6, #0
 8005ed2:	d04b      	beq.n	8005f6c <_printf_i+0x1a8>
 8005ed4:	4616      	mov	r6, r2
 8005ed6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eda:	fb03 5711 	mls	r7, r3, r1, r5
 8005ede:	5dc7      	ldrb	r7, [r0, r7]
 8005ee0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ee4:	462f      	mov	r7, r5
 8005ee6:	42bb      	cmp	r3, r7
 8005ee8:	460d      	mov	r5, r1
 8005eea:	d9f4      	bls.n	8005ed6 <_printf_i+0x112>
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d10b      	bne.n	8005f08 <_printf_i+0x144>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	07df      	lsls	r7, r3, #31
 8005ef4:	d508      	bpl.n	8005f08 <_printf_i+0x144>
 8005ef6:	6923      	ldr	r3, [r4, #16]
 8005ef8:	6861      	ldr	r1, [r4, #4]
 8005efa:	4299      	cmp	r1, r3
 8005efc:	bfde      	ittt	le
 8005efe:	2330      	movle	r3, #48	@ 0x30
 8005f00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f08:	1b92      	subs	r2, r2, r6
 8005f0a:	6122      	str	r2, [r4, #16]
 8005f0c:	f8cd a000 	str.w	sl, [sp]
 8005f10:	464b      	mov	r3, r9
 8005f12:	aa03      	add	r2, sp, #12
 8005f14:	4621      	mov	r1, r4
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7ff fee6 	bl	8005ce8 <_printf_common>
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d14a      	bne.n	8005fb6 <_printf_i+0x1f2>
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	b004      	add	sp, #16
 8005f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	f043 0320 	orr.w	r3, r3, #32
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	4833      	ldr	r0, [pc, #204]	@ (8006000 <_printf_i+0x23c>)
 8005f34:	2778      	movs	r7, #120	@ 0x78
 8005f36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	6831      	ldr	r1, [r6, #0]
 8005f3e:	061f      	lsls	r7, r3, #24
 8005f40:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f44:	d402      	bmi.n	8005f4c <_printf_i+0x188>
 8005f46:	065f      	lsls	r7, r3, #25
 8005f48:	bf48      	it	mi
 8005f4a:	b2ad      	uxthmi	r5, r5
 8005f4c:	6031      	str	r1, [r6, #0]
 8005f4e:	07d9      	lsls	r1, r3, #31
 8005f50:	bf44      	itt	mi
 8005f52:	f043 0320 	orrmi.w	r3, r3, #32
 8005f56:	6023      	strmi	r3, [r4, #0]
 8005f58:	b11d      	cbz	r5, 8005f62 <_printf_i+0x19e>
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	e7ac      	b.n	8005eb8 <_printf_i+0xf4>
 8005f5e:	4827      	ldr	r0, [pc, #156]	@ (8005ffc <_printf_i+0x238>)
 8005f60:	e7e9      	b.n	8005f36 <_printf_i+0x172>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	f023 0320 	bic.w	r3, r3, #32
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	e7f6      	b.n	8005f5a <_printf_i+0x196>
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	e7bd      	b.n	8005eec <_printf_i+0x128>
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	6825      	ldr	r5, [r4, #0]
 8005f74:	6961      	ldr	r1, [r4, #20]
 8005f76:	1d18      	adds	r0, r3, #4
 8005f78:	6030      	str	r0, [r6, #0]
 8005f7a:	062e      	lsls	r6, r5, #24
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	d501      	bpl.n	8005f84 <_printf_i+0x1c0>
 8005f80:	6019      	str	r1, [r3, #0]
 8005f82:	e002      	b.n	8005f8a <_printf_i+0x1c6>
 8005f84:	0668      	lsls	r0, r5, #25
 8005f86:	d5fb      	bpl.n	8005f80 <_printf_i+0x1bc>
 8005f88:	8019      	strh	r1, [r3, #0]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	4616      	mov	r6, r2
 8005f90:	e7bc      	b.n	8005f0c <_printf_i+0x148>
 8005f92:	6833      	ldr	r3, [r6, #0]
 8005f94:	1d1a      	adds	r2, r3, #4
 8005f96:	6032      	str	r2, [r6, #0]
 8005f98:	681e      	ldr	r6, [r3, #0]
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f7fa f916 	bl	80001d0 <memchr>
 8005fa4:	b108      	cbz	r0, 8005faa <_printf_i+0x1e6>
 8005fa6:	1b80      	subs	r0, r0, r6
 8005fa8:	6060      	str	r0, [r4, #4]
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	6123      	str	r3, [r4, #16]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb4:	e7aa      	b.n	8005f0c <_printf_i+0x148>
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	4632      	mov	r2, r6
 8005fba:	4649      	mov	r1, r9
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	47d0      	blx	sl
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d0ad      	beq.n	8005f20 <_printf_i+0x15c>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	079b      	lsls	r3, r3, #30
 8005fc8:	d413      	bmi.n	8005ff2 <_printf_i+0x22e>
 8005fca:	68e0      	ldr	r0, [r4, #12]
 8005fcc:	9b03      	ldr	r3, [sp, #12]
 8005fce:	4298      	cmp	r0, r3
 8005fd0:	bfb8      	it	lt
 8005fd2:	4618      	movlt	r0, r3
 8005fd4:	e7a6      	b.n	8005f24 <_printf_i+0x160>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4632      	mov	r2, r6
 8005fda:	4649      	mov	r1, r9
 8005fdc:	4640      	mov	r0, r8
 8005fde:	47d0      	blx	sl
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d09d      	beq.n	8005f20 <_printf_i+0x15c>
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	68e3      	ldr	r3, [r4, #12]
 8005fe8:	9903      	ldr	r1, [sp, #12]
 8005fea:	1a5b      	subs	r3, r3, r1
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	dcf2      	bgt.n	8005fd6 <_printf_i+0x212>
 8005ff0:	e7eb      	b.n	8005fca <_printf_i+0x206>
 8005ff2:	2500      	movs	r5, #0
 8005ff4:	f104 0619 	add.w	r6, r4, #25
 8005ff8:	e7f5      	b.n	8005fe6 <_printf_i+0x222>
 8005ffa:	bf00      	nop
 8005ffc:	080084a6 	.word	0x080084a6
 8006000:	080084b7 	.word	0x080084b7

08006004 <std>:
 8006004:	2300      	movs	r3, #0
 8006006:	b510      	push	{r4, lr}
 8006008:	4604      	mov	r4, r0
 800600a:	e9c0 3300 	strd	r3, r3, [r0]
 800600e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006012:	6083      	str	r3, [r0, #8]
 8006014:	8181      	strh	r1, [r0, #12]
 8006016:	6643      	str	r3, [r0, #100]	@ 0x64
 8006018:	81c2      	strh	r2, [r0, #14]
 800601a:	6183      	str	r3, [r0, #24]
 800601c:	4619      	mov	r1, r3
 800601e:	2208      	movs	r2, #8
 8006020:	305c      	adds	r0, #92	@ 0x5c
 8006022:	f000 f928 	bl	8006276 <memset>
 8006026:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <std+0x58>)
 8006028:	6263      	str	r3, [r4, #36]	@ 0x24
 800602a:	4b0d      	ldr	r3, [pc, #52]	@ (8006060 <std+0x5c>)
 800602c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800602e:	4b0d      	ldr	r3, [pc, #52]	@ (8006064 <std+0x60>)
 8006030:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006032:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <std+0x64>)
 8006034:	6323      	str	r3, [r4, #48]	@ 0x30
 8006036:	4b0d      	ldr	r3, [pc, #52]	@ (800606c <std+0x68>)
 8006038:	6224      	str	r4, [r4, #32]
 800603a:	429c      	cmp	r4, r3
 800603c:	d006      	beq.n	800604c <std+0x48>
 800603e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006042:	4294      	cmp	r4, r2
 8006044:	d002      	beq.n	800604c <std+0x48>
 8006046:	33d0      	adds	r3, #208	@ 0xd0
 8006048:	429c      	cmp	r4, r3
 800604a:	d105      	bne.n	8006058 <std+0x54>
 800604c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006054:	f000 b98c 	b.w	8006370 <__retarget_lock_init_recursive>
 8006058:	bd10      	pop	{r4, pc}
 800605a:	bf00      	nop
 800605c:	080061f1 	.word	0x080061f1
 8006060:	08006213 	.word	0x08006213
 8006064:	0800624b 	.word	0x0800624b
 8006068:	0800626f 	.word	0x0800626f
 800606c:	2000037c 	.word	0x2000037c

08006070 <stdio_exit_handler>:
 8006070:	4a02      	ldr	r2, [pc, #8]	@ (800607c <stdio_exit_handler+0xc>)
 8006072:	4903      	ldr	r1, [pc, #12]	@ (8006080 <stdio_exit_handler+0x10>)
 8006074:	4803      	ldr	r0, [pc, #12]	@ (8006084 <stdio_exit_handler+0x14>)
 8006076:	f000 b869 	b.w	800614c <_fwalk_sglue>
 800607a:	bf00      	nop
 800607c:	2000000c 	.word	0x2000000c
 8006080:	08007ccd 	.word	0x08007ccd
 8006084:	2000001c 	.word	0x2000001c

08006088 <cleanup_stdio>:
 8006088:	6841      	ldr	r1, [r0, #4]
 800608a:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <cleanup_stdio+0x34>)
 800608c:	4299      	cmp	r1, r3
 800608e:	b510      	push	{r4, lr}
 8006090:	4604      	mov	r4, r0
 8006092:	d001      	beq.n	8006098 <cleanup_stdio+0x10>
 8006094:	f001 fe1a 	bl	8007ccc <_fflush_r>
 8006098:	68a1      	ldr	r1, [r4, #8]
 800609a:	4b09      	ldr	r3, [pc, #36]	@ (80060c0 <cleanup_stdio+0x38>)
 800609c:	4299      	cmp	r1, r3
 800609e:	d002      	beq.n	80060a6 <cleanup_stdio+0x1e>
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 fe13 	bl	8007ccc <_fflush_r>
 80060a6:	68e1      	ldr	r1, [r4, #12]
 80060a8:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <cleanup_stdio+0x3c>)
 80060aa:	4299      	cmp	r1, r3
 80060ac:	d004      	beq.n	80060b8 <cleanup_stdio+0x30>
 80060ae:	4620      	mov	r0, r4
 80060b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b4:	f001 be0a 	b.w	8007ccc <_fflush_r>
 80060b8:	bd10      	pop	{r4, pc}
 80060ba:	bf00      	nop
 80060bc:	2000037c 	.word	0x2000037c
 80060c0:	200003e4 	.word	0x200003e4
 80060c4:	2000044c 	.word	0x2000044c

080060c8 <global_stdio_init.part.0>:
 80060c8:	b510      	push	{r4, lr}
 80060ca:	4b0b      	ldr	r3, [pc, #44]	@ (80060f8 <global_stdio_init.part.0+0x30>)
 80060cc:	4c0b      	ldr	r4, [pc, #44]	@ (80060fc <global_stdio_init.part.0+0x34>)
 80060ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006100 <global_stdio_init.part.0+0x38>)
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	4620      	mov	r0, r4
 80060d4:	2200      	movs	r2, #0
 80060d6:	2104      	movs	r1, #4
 80060d8:	f7ff ff94 	bl	8006004 <std>
 80060dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060e0:	2201      	movs	r2, #1
 80060e2:	2109      	movs	r1, #9
 80060e4:	f7ff ff8e 	bl	8006004 <std>
 80060e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060ec:	2202      	movs	r2, #2
 80060ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f2:	2112      	movs	r1, #18
 80060f4:	f7ff bf86 	b.w	8006004 <std>
 80060f8:	200004b4 	.word	0x200004b4
 80060fc:	2000037c 	.word	0x2000037c
 8006100:	08006071 	.word	0x08006071

08006104 <__sfp_lock_acquire>:
 8006104:	4801      	ldr	r0, [pc, #4]	@ (800610c <__sfp_lock_acquire+0x8>)
 8006106:	f000 b934 	b.w	8006372 <__retarget_lock_acquire_recursive>
 800610a:	bf00      	nop
 800610c:	200004bd 	.word	0x200004bd

08006110 <__sfp_lock_release>:
 8006110:	4801      	ldr	r0, [pc, #4]	@ (8006118 <__sfp_lock_release+0x8>)
 8006112:	f000 b92f 	b.w	8006374 <__retarget_lock_release_recursive>
 8006116:	bf00      	nop
 8006118:	200004bd 	.word	0x200004bd

0800611c <__sinit>:
 800611c:	b510      	push	{r4, lr}
 800611e:	4604      	mov	r4, r0
 8006120:	f7ff fff0 	bl	8006104 <__sfp_lock_acquire>
 8006124:	6a23      	ldr	r3, [r4, #32]
 8006126:	b11b      	cbz	r3, 8006130 <__sinit+0x14>
 8006128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800612c:	f7ff bff0 	b.w	8006110 <__sfp_lock_release>
 8006130:	4b04      	ldr	r3, [pc, #16]	@ (8006144 <__sinit+0x28>)
 8006132:	6223      	str	r3, [r4, #32]
 8006134:	4b04      	ldr	r3, [pc, #16]	@ (8006148 <__sinit+0x2c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f5      	bne.n	8006128 <__sinit+0xc>
 800613c:	f7ff ffc4 	bl	80060c8 <global_stdio_init.part.0>
 8006140:	e7f2      	b.n	8006128 <__sinit+0xc>
 8006142:	bf00      	nop
 8006144:	08006089 	.word	0x08006089
 8006148:	200004b4 	.word	0x200004b4

0800614c <_fwalk_sglue>:
 800614c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006150:	4607      	mov	r7, r0
 8006152:	4688      	mov	r8, r1
 8006154:	4614      	mov	r4, r2
 8006156:	2600      	movs	r6, #0
 8006158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800615c:	f1b9 0901 	subs.w	r9, r9, #1
 8006160:	d505      	bpl.n	800616e <_fwalk_sglue+0x22>
 8006162:	6824      	ldr	r4, [r4, #0]
 8006164:	2c00      	cmp	r4, #0
 8006166:	d1f7      	bne.n	8006158 <_fwalk_sglue+0xc>
 8006168:	4630      	mov	r0, r6
 800616a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800616e:	89ab      	ldrh	r3, [r5, #12]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d907      	bls.n	8006184 <_fwalk_sglue+0x38>
 8006174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006178:	3301      	adds	r3, #1
 800617a:	d003      	beq.n	8006184 <_fwalk_sglue+0x38>
 800617c:	4629      	mov	r1, r5
 800617e:	4638      	mov	r0, r7
 8006180:	47c0      	blx	r8
 8006182:	4306      	orrs	r6, r0
 8006184:	3568      	adds	r5, #104	@ 0x68
 8006186:	e7e9      	b.n	800615c <_fwalk_sglue+0x10>

08006188 <sniprintf>:
 8006188:	b40c      	push	{r2, r3}
 800618a:	b530      	push	{r4, r5, lr}
 800618c:	4b17      	ldr	r3, [pc, #92]	@ (80061ec <sniprintf+0x64>)
 800618e:	1e0c      	subs	r4, r1, #0
 8006190:	681d      	ldr	r5, [r3, #0]
 8006192:	b09d      	sub	sp, #116	@ 0x74
 8006194:	da08      	bge.n	80061a8 <sniprintf+0x20>
 8006196:	238b      	movs	r3, #139	@ 0x8b
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	f04f 30ff 	mov.w	r0, #4294967295
 800619e:	b01d      	add	sp, #116	@ 0x74
 80061a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061a4:	b002      	add	sp, #8
 80061a6:	4770      	bx	lr
 80061a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80061ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061b0:	bf14      	ite	ne
 80061b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061b6:	4623      	moveq	r3, r4
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	9307      	str	r3, [sp, #28]
 80061bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80061c0:	9002      	str	r0, [sp, #8]
 80061c2:	9006      	str	r0, [sp, #24]
 80061c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80061c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80061ca:	ab21      	add	r3, sp, #132	@ 0x84
 80061cc:	a902      	add	r1, sp, #8
 80061ce:	4628      	mov	r0, r5
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	f001 fbfb 	bl	80079cc <_svfiprintf_r>
 80061d6:	1c43      	adds	r3, r0, #1
 80061d8:	bfbc      	itt	lt
 80061da:	238b      	movlt	r3, #139	@ 0x8b
 80061dc:	602b      	strlt	r3, [r5, #0]
 80061de:	2c00      	cmp	r4, #0
 80061e0:	d0dd      	beq.n	800619e <sniprintf+0x16>
 80061e2:	9b02      	ldr	r3, [sp, #8]
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	e7d9      	b.n	800619e <sniprintf+0x16>
 80061ea:	bf00      	nop
 80061ec:	20000018 	.word	0x20000018

080061f0 <__sread>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	460c      	mov	r4, r1
 80061f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f8:	f000 f86c 	bl	80062d4 <_read_r>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	bfab      	itete	ge
 8006200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006202:	89a3      	ldrhlt	r3, [r4, #12]
 8006204:	181b      	addge	r3, r3, r0
 8006206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800620a:	bfac      	ite	ge
 800620c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800620e:	81a3      	strhlt	r3, [r4, #12]
 8006210:	bd10      	pop	{r4, pc}

08006212 <__swrite>:
 8006212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006216:	461f      	mov	r7, r3
 8006218:	898b      	ldrh	r3, [r1, #12]
 800621a:	05db      	lsls	r3, r3, #23
 800621c:	4605      	mov	r5, r0
 800621e:	460c      	mov	r4, r1
 8006220:	4616      	mov	r6, r2
 8006222:	d505      	bpl.n	8006230 <__swrite+0x1e>
 8006224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006228:	2302      	movs	r3, #2
 800622a:	2200      	movs	r2, #0
 800622c:	f000 f840 	bl	80062b0 <_lseek_r>
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	4628      	mov	r0, r5
 8006242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006246:	f000 b857 	b.w	80062f8 <_write_r>

0800624a <__sseek>:
 800624a:	b510      	push	{r4, lr}
 800624c:	460c      	mov	r4, r1
 800624e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006252:	f000 f82d 	bl	80062b0 <_lseek_r>
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	bf15      	itete	ne
 800625c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800625e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006266:	81a3      	strheq	r3, [r4, #12]
 8006268:	bf18      	it	ne
 800626a:	81a3      	strhne	r3, [r4, #12]
 800626c:	bd10      	pop	{r4, pc}

0800626e <__sclose>:
 800626e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006272:	f000 b80d 	b.w	8006290 <_close_r>

08006276 <memset>:
 8006276:	4402      	add	r2, r0
 8006278:	4603      	mov	r3, r0
 800627a:	4293      	cmp	r3, r2
 800627c:	d100      	bne.n	8006280 <memset+0xa>
 800627e:	4770      	bx	lr
 8006280:	f803 1b01 	strb.w	r1, [r3], #1
 8006284:	e7f9      	b.n	800627a <memset+0x4>
	...

08006288 <_localeconv_r>:
 8006288:	4800      	ldr	r0, [pc, #0]	@ (800628c <_localeconv_r+0x4>)
 800628a:	4770      	bx	lr
 800628c:	20000158 	.word	0x20000158

08006290 <_close_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4d06      	ldr	r5, [pc, #24]	@ (80062ac <_close_r+0x1c>)
 8006294:	2300      	movs	r3, #0
 8006296:	4604      	mov	r4, r0
 8006298:	4608      	mov	r0, r1
 800629a:	602b      	str	r3, [r5, #0]
 800629c:	f7fb fcd3 	bl	8001c46 <_close>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d102      	bne.n	80062aa <_close_r+0x1a>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	b103      	cbz	r3, 80062aa <_close_r+0x1a>
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	200004b8 	.word	0x200004b8

080062b0 <_lseek_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4d07      	ldr	r5, [pc, #28]	@ (80062d0 <_lseek_r+0x20>)
 80062b4:	4604      	mov	r4, r0
 80062b6:	4608      	mov	r0, r1
 80062b8:	4611      	mov	r1, r2
 80062ba:	2200      	movs	r2, #0
 80062bc:	602a      	str	r2, [r5, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	f7fb fce8 	bl	8001c94 <_lseek>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_lseek_r+0x1e>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_lseek_r+0x1e>
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	200004b8 	.word	0x200004b8

080062d4 <_read_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d07      	ldr	r5, [pc, #28]	@ (80062f4 <_read_r+0x20>)
 80062d8:	4604      	mov	r4, r0
 80062da:	4608      	mov	r0, r1
 80062dc:	4611      	mov	r1, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	602a      	str	r2, [r5, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f7fb fc76 	bl	8001bd4 <_read>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d102      	bne.n	80062f2 <_read_r+0x1e>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	b103      	cbz	r3, 80062f2 <_read_r+0x1e>
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	200004b8 	.word	0x200004b8

080062f8 <_write_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d07      	ldr	r5, [pc, #28]	@ (8006318 <_write_r+0x20>)
 80062fc:	4604      	mov	r4, r0
 80062fe:	4608      	mov	r0, r1
 8006300:	4611      	mov	r1, r2
 8006302:	2200      	movs	r2, #0
 8006304:	602a      	str	r2, [r5, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f7fb fc81 	bl	8001c0e <_write>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_write_r+0x1e>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_write_r+0x1e>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	200004b8 	.word	0x200004b8

0800631c <__errno>:
 800631c:	4b01      	ldr	r3, [pc, #4]	@ (8006324 <__errno+0x8>)
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20000018 	.word	0x20000018

08006328 <__libc_init_array>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4d0d      	ldr	r5, [pc, #52]	@ (8006360 <__libc_init_array+0x38>)
 800632c:	4c0d      	ldr	r4, [pc, #52]	@ (8006364 <__libc_init_array+0x3c>)
 800632e:	1b64      	subs	r4, r4, r5
 8006330:	10a4      	asrs	r4, r4, #2
 8006332:	2600      	movs	r6, #0
 8006334:	42a6      	cmp	r6, r4
 8006336:	d109      	bne.n	800634c <__libc_init_array+0x24>
 8006338:	4d0b      	ldr	r5, [pc, #44]	@ (8006368 <__libc_init_array+0x40>)
 800633a:	4c0c      	ldr	r4, [pc, #48]	@ (800636c <__libc_init_array+0x44>)
 800633c:	f002 f886 	bl	800844c <_init>
 8006340:	1b64      	subs	r4, r4, r5
 8006342:	10a4      	asrs	r4, r4, #2
 8006344:	2600      	movs	r6, #0
 8006346:	42a6      	cmp	r6, r4
 8006348:	d105      	bne.n	8006356 <__libc_init_array+0x2e>
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006350:	4798      	blx	r3
 8006352:	3601      	adds	r6, #1
 8006354:	e7ee      	b.n	8006334 <__libc_init_array+0xc>
 8006356:	f855 3b04 	ldr.w	r3, [r5], #4
 800635a:	4798      	blx	r3
 800635c:	3601      	adds	r6, #1
 800635e:	e7f2      	b.n	8006346 <__libc_init_array+0x1e>
 8006360:	08008810 	.word	0x08008810
 8006364:	08008810 	.word	0x08008810
 8006368:	08008810 	.word	0x08008810
 800636c:	08008814 	.word	0x08008814

08006370 <__retarget_lock_init_recursive>:
 8006370:	4770      	bx	lr

08006372 <__retarget_lock_acquire_recursive>:
 8006372:	4770      	bx	lr

08006374 <__retarget_lock_release_recursive>:
 8006374:	4770      	bx	lr

08006376 <quorem>:
 8006376:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637a:	6903      	ldr	r3, [r0, #16]
 800637c:	690c      	ldr	r4, [r1, #16]
 800637e:	42a3      	cmp	r3, r4
 8006380:	4607      	mov	r7, r0
 8006382:	db7e      	blt.n	8006482 <quorem+0x10c>
 8006384:	3c01      	subs	r4, #1
 8006386:	f101 0814 	add.w	r8, r1, #20
 800638a:	00a3      	lsls	r3, r4, #2
 800638c:	f100 0514 	add.w	r5, r0, #20
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800639c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063a0:	3301      	adds	r3, #1
 80063a2:	429a      	cmp	r2, r3
 80063a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80063ac:	d32e      	bcc.n	800640c <quorem+0x96>
 80063ae:	f04f 0a00 	mov.w	sl, #0
 80063b2:	46c4      	mov	ip, r8
 80063b4:	46ae      	mov	lr, r5
 80063b6:	46d3      	mov	fp, sl
 80063b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063bc:	b298      	uxth	r0, r3
 80063be:	fb06 a000 	mla	r0, r6, r0, sl
 80063c2:	0c02      	lsrs	r2, r0, #16
 80063c4:	0c1b      	lsrs	r3, r3, #16
 80063c6:	fb06 2303 	mla	r3, r6, r3, r2
 80063ca:	f8de 2000 	ldr.w	r2, [lr]
 80063ce:	b280      	uxth	r0, r0
 80063d0:	b292      	uxth	r2, r2
 80063d2:	1a12      	subs	r2, r2, r0
 80063d4:	445a      	add	r2, fp
 80063d6:	f8de 0000 	ldr.w	r0, [lr]
 80063da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063de:	b29b      	uxth	r3, r3
 80063e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063e8:	b292      	uxth	r2, r2
 80063ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063ee:	45e1      	cmp	r9, ip
 80063f0:	f84e 2b04 	str.w	r2, [lr], #4
 80063f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063f8:	d2de      	bcs.n	80063b8 <quorem+0x42>
 80063fa:	9b00      	ldr	r3, [sp, #0]
 80063fc:	58eb      	ldr	r3, [r5, r3]
 80063fe:	b92b      	cbnz	r3, 800640c <quorem+0x96>
 8006400:	9b01      	ldr	r3, [sp, #4]
 8006402:	3b04      	subs	r3, #4
 8006404:	429d      	cmp	r5, r3
 8006406:	461a      	mov	r2, r3
 8006408:	d32f      	bcc.n	800646a <quorem+0xf4>
 800640a:	613c      	str	r4, [r7, #16]
 800640c:	4638      	mov	r0, r7
 800640e:	f001 f979 	bl	8007704 <__mcmp>
 8006412:	2800      	cmp	r0, #0
 8006414:	db25      	blt.n	8006462 <quorem+0xec>
 8006416:	4629      	mov	r1, r5
 8006418:	2000      	movs	r0, #0
 800641a:	f858 2b04 	ldr.w	r2, [r8], #4
 800641e:	f8d1 c000 	ldr.w	ip, [r1]
 8006422:	fa1f fe82 	uxth.w	lr, r2
 8006426:	fa1f f38c 	uxth.w	r3, ip
 800642a:	eba3 030e 	sub.w	r3, r3, lr
 800642e:	4403      	add	r3, r0
 8006430:	0c12      	lsrs	r2, r2, #16
 8006432:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006436:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800643a:	b29b      	uxth	r3, r3
 800643c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006440:	45c1      	cmp	r9, r8
 8006442:	f841 3b04 	str.w	r3, [r1], #4
 8006446:	ea4f 4022 	mov.w	r0, r2, asr #16
 800644a:	d2e6      	bcs.n	800641a <quorem+0xa4>
 800644c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006450:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006454:	b922      	cbnz	r2, 8006460 <quorem+0xea>
 8006456:	3b04      	subs	r3, #4
 8006458:	429d      	cmp	r5, r3
 800645a:	461a      	mov	r2, r3
 800645c:	d30b      	bcc.n	8006476 <quorem+0x100>
 800645e:	613c      	str	r4, [r7, #16]
 8006460:	3601      	adds	r6, #1
 8006462:	4630      	mov	r0, r6
 8006464:	b003      	add	sp, #12
 8006466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646a:	6812      	ldr	r2, [r2, #0]
 800646c:	3b04      	subs	r3, #4
 800646e:	2a00      	cmp	r2, #0
 8006470:	d1cb      	bne.n	800640a <quorem+0x94>
 8006472:	3c01      	subs	r4, #1
 8006474:	e7c6      	b.n	8006404 <quorem+0x8e>
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	3b04      	subs	r3, #4
 800647a:	2a00      	cmp	r2, #0
 800647c:	d1ef      	bne.n	800645e <quorem+0xe8>
 800647e:	3c01      	subs	r4, #1
 8006480:	e7ea      	b.n	8006458 <quorem+0xe2>
 8006482:	2000      	movs	r0, #0
 8006484:	e7ee      	b.n	8006464 <quorem+0xee>
	...

08006488 <_dtoa_r>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	69c7      	ldr	r7, [r0, #28]
 800648e:	b099      	sub	sp, #100	@ 0x64
 8006490:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006494:	ec55 4b10 	vmov	r4, r5, d0
 8006498:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800649a:	9109      	str	r1, [sp, #36]	@ 0x24
 800649c:	4683      	mov	fp, r0
 800649e:	920e      	str	r2, [sp, #56]	@ 0x38
 80064a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80064a2:	b97f      	cbnz	r7, 80064c4 <_dtoa_r+0x3c>
 80064a4:	2010      	movs	r0, #16
 80064a6:	f000 fdfd 	bl	80070a4 <malloc>
 80064aa:	4602      	mov	r2, r0
 80064ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80064b0:	b920      	cbnz	r0, 80064bc <_dtoa_r+0x34>
 80064b2:	4ba7      	ldr	r3, [pc, #668]	@ (8006750 <_dtoa_r+0x2c8>)
 80064b4:	21ef      	movs	r1, #239	@ 0xef
 80064b6:	48a7      	ldr	r0, [pc, #668]	@ (8006754 <_dtoa_r+0x2cc>)
 80064b8:	f001 fc68 	bl	8007d8c <__assert_func>
 80064bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064c0:	6007      	str	r7, [r0, #0]
 80064c2:	60c7      	str	r7, [r0, #12]
 80064c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064c8:	6819      	ldr	r1, [r3, #0]
 80064ca:	b159      	cbz	r1, 80064e4 <_dtoa_r+0x5c>
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	604a      	str	r2, [r1, #4]
 80064d0:	2301      	movs	r3, #1
 80064d2:	4093      	lsls	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]
 80064d6:	4658      	mov	r0, fp
 80064d8:	f000 feda 	bl	8007290 <_Bfree>
 80064dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	1e2b      	subs	r3, r5, #0
 80064e6:	bfb9      	ittee	lt
 80064e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064ec:	9303      	strlt	r3, [sp, #12]
 80064ee:	2300      	movge	r3, #0
 80064f0:	6033      	strge	r3, [r6, #0]
 80064f2:	9f03      	ldr	r7, [sp, #12]
 80064f4:	4b98      	ldr	r3, [pc, #608]	@ (8006758 <_dtoa_r+0x2d0>)
 80064f6:	bfbc      	itt	lt
 80064f8:	2201      	movlt	r2, #1
 80064fa:	6032      	strlt	r2, [r6, #0]
 80064fc:	43bb      	bics	r3, r7
 80064fe:	d112      	bne.n	8006526 <_dtoa_r+0x9e>
 8006500:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006502:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800650c:	4323      	orrs	r3, r4
 800650e:	f000 854d 	beq.w	8006fac <_dtoa_r+0xb24>
 8006512:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006514:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800676c <_dtoa_r+0x2e4>
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 854f 	beq.w	8006fbc <_dtoa_r+0xb34>
 800651e:	f10a 0303 	add.w	r3, sl, #3
 8006522:	f000 bd49 	b.w	8006fb8 <_dtoa_r+0xb30>
 8006526:	ed9d 7b02 	vldr	d7, [sp, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	ec51 0b17 	vmov	r0, r1, d7
 8006530:	2300      	movs	r3, #0
 8006532:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006536:	f7fa fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 800653a:	4680      	mov	r8, r0
 800653c:	b158      	cbz	r0, 8006556 <_dtoa_r+0xce>
 800653e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006540:	2301      	movs	r3, #1
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006546:	b113      	cbz	r3, 800654e <_dtoa_r+0xc6>
 8006548:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800654a:	4b84      	ldr	r3, [pc, #528]	@ (800675c <_dtoa_r+0x2d4>)
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006770 <_dtoa_r+0x2e8>
 8006552:	f000 bd33 	b.w	8006fbc <_dtoa_r+0xb34>
 8006556:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800655a:	aa16      	add	r2, sp, #88	@ 0x58
 800655c:	a917      	add	r1, sp, #92	@ 0x5c
 800655e:	4658      	mov	r0, fp
 8006560:	f001 f980 	bl	8007864 <__d2b>
 8006564:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006568:	4681      	mov	r9, r0
 800656a:	2e00      	cmp	r6, #0
 800656c:	d077      	beq.n	800665e <_dtoa_r+0x1d6>
 800656e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006570:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800657c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006580:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006584:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006588:	4619      	mov	r1, r3
 800658a:	2200      	movs	r2, #0
 800658c:	4b74      	ldr	r3, [pc, #464]	@ (8006760 <_dtoa_r+0x2d8>)
 800658e:	f7f9 fe7b 	bl	8000288 <__aeabi_dsub>
 8006592:	a369      	add	r3, pc, #420	@ (adr r3, 8006738 <_dtoa_r+0x2b0>)
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f7fa f82e 	bl	80005f8 <__aeabi_dmul>
 800659c:	a368      	add	r3, pc, #416	@ (adr r3, 8006740 <_dtoa_r+0x2b8>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fe73 	bl	800028c <__adddf3>
 80065a6:	4604      	mov	r4, r0
 80065a8:	4630      	mov	r0, r6
 80065aa:	460d      	mov	r5, r1
 80065ac:	f7f9 ffba 	bl	8000524 <__aeabi_i2d>
 80065b0:	a365      	add	r3, pc, #404	@ (adr r3, 8006748 <_dtoa_r+0x2c0>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7fa f81f 	bl	80005f8 <__aeabi_dmul>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4620      	mov	r0, r4
 80065c0:	4629      	mov	r1, r5
 80065c2:	f7f9 fe63 	bl	800028c <__adddf3>
 80065c6:	4604      	mov	r4, r0
 80065c8:	460d      	mov	r5, r1
 80065ca:	f7fa fac5 	bl	8000b58 <__aeabi_d2iz>
 80065ce:	2200      	movs	r2, #0
 80065d0:	4607      	mov	r7, r0
 80065d2:	2300      	movs	r3, #0
 80065d4:	4620      	mov	r0, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	f7fa fa80 	bl	8000adc <__aeabi_dcmplt>
 80065dc:	b140      	cbz	r0, 80065f0 <_dtoa_r+0x168>
 80065de:	4638      	mov	r0, r7
 80065e0:	f7f9 ffa0 	bl	8000524 <__aeabi_i2d>
 80065e4:	4622      	mov	r2, r4
 80065e6:	462b      	mov	r3, r5
 80065e8:	f7fa fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ec:	b900      	cbnz	r0, 80065f0 <_dtoa_r+0x168>
 80065ee:	3f01      	subs	r7, #1
 80065f0:	2f16      	cmp	r7, #22
 80065f2:	d851      	bhi.n	8006698 <_dtoa_r+0x210>
 80065f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006764 <_dtoa_r+0x2dc>)
 80065f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006602:	f7fa fa6b 	bl	8000adc <__aeabi_dcmplt>
 8006606:	2800      	cmp	r0, #0
 8006608:	d048      	beq.n	800669c <_dtoa_r+0x214>
 800660a:	3f01      	subs	r7, #1
 800660c:	2300      	movs	r3, #0
 800660e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006610:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006612:	1b9b      	subs	r3, r3, r6
 8006614:	1e5a      	subs	r2, r3, #1
 8006616:	bf44      	itt	mi
 8006618:	f1c3 0801 	rsbmi	r8, r3, #1
 800661c:	2300      	movmi	r3, #0
 800661e:	9208      	str	r2, [sp, #32]
 8006620:	bf54      	ite	pl
 8006622:	f04f 0800 	movpl.w	r8, #0
 8006626:	9308      	strmi	r3, [sp, #32]
 8006628:	2f00      	cmp	r7, #0
 800662a:	db39      	blt.n	80066a0 <_dtoa_r+0x218>
 800662c:	9b08      	ldr	r3, [sp, #32]
 800662e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006630:	443b      	add	r3, r7
 8006632:	9308      	str	r3, [sp, #32]
 8006634:	2300      	movs	r3, #0
 8006636:	930a      	str	r3, [sp, #40]	@ 0x28
 8006638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800663a:	2b09      	cmp	r3, #9
 800663c:	d864      	bhi.n	8006708 <_dtoa_r+0x280>
 800663e:	2b05      	cmp	r3, #5
 8006640:	bfc4      	itt	gt
 8006642:	3b04      	subgt	r3, #4
 8006644:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006648:	f1a3 0302 	sub.w	r3, r3, #2
 800664c:	bfcc      	ite	gt
 800664e:	2400      	movgt	r4, #0
 8006650:	2401      	movle	r4, #1
 8006652:	2b03      	cmp	r3, #3
 8006654:	d863      	bhi.n	800671e <_dtoa_r+0x296>
 8006656:	e8df f003 	tbb	[pc, r3]
 800665a:	372a      	.short	0x372a
 800665c:	5535      	.short	0x5535
 800665e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006662:	441e      	add	r6, r3
 8006664:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006668:	2b20      	cmp	r3, #32
 800666a:	bfc1      	itttt	gt
 800666c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006670:	409f      	lslgt	r7, r3
 8006672:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006676:	fa24 f303 	lsrgt.w	r3, r4, r3
 800667a:	bfd6      	itet	le
 800667c:	f1c3 0320 	rsble	r3, r3, #32
 8006680:	ea47 0003 	orrgt.w	r0, r7, r3
 8006684:	fa04 f003 	lslle.w	r0, r4, r3
 8006688:	f7f9 ff3c 	bl	8000504 <__aeabi_ui2d>
 800668c:	2201      	movs	r2, #1
 800668e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006692:	3e01      	subs	r6, #1
 8006694:	9214      	str	r2, [sp, #80]	@ 0x50
 8006696:	e777      	b.n	8006588 <_dtoa_r+0x100>
 8006698:	2301      	movs	r3, #1
 800669a:	e7b8      	b.n	800660e <_dtoa_r+0x186>
 800669c:	9012      	str	r0, [sp, #72]	@ 0x48
 800669e:	e7b7      	b.n	8006610 <_dtoa_r+0x188>
 80066a0:	427b      	negs	r3, r7
 80066a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80066a4:	2300      	movs	r3, #0
 80066a6:	eba8 0807 	sub.w	r8, r8, r7
 80066aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066ac:	e7c4      	b.n	8006638 <_dtoa_r+0x1b0>
 80066ae:	2300      	movs	r3, #0
 80066b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	dc35      	bgt.n	8006724 <_dtoa_r+0x29c>
 80066b8:	2301      	movs	r3, #1
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	9307      	str	r3, [sp, #28]
 80066be:	461a      	mov	r2, r3
 80066c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80066c2:	e00b      	b.n	80066dc <_dtoa_r+0x254>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e7f3      	b.n	80066b0 <_dtoa_r+0x228>
 80066c8:	2300      	movs	r3, #0
 80066ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	3301      	adds	r3, #1
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	9307      	str	r3, [sp, #28]
 80066d8:	bfb8      	it	lt
 80066da:	2301      	movlt	r3, #1
 80066dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80066e0:	2100      	movs	r1, #0
 80066e2:	2204      	movs	r2, #4
 80066e4:	f102 0514 	add.w	r5, r2, #20
 80066e8:	429d      	cmp	r5, r3
 80066ea:	d91f      	bls.n	800672c <_dtoa_r+0x2a4>
 80066ec:	6041      	str	r1, [r0, #4]
 80066ee:	4658      	mov	r0, fp
 80066f0:	f000 fd8e 	bl	8007210 <_Balloc>
 80066f4:	4682      	mov	sl, r0
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d13c      	bne.n	8006774 <_dtoa_r+0x2ec>
 80066fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006768 <_dtoa_r+0x2e0>)
 80066fc:	4602      	mov	r2, r0
 80066fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8006702:	e6d8      	b.n	80064b6 <_dtoa_r+0x2e>
 8006704:	2301      	movs	r3, #1
 8006706:	e7e0      	b.n	80066ca <_dtoa_r+0x242>
 8006708:	2401      	movs	r4, #1
 800670a:	2300      	movs	r3, #0
 800670c:	9309      	str	r3, [sp, #36]	@ 0x24
 800670e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006710:	f04f 33ff 	mov.w	r3, #4294967295
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	9307      	str	r3, [sp, #28]
 8006718:	2200      	movs	r2, #0
 800671a:	2312      	movs	r3, #18
 800671c:	e7d0      	b.n	80066c0 <_dtoa_r+0x238>
 800671e:	2301      	movs	r3, #1
 8006720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006722:	e7f5      	b.n	8006710 <_dtoa_r+0x288>
 8006724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	9307      	str	r3, [sp, #28]
 800672a:	e7d7      	b.n	80066dc <_dtoa_r+0x254>
 800672c:	3101      	adds	r1, #1
 800672e:	0052      	lsls	r2, r2, #1
 8006730:	e7d8      	b.n	80066e4 <_dtoa_r+0x25c>
 8006732:	bf00      	nop
 8006734:	f3af 8000 	nop.w
 8006738:	636f4361 	.word	0x636f4361
 800673c:	3fd287a7 	.word	0x3fd287a7
 8006740:	8b60c8b3 	.word	0x8b60c8b3
 8006744:	3fc68a28 	.word	0x3fc68a28
 8006748:	509f79fb 	.word	0x509f79fb
 800674c:	3fd34413 	.word	0x3fd34413
 8006750:	080084d5 	.word	0x080084d5
 8006754:	080084ec 	.word	0x080084ec
 8006758:	7ff00000 	.word	0x7ff00000
 800675c:	080084a5 	.word	0x080084a5
 8006760:	3ff80000 	.word	0x3ff80000
 8006764:	080085e8 	.word	0x080085e8
 8006768:	08008544 	.word	0x08008544
 800676c:	080084d1 	.word	0x080084d1
 8006770:	080084a4 	.word	0x080084a4
 8006774:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006778:	6018      	str	r0, [r3, #0]
 800677a:	9b07      	ldr	r3, [sp, #28]
 800677c:	2b0e      	cmp	r3, #14
 800677e:	f200 80a4 	bhi.w	80068ca <_dtoa_r+0x442>
 8006782:	2c00      	cmp	r4, #0
 8006784:	f000 80a1 	beq.w	80068ca <_dtoa_r+0x442>
 8006788:	2f00      	cmp	r7, #0
 800678a:	dd33      	ble.n	80067f4 <_dtoa_r+0x36c>
 800678c:	4bad      	ldr	r3, [pc, #692]	@ (8006a44 <_dtoa_r+0x5bc>)
 800678e:	f007 020f 	and.w	r2, r7, #15
 8006792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006796:	ed93 7b00 	vldr	d7, [r3]
 800679a:	05f8      	lsls	r0, r7, #23
 800679c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80067a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067a4:	d516      	bpl.n	80067d4 <_dtoa_r+0x34c>
 80067a6:	4ba8      	ldr	r3, [pc, #672]	@ (8006a48 <_dtoa_r+0x5c0>)
 80067a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067b0:	f7fa f84c 	bl	800084c <__aeabi_ddiv>
 80067b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b8:	f004 040f 	and.w	r4, r4, #15
 80067bc:	2603      	movs	r6, #3
 80067be:	4da2      	ldr	r5, [pc, #648]	@ (8006a48 <_dtoa_r+0x5c0>)
 80067c0:	b954      	cbnz	r4, 80067d8 <_dtoa_r+0x350>
 80067c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ca:	f7fa f83f 	bl	800084c <__aeabi_ddiv>
 80067ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067d2:	e028      	b.n	8006826 <_dtoa_r+0x39e>
 80067d4:	2602      	movs	r6, #2
 80067d6:	e7f2      	b.n	80067be <_dtoa_r+0x336>
 80067d8:	07e1      	lsls	r1, r4, #31
 80067da:	d508      	bpl.n	80067ee <_dtoa_r+0x366>
 80067dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067e4:	f7f9 ff08 	bl	80005f8 <__aeabi_dmul>
 80067e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067ec:	3601      	adds	r6, #1
 80067ee:	1064      	asrs	r4, r4, #1
 80067f0:	3508      	adds	r5, #8
 80067f2:	e7e5      	b.n	80067c0 <_dtoa_r+0x338>
 80067f4:	f000 80d2 	beq.w	800699c <_dtoa_r+0x514>
 80067f8:	427c      	negs	r4, r7
 80067fa:	4b92      	ldr	r3, [pc, #584]	@ (8006a44 <_dtoa_r+0x5bc>)
 80067fc:	4d92      	ldr	r5, [pc, #584]	@ (8006a48 <_dtoa_r+0x5c0>)
 80067fe:	f004 020f 	and.w	r2, r4, #15
 8006802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800680e:	f7f9 fef3 	bl	80005f8 <__aeabi_dmul>
 8006812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006816:	1124      	asrs	r4, r4, #4
 8006818:	2300      	movs	r3, #0
 800681a:	2602      	movs	r6, #2
 800681c:	2c00      	cmp	r4, #0
 800681e:	f040 80b2 	bne.w	8006986 <_dtoa_r+0x4fe>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1d3      	bne.n	80067ce <_dtoa_r+0x346>
 8006826:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006828:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 80b7 	beq.w	80069a0 <_dtoa_r+0x518>
 8006832:	4b86      	ldr	r3, [pc, #536]	@ (8006a4c <_dtoa_r+0x5c4>)
 8006834:	2200      	movs	r2, #0
 8006836:	4620      	mov	r0, r4
 8006838:	4629      	mov	r1, r5
 800683a:	f7fa f94f 	bl	8000adc <__aeabi_dcmplt>
 800683e:	2800      	cmp	r0, #0
 8006840:	f000 80ae 	beq.w	80069a0 <_dtoa_r+0x518>
 8006844:	9b07      	ldr	r3, [sp, #28]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 80aa 	beq.w	80069a0 <_dtoa_r+0x518>
 800684c:	9b00      	ldr	r3, [sp, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	dd37      	ble.n	80068c2 <_dtoa_r+0x43a>
 8006852:	1e7b      	subs	r3, r7, #1
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	4620      	mov	r0, r4
 8006858:	4b7d      	ldr	r3, [pc, #500]	@ (8006a50 <_dtoa_r+0x5c8>)
 800685a:	2200      	movs	r2, #0
 800685c:	4629      	mov	r1, r5
 800685e:	f7f9 fecb 	bl	80005f8 <__aeabi_dmul>
 8006862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006866:	9c00      	ldr	r4, [sp, #0]
 8006868:	3601      	adds	r6, #1
 800686a:	4630      	mov	r0, r6
 800686c:	f7f9 fe5a 	bl	8000524 <__aeabi_i2d>
 8006870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006874:	f7f9 fec0 	bl	80005f8 <__aeabi_dmul>
 8006878:	4b76      	ldr	r3, [pc, #472]	@ (8006a54 <_dtoa_r+0x5cc>)
 800687a:	2200      	movs	r2, #0
 800687c:	f7f9 fd06 	bl	800028c <__adddf3>
 8006880:	4605      	mov	r5, r0
 8006882:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006886:	2c00      	cmp	r4, #0
 8006888:	f040 808d 	bne.w	80069a6 <_dtoa_r+0x51e>
 800688c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006890:	4b71      	ldr	r3, [pc, #452]	@ (8006a58 <_dtoa_r+0x5d0>)
 8006892:	2200      	movs	r2, #0
 8006894:	f7f9 fcf8 	bl	8000288 <__aeabi_dsub>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068a0:	462a      	mov	r2, r5
 80068a2:	4633      	mov	r3, r6
 80068a4:	f7fa f938 	bl	8000b18 <__aeabi_dcmpgt>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	f040 828b 	bne.w	8006dc4 <_dtoa_r+0x93c>
 80068ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068b2:	462a      	mov	r2, r5
 80068b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068b8:	f7fa f910 	bl	8000adc <__aeabi_dcmplt>
 80068bc:	2800      	cmp	r0, #0
 80068be:	f040 8128 	bne.w	8006b12 <_dtoa_r+0x68a>
 80068c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80068c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80068ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f2c0 815a 	blt.w	8006b86 <_dtoa_r+0x6fe>
 80068d2:	2f0e      	cmp	r7, #14
 80068d4:	f300 8157 	bgt.w	8006b86 <_dtoa_r+0x6fe>
 80068d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006a44 <_dtoa_r+0x5bc>)
 80068da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068de:	ed93 7b00 	vldr	d7, [r3]
 80068e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	ed8d 7b00 	vstr	d7, [sp]
 80068ea:	da03      	bge.n	80068f4 <_dtoa_r+0x46c>
 80068ec:	9b07      	ldr	r3, [sp, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f340 8101 	ble.w	8006af6 <_dtoa_r+0x66e>
 80068f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068f8:	4656      	mov	r6, sl
 80068fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068fe:	4620      	mov	r0, r4
 8006900:	4629      	mov	r1, r5
 8006902:	f7f9 ffa3 	bl	800084c <__aeabi_ddiv>
 8006906:	f7fa f927 	bl	8000b58 <__aeabi_d2iz>
 800690a:	4680      	mov	r8, r0
 800690c:	f7f9 fe0a 	bl	8000524 <__aeabi_i2d>
 8006910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006914:	f7f9 fe70 	bl	80005f8 <__aeabi_dmul>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4620      	mov	r0, r4
 800691e:	4629      	mov	r1, r5
 8006920:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006924:	f7f9 fcb0 	bl	8000288 <__aeabi_dsub>
 8006928:	f806 4b01 	strb.w	r4, [r6], #1
 800692c:	9d07      	ldr	r5, [sp, #28]
 800692e:	eba6 040a 	sub.w	r4, r6, sl
 8006932:	42a5      	cmp	r5, r4
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	f040 8117 	bne.w	8006b6a <_dtoa_r+0x6e2>
 800693c:	f7f9 fca6 	bl	800028c <__adddf3>
 8006940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006944:	4604      	mov	r4, r0
 8006946:	460d      	mov	r5, r1
 8006948:	f7fa f8e6 	bl	8000b18 <__aeabi_dcmpgt>
 800694c:	2800      	cmp	r0, #0
 800694e:	f040 80f9 	bne.w	8006b44 <_dtoa_r+0x6bc>
 8006952:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006956:	4620      	mov	r0, r4
 8006958:	4629      	mov	r1, r5
 800695a:	f7fa f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800695e:	b118      	cbz	r0, 8006968 <_dtoa_r+0x4e0>
 8006960:	f018 0f01 	tst.w	r8, #1
 8006964:	f040 80ee 	bne.w	8006b44 <_dtoa_r+0x6bc>
 8006968:	4649      	mov	r1, r9
 800696a:	4658      	mov	r0, fp
 800696c:	f000 fc90 	bl	8007290 <_Bfree>
 8006970:	2300      	movs	r3, #0
 8006972:	7033      	strb	r3, [r6, #0]
 8006974:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006976:	3701      	adds	r7, #1
 8006978:	601f      	str	r7, [r3, #0]
 800697a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 831d 	beq.w	8006fbc <_dtoa_r+0xb34>
 8006982:	601e      	str	r6, [r3, #0]
 8006984:	e31a      	b.n	8006fbc <_dtoa_r+0xb34>
 8006986:	07e2      	lsls	r2, r4, #31
 8006988:	d505      	bpl.n	8006996 <_dtoa_r+0x50e>
 800698a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800698e:	f7f9 fe33 	bl	80005f8 <__aeabi_dmul>
 8006992:	3601      	adds	r6, #1
 8006994:	2301      	movs	r3, #1
 8006996:	1064      	asrs	r4, r4, #1
 8006998:	3508      	adds	r5, #8
 800699a:	e73f      	b.n	800681c <_dtoa_r+0x394>
 800699c:	2602      	movs	r6, #2
 800699e:	e742      	b.n	8006826 <_dtoa_r+0x39e>
 80069a0:	9c07      	ldr	r4, [sp, #28]
 80069a2:	9704      	str	r7, [sp, #16]
 80069a4:	e761      	b.n	800686a <_dtoa_r+0x3e2>
 80069a6:	4b27      	ldr	r3, [pc, #156]	@ (8006a44 <_dtoa_r+0x5bc>)
 80069a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069b2:	4454      	add	r4, sl
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d053      	beq.n	8006a60 <_dtoa_r+0x5d8>
 80069b8:	4928      	ldr	r1, [pc, #160]	@ (8006a5c <_dtoa_r+0x5d4>)
 80069ba:	2000      	movs	r0, #0
 80069bc:	f7f9 ff46 	bl	800084c <__aeabi_ddiv>
 80069c0:	4633      	mov	r3, r6
 80069c2:	462a      	mov	r2, r5
 80069c4:	f7f9 fc60 	bl	8000288 <__aeabi_dsub>
 80069c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069cc:	4656      	mov	r6, sl
 80069ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d2:	f7fa f8c1 	bl	8000b58 <__aeabi_d2iz>
 80069d6:	4605      	mov	r5, r0
 80069d8:	f7f9 fda4 	bl	8000524 <__aeabi_i2d>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e4:	f7f9 fc50 	bl	8000288 <__aeabi_dsub>
 80069e8:	3530      	adds	r5, #48	@ 0x30
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069f2:	f806 5b01 	strb.w	r5, [r6], #1
 80069f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069fa:	f7fa f86f 	bl	8000adc <__aeabi_dcmplt>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d171      	bne.n	8006ae6 <_dtoa_r+0x65e>
 8006a02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a06:	4911      	ldr	r1, [pc, #68]	@ (8006a4c <_dtoa_r+0x5c4>)
 8006a08:	2000      	movs	r0, #0
 8006a0a:	f7f9 fc3d 	bl	8000288 <__aeabi_dsub>
 8006a0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a12:	f7fa f863 	bl	8000adc <__aeabi_dcmplt>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f040 8095 	bne.w	8006b46 <_dtoa_r+0x6be>
 8006a1c:	42a6      	cmp	r6, r4
 8006a1e:	f43f af50 	beq.w	80068c2 <_dtoa_r+0x43a>
 8006a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a26:	4b0a      	ldr	r3, [pc, #40]	@ (8006a50 <_dtoa_r+0x5c8>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f7f9 fde5 	bl	80005f8 <__aeabi_dmul>
 8006a2e:	4b08      	ldr	r3, [pc, #32]	@ (8006a50 <_dtoa_r+0x5c8>)
 8006a30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a34:	2200      	movs	r2, #0
 8006a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a3a:	f7f9 fddd 	bl	80005f8 <__aeabi_dmul>
 8006a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a42:	e7c4      	b.n	80069ce <_dtoa_r+0x546>
 8006a44:	080085e8 	.word	0x080085e8
 8006a48:	080085c0 	.word	0x080085c0
 8006a4c:	3ff00000 	.word	0x3ff00000
 8006a50:	40240000 	.word	0x40240000
 8006a54:	401c0000 	.word	0x401c0000
 8006a58:	40140000 	.word	0x40140000
 8006a5c:	3fe00000 	.word	0x3fe00000
 8006a60:	4631      	mov	r1, r6
 8006a62:	4628      	mov	r0, r5
 8006a64:	f7f9 fdc8 	bl	80005f8 <__aeabi_dmul>
 8006a68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a6c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006a6e:	4656      	mov	r6, sl
 8006a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a74:	f7fa f870 	bl	8000b58 <__aeabi_d2iz>
 8006a78:	4605      	mov	r5, r0
 8006a7a:	f7f9 fd53 	bl	8000524 <__aeabi_i2d>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a86:	f7f9 fbff 	bl	8000288 <__aeabi_dsub>
 8006a8a:	3530      	adds	r5, #48	@ 0x30
 8006a8c:	f806 5b01 	strb.w	r5, [r6], #1
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	42a6      	cmp	r6, r4
 8006a96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	d124      	bne.n	8006aea <_dtoa_r+0x662>
 8006aa0:	4bac      	ldr	r3, [pc, #688]	@ (8006d54 <_dtoa_r+0x8cc>)
 8006aa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006aa6:	f7f9 fbf1 	bl	800028c <__adddf3>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab2:	f7fa f831 	bl	8000b18 <__aeabi_dcmpgt>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d145      	bne.n	8006b46 <_dtoa_r+0x6be>
 8006aba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006abe:	49a5      	ldr	r1, [pc, #660]	@ (8006d54 <_dtoa_r+0x8cc>)
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	f7f9 fbe1 	bl	8000288 <__aeabi_dsub>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ace:	f7fa f805 	bl	8000adc <__aeabi_dcmplt>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f43f aef5 	beq.w	80068c2 <_dtoa_r+0x43a>
 8006ad8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006ada:	1e73      	subs	r3, r6, #1
 8006adc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006ade:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ae2:	2b30      	cmp	r3, #48	@ 0x30
 8006ae4:	d0f8      	beq.n	8006ad8 <_dtoa_r+0x650>
 8006ae6:	9f04      	ldr	r7, [sp, #16]
 8006ae8:	e73e      	b.n	8006968 <_dtoa_r+0x4e0>
 8006aea:	4b9b      	ldr	r3, [pc, #620]	@ (8006d58 <_dtoa_r+0x8d0>)
 8006aec:	f7f9 fd84 	bl	80005f8 <__aeabi_dmul>
 8006af0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006af4:	e7bc      	b.n	8006a70 <_dtoa_r+0x5e8>
 8006af6:	d10c      	bne.n	8006b12 <_dtoa_r+0x68a>
 8006af8:	4b98      	ldr	r3, [pc, #608]	@ (8006d5c <_dtoa_r+0x8d4>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b00:	f7f9 fd7a 	bl	80005f8 <__aeabi_dmul>
 8006b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b08:	f7f9 fffc 	bl	8000b04 <__aeabi_dcmpge>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	f000 8157 	beq.w	8006dc0 <_dtoa_r+0x938>
 8006b12:	2400      	movs	r4, #0
 8006b14:	4625      	mov	r5, r4
 8006b16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	4656      	mov	r6, sl
 8006b1e:	2700      	movs	r7, #0
 8006b20:	4621      	mov	r1, r4
 8006b22:	4658      	mov	r0, fp
 8006b24:	f000 fbb4 	bl	8007290 <_Bfree>
 8006b28:	2d00      	cmp	r5, #0
 8006b2a:	d0dc      	beq.n	8006ae6 <_dtoa_r+0x65e>
 8006b2c:	b12f      	cbz	r7, 8006b3a <_dtoa_r+0x6b2>
 8006b2e:	42af      	cmp	r7, r5
 8006b30:	d003      	beq.n	8006b3a <_dtoa_r+0x6b2>
 8006b32:	4639      	mov	r1, r7
 8006b34:	4658      	mov	r0, fp
 8006b36:	f000 fbab 	bl	8007290 <_Bfree>
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	4658      	mov	r0, fp
 8006b3e:	f000 fba7 	bl	8007290 <_Bfree>
 8006b42:	e7d0      	b.n	8006ae6 <_dtoa_r+0x65e>
 8006b44:	9704      	str	r7, [sp, #16]
 8006b46:	4633      	mov	r3, r6
 8006b48:	461e      	mov	r6, r3
 8006b4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b4e:	2a39      	cmp	r2, #57	@ 0x39
 8006b50:	d107      	bne.n	8006b62 <_dtoa_r+0x6da>
 8006b52:	459a      	cmp	sl, r3
 8006b54:	d1f8      	bne.n	8006b48 <_dtoa_r+0x6c0>
 8006b56:	9a04      	ldr	r2, [sp, #16]
 8006b58:	3201      	adds	r2, #1
 8006b5a:	9204      	str	r2, [sp, #16]
 8006b5c:	2230      	movs	r2, #48	@ 0x30
 8006b5e:	f88a 2000 	strb.w	r2, [sl]
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	3201      	adds	r2, #1
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	e7bd      	b.n	8006ae6 <_dtoa_r+0x65e>
 8006b6a:	4b7b      	ldr	r3, [pc, #492]	@ (8006d58 <_dtoa_r+0x8d0>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f7f9 fd43 	bl	80005f8 <__aeabi_dmul>
 8006b72:	2200      	movs	r2, #0
 8006b74:	2300      	movs	r3, #0
 8006b76:	4604      	mov	r4, r0
 8006b78:	460d      	mov	r5, r1
 8006b7a:	f7f9 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f43f aebb 	beq.w	80068fa <_dtoa_r+0x472>
 8006b84:	e6f0      	b.n	8006968 <_dtoa_r+0x4e0>
 8006b86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b88:	2a00      	cmp	r2, #0
 8006b8a:	f000 80db 	beq.w	8006d44 <_dtoa_r+0x8bc>
 8006b8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b90:	2a01      	cmp	r2, #1
 8006b92:	f300 80bf 	bgt.w	8006d14 <_dtoa_r+0x88c>
 8006b96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	f000 80b7 	beq.w	8006d0c <_dtoa_r+0x884>
 8006b9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ba2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ba4:	4646      	mov	r6, r8
 8006ba6:	9a08      	ldr	r2, [sp, #32]
 8006ba8:	2101      	movs	r1, #1
 8006baa:	441a      	add	r2, r3
 8006bac:	4658      	mov	r0, fp
 8006bae:	4498      	add	r8, r3
 8006bb0:	9208      	str	r2, [sp, #32]
 8006bb2:	f000 fc21 	bl	80073f8 <__i2b>
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	b15e      	cbz	r6, 8006bd2 <_dtoa_r+0x74a>
 8006bba:	9b08      	ldr	r3, [sp, #32]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dd08      	ble.n	8006bd2 <_dtoa_r+0x74a>
 8006bc0:	42b3      	cmp	r3, r6
 8006bc2:	9a08      	ldr	r2, [sp, #32]
 8006bc4:	bfa8      	it	ge
 8006bc6:	4633      	movge	r3, r6
 8006bc8:	eba8 0803 	sub.w	r8, r8, r3
 8006bcc:	1af6      	subs	r6, r6, r3
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	9308      	str	r3, [sp, #32]
 8006bd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bd4:	b1f3      	cbz	r3, 8006c14 <_dtoa_r+0x78c>
 8006bd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 80b7 	beq.w	8006d4c <_dtoa_r+0x8c4>
 8006bde:	b18c      	cbz	r4, 8006c04 <_dtoa_r+0x77c>
 8006be0:	4629      	mov	r1, r5
 8006be2:	4622      	mov	r2, r4
 8006be4:	4658      	mov	r0, fp
 8006be6:	f000 fcc7 	bl	8007578 <__pow5mult>
 8006bea:	464a      	mov	r2, r9
 8006bec:	4601      	mov	r1, r0
 8006bee:	4605      	mov	r5, r0
 8006bf0:	4658      	mov	r0, fp
 8006bf2:	f000 fc17 	bl	8007424 <__multiply>
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	9004      	str	r0, [sp, #16]
 8006bfa:	4658      	mov	r0, fp
 8006bfc:	f000 fb48 	bl	8007290 <_Bfree>
 8006c00:	9b04      	ldr	r3, [sp, #16]
 8006c02:	4699      	mov	r9, r3
 8006c04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c06:	1b1a      	subs	r2, r3, r4
 8006c08:	d004      	beq.n	8006c14 <_dtoa_r+0x78c>
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	4658      	mov	r0, fp
 8006c0e:	f000 fcb3 	bl	8007578 <__pow5mult>
 8006c12:	4681      	mov	r9, r0
 8006c14:	2101      	movs	r1, #1
 8006c16:	4658      	mov	r0, fp
 8006c18:	f000 fbee 	bl	80073f8 <__i2b>
 8006c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c1e:	4604      	mov	r4, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 81cf 	beq.w	8006fc4 <_dtoa_r+0xb3c>
 8006c26:	461a      	mov	r2, r3
 8006c28:	4601      	mov	r1, r0
 8006c2a:	4658      	mov	r0, fp
 8006c2c:	f000 fca4 	bl	8007578 <__pow5mult>
 8006c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	4604      	mov	r4, r0
 8006c36:	f300 8095 	bgt.w	8006d64 <_dtoa_r+0x8dc>
 8006c3a:	9b02      	ldr	r3, [sp, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 8087 	bne.w	8006d50 <_dtoa_r+0x8c8>
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f040 8089 	bne.w	8006d60 <_dtoa_r+0x8d8>
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c54:	0d1b      	lsrs	r3, r3, #20
 8006c56:	051b      	lsls	r3, r3, #20
 8006c58:	b12b      	cbz	r3, 8006c66 <_dtoa_r+0x7de>
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	9308      	str	r3, [sp, #32]
 8006c60:	f108 0801 	add.w	r8, r8, #1
 8006c64:	2301      	movs	r3, #1
 8006c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 81b0 	beq.w	8006fd0 <_dtoa_r+0xb48>
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c76:	6918      	ldr	r0, [r3, #16]
 8006c78:	f000 fb72 	bl	8007360 <__hi0bits>
 8006c7c:	f1c0 0020 	rsb	r0, r0, #32
 8006c80:	9b08      	ldr	r3, [sp, #32]
 8006c82:	4418      	add	r0, r3
 8006c84:	f010 001f 	ands.w	r0, r0, #31
 8006c88:	d077      	beq.n	8006d7a <_dtoa_r+0x8f2>
 8006c8a:	f1c0 0320 	rsb	r3, r0, #32
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	dd6b      	ble.n	8006d6a <_dtoa_r+0x8e2>
 8006c92:	9b08      	ldr	r3, [sp, #32]
 8006c94:	f1c0 001c 	rsb	r0, r0, #28
 8006c98:	4403      	add	r3, r0
 8006c9a:	4480      	add	r8, r0
 8006c9c:	4406      	add	r6, r0
 8006c9e:	9308      	str	r3, [sp, #32]
 8006ca0:	f1b8 0f00 	cmp.w	r8, #0
 8006ca4:	dd05      	ble.n	8006cb2 <_dtoa_r+0x82a>
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	4642      	mov	r2, r8
 8006caa:	4658      	mov	r0, fp
 8006cac:	f000 fcbe 	bl	800762c <__lshift>
 8006cb0:	4681      	mov	r9, r0
 8006cb2:	9b08      	ldr	r3, [sp, #32]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dd05      	ble.n	8006cc4 <_dtoa_r+0x83c>
 8006cb8:	4621      	mov	r1, r4
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4658      	mov	r0, fp
 8006cbe:	f000 fcb5 	bl	800762c <__lshift>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d059      	beq.n	8006d7e <_dtoa_r+0x8f6>
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4648      	mov	r0, r9
 8006cce:	f000 fd19 	bl	8007704 <__mcmp>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	da53      	bge.n	8006d7e <_dtoa_r+0x8f6>
 8006cd6:	1e7b      	subs	r3, r7, #1
 8006cd8:	9304      	str	r3, [sp, #16]
 8006cda:	4649      	mov	r1, r9
 8006cdc:	2300      	movs	r3, #0
 8006cde:	220a      	movs	r2, #10
 8006ce0:	4658      	mov	r0, fp
 8006ce2:	f000 faf7 	bl	80072d4 <__multadd>
 8006ce6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ce8:	4681      	mov	r9, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8172 	beq.w	8006fd4 <_dtoa_r+0xb4c>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	220a      	movs	r2, #10
 8006cf6:	4658      	mov	r0, fp
 8006cf8:	f000 faec 	bl	80072d4 <__multadd>
 8006cfc:	9b00      	ldr	r3, [sp, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	4605      	mov	r5, r0
 8006d02:	dc67      	bgt.n	8006dd4 <_dtoa_r+0x94c>
 8006d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	dc41      	bgt.n	8006d8e <_dtoa_r+0x906>
 8006d0a:	e063      	b.n	8006dd4 <_dtoa_r+0x94c>
 8006d0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d12:	e746      	b.n	8006ba2 <_dtoa_r+0x71a>
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	1e5c      	subs	r4, r3, #1
 8006d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d1a:	42a3      	cmp	r3, r4
 8006d1c:	bfbf      	itttt	lt
 8006d1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006d22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d24:	1ae3      	sublt	r3, r4, r3
 8006d26:	bfb4      	ite	lt
 8006d28:	18d2      	addlt	r2, r2, r3
 8006d2a:	1b1c      	subge	r4, r3, r4
 8006d2c:	9b07      	ldr	r3, [sp, #28]
 8006d2e:	bfbc      	itt	lt
 8006d30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006d32:	2400      	movlt	r4, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfb5      	itete	lt
 8006d38:	eba8 0603 	sublt.w	r6, r8, r3
 8006d3c:	9b07      	ldrge	r3, [sp, #28]
 8006d3e:	2300      	movlt	r3, #0
 8006d40:	4646      	movge	r6, r8
 8006d42:	e730      	b.n	8006ba6 <_dtoa_r+0x71e>
 8006d44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d48:	4646      	mov	r6, r8
 8006d4a:	e735      	b.n	8006bb8 <_dtoa_r+0x730>
 8006d4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d4e:	e75c      	b.n	8006c0a <_dtoa_r+0x782>
 8006d50:	2300      	movs	r3, #0
 8006d52:	e788      	b.n	8006c66 <_dtoa_r+0x7de>
 8006d54:	3fe00000 	.word	0x3fe00000
 8006d58:	40240000 	.word	0x40240000
 8006d5c:	40140000 	.word	0x40140000
 8006d60:	9b02      	ldr	r3, [sp, #8]
 8006d62:	e780      	b.n	8006c66 <_dtoa_r+0x7de>
 8006d64:	2300      	movs	r3, #0
 8006d66:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d68:	e782      	b.n	8006c70 <_dtoa_r+0x7e8>
 8006d6a:	d099      	beq.n	8006ca0 <_dtoa_r+0x818>
 8006d6c:	9a08      	ldr	r2, [sp, #32]
 8006d6e:	331c      	adds	r3, #28
 8006d70:	441a      	add	r2, r3
 8006d72:	4498      	add	r8, r3
 8006d74:	441e      	add	r6, r3
 8006d76:	9208      	str	r2, [sp, #32]
 8006d78:	e792      	b.n	8006ca0 <_dtoa_r+0x818>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	e7f6      	b.n	8006d6c <_dtoa_r+0x8e4>
 8006d7e:	9b07      	ldr	r3, [sp, #28]
 8006d80:	9704      	str	r7, [sp, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	dc20      	bgt.n	8006dc8 <_dtoa_r+0x940>
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	dd1e      	ble.n	8006dcc <_dtoa_r+0x944>
 8006d8e:	9b00      	ldr	r3, [sp, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f47f aec0 	bne.w	8006b16 <_dtoa_r+0x68e>
 8006d96:	4621      	mov	r1, r4
 8006d98:	2205      	movs	r2, #5
 8006d9a:	4658      	mov	r0, fp
 8006d9c:	f000 fa9a 	bl	80072d4 <__multadd>
 8006da0:	4601      	mov	r1, r0
 8006da2:	4604      	mov	r4, r0
 8006da4:	4648      	mov	r0, r9
 8006da6:	f000 fcad 	bl	8007704 <__mcmp>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	f77f aeb3 	ble.w	8006b16 <_dtoa_r+0x68e>
 8006db0:	4656      	mov	r6, sl
 8006db2:	2331      	movs	r3, #49	@ 0x31
 8006db4:	f806 3b01 	strb.w	r3, [r6], #1
 8006db8:	9b04      	ldr	r3, [sp, #16]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	9304      	str	r3, [sp, #16]
 8006dbe:	e6ae      	b.n	8006b1e <_dtoa_r+0x696>
 8006dc0:	9c07      	ldr	r4, [sp, #28]
 8006dc2:	9704      	str	r7, [sp, #16]
 8006dc4:	4625      	mov	r5, r4
 8006dc6:	e7f3      	b.n	8006db0 <_dtoa_r+0x928>
 8006dc8:	9b07      	ldr	r3, [sp, #28]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8104 	beq.w	8006fdc <_dtoa_r+0xb54>
 8006dd4:	2e00      	cmp	r6, #0
 8006dd6:	dd05      	ble.n	8006de4 <_dtoa_r+0x95c>
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4632      	mov	r2, r6
 8006ddc:	4658      	mov	r0, fp
 8006dde:	f000 fc25 	bl	800762c <__lshift>
 8006de2:	4605      	mov	r5, r0
 8006de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d05a      	beq.n	8006ea0 <_dtoa_r+0xa18>
 8006dea:	6869      	ldr	r1, [r5, #4]
 8006dec:	4658      	mov	r0, fp
 8006dee:	f000 fa0f 	bl	8007210 <_Balloc>
 8006df2:	4606      	mov	r6, r0
 8006df4:	b928      	cbnz	r0, 8006e02 <_dtoa_r+0x97a>
 8006df6:	4b84      	ldr	r3, [pc, #528]	@ (8007008 <_dtoa_r+0xb80>)
 8006df8:	4602      	mov	r2, r0
 8006dfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006dfe:	f7ff bb5a 	b.w	80064b6 <_dtoa_r+0x2e>
 8006e02:	692a      	ldr	r2, [r5, #16]
 8006e04:	3202      	adds	r2, #2
 8006e06:	0092      	lsls	r2, r2, #2
 8006e08:	f105 010c 	add.w	r1, r5, #12
 8006e0c:	300c      	adds	r0, #12
 8006e0e:	f000 ffaf 	bl	8007d70 <memcpy>
 8006e12:	2201      	movs	r2, #1
 8006e14:	4631      	mov	r1, r6
 8006e16:	4658      	mov	r0, fp
 8006e18:	f000 fc08 	bl	800762c <__lshift>
 8006e1c:	f10a 0301 	add.w	r3, sl, #1
 8006e20:	9307      	str	r3, [sp, #28]
 8006e22:	9b00      	ldr	r3, [sp, #0]
 8006e24:	4453      	add	r3, sl
 8006e26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	462f      	mov	r7, r5
 8006e30:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e32:	4605      	mov	r5, r0
 8006e34:	9b07      	ldr	r3, [sp, #28]
 8006e36:	4621      	mov	r1, r4
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	4648      	mov	r0, r9
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	f7ff fa9a 	bl	8006376 <quorem>
 8006e42:	4639      	mov	r1, r7
 8006e44:	9002      	str	r0, [sp, #8]
 8006e46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e4a:	4648      	mov	r0, r9
 8006e4c:	f000 fc5a 	bl	8007704 <__mcmp>
 8006e50:	462a      	mov	r2, r5
 8006e52:	9008      	str	r0, [sp, #32]
 8006e54:	4621      	mov	r1, r4
 8006e56:	4658      	mov	r0, fp
 8006e58:	f000 fc70 	bl	800773c <__mdiff>
 8006e5c:	68c2      	ldr	r2, [r0, #12]
 8006e5e:	4606      	mov	r6, r0
 8006e60:	bb02      	cbnz	r2, 8006ea4 <_dtoa_r+0xa1c>
 8006e62:	4601      	mov	r1, r0
 8006e64:	4648      	mov	r0, r9
 8006e66:	f000 fc4d 	bl	8007704 <__mcmp>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4658      	mov	r0, fp
 8006e70:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e72:	f000 fa0d 	bl	8007290 <_Bfree>
 8006e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e7a:	9e07      	ldr	r6, [sp, #28]
 8006e7c:	ea43 0102 	orr.w	r1, r3, r2
 8006e80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e82:	4319      	orrs	r1, r3
 8006e84:	d110      	bne.n	8006ea8 <_dtoa_r+0xa20>
 8006e86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e8a:	d029      	beq.n	8006ee0 <_dtoa_r+0xa58>
 8006e8c:	9b08      	ldr	r3, [sp, #32]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	dd02      	ble.n	8006e98 <_dtoa_r+0xa10>
 8006e92:	9b02      	ldr	r3, [sp, #8]
 8006e94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006e98:	9b00      	ldr	r3, [sp, #0]
 8006e9a:	f883 8000 	strb.w	r8, [r3]
 8006e9e:	e63f      	b.n	8006b20 <_dtoa_r+0x698>
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	e7bb      	b.n	8006e1c <_dtoa_r+0x994>
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	e7e1      	b.n	8006e6c <_dtoa_r+0x9e4>
 8006ea8:	9b08      	ldr	r3, [sp, #32]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	db04      	blt.n	8006eb8 <_dtoa_r+0xa30>
 8006eae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	d120      	bne.n	8006efa <_dtoa_r+0xa72>
 8006eb8:	2a00      	cmp	r2, #0
 8006eba:	dded      	ble.n	8006e98 <_dtoa_r+0xa10>
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	4658      	mov	r0, fp
 8006ec2:	f000 fbb3 	bl	800762c <__lshift>
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4681      	mov	r9, r0
 8006eca:	f000 fc1b 	bl	8007704 <__mcmp>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	dc03      	bgt.n	8006eda <_dtoa_r+0xa52>
 8006ed2:	d1e1      	bne.n	8006e98 <_dtoa_r+0xa10>
 8006ed4:	f018 0f01 	tst.w	r8, #1
 8006ed8:	d0de      	beq.n	8006e98 <_dtoa_r+0xa10>
 8006eda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ede:	d1d8      	bne.n	8006e92 <_dtoa_r+0xa0a>
 8006ee0:	9a00      	ldr	r2, [sp, #0]
 8006ee2:	2339      	movs	r3, #57	@ 0x39
 8006ee4:	7013      	strb	r3, [r2, #0]
 8006ee6:	4633      	mov	r3, r6
 8006ee8:	461e      	mov	r6, r3
 8006eea:	3b01      	subs	r3, #1
 8006eec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ef0:	2a39      	cmp	r2, #57	@ 0x39
 8006ef2:	d052      	beq.n	8006f9a <_dtoa_r+0xb12>
 8006ef4:	3201      	adds	r2, #1
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	e612      	b.n	8006b20 <_dtoa_r+0x698>
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	dd07      	ble.n	8006f0e <_dtoa_r+0xa86>
 8006efe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f02:	d0ed      	beq.n	8006ee0 <_dtoa_r+0xa58>
 8006f04:	9a00      	ldr	r2, [sp, #0]
 8006f06:	f108 0301 	add.w	r3, r8, #1
 8006f0a:	7013      	strb	r3, [r2, #0]
 8006f0c:	e608      	b.n	8006b20 <_dtoa_r+0x698>
 8006f0e:	9b07      	ldr	r3, [sp, #28]
 8006f10:	9a07      	ldr	r2, [sp, #28]
 8006f12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d028      	beq.n	8006f6e <_dtoa_r+0xae6>
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	2300      	movs	r3, #0
 8006f20:	220a      	movs	r2, #10
 8006f22:	4658      	mov	r0, fp
 8006f24:	f000 f9d6 	bl	80072d4 <__multadd>
 8006f28:	42af      	cmp	r7, r5
 8006f2a:	4681      	mov	r9, r0
 8006f2c:	f04f 0300 	mov.w	r3, #0
 8006f30:	f04f 020a 	mov.w	r2, #10
 8006f34:	4639      	mov	r1, r7
 8006f36:	4658      	mov	r0, fp
 8006f38:	d107      	bne.n	8006f4a <_dtoa_r+0xac2>
 8006f3a:	f000 f9cb 	bl	80072d4 <__multadd>
 8006f3e:	4607      	mov	r7, r0
 8006f40:	4605      	mov	r5, r0
 8006f42:	9b07      	ldr	r3, [sp, #28]
 8006f44:	3301      	adds	r3, #1
 8006f46:	9307      	str	r3, [sp, #28]
 8006f48:	e774      	b.n	8006e34 <_dtoa_r+0x9ac>
 8006f4a:	f000 f9c3 	bl	80072d4 <__multadd>
 8006f4e:	4629      	mov	r1, r5
 8006f50:	4607      	mov	r7, r0
 8006f52:	2300      	movs	r3, #0
 8006f54:	220a      	movs	r2, #10
 8006f56:	4658      	mov	r0, fp
 8006f58:	f000 f9bc 	bl	80072d4 <__multadd>
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	e7f0      	b.n	8006f42 <_dtoa_r+0xaba>
 8006f60:	9b00      	ldr	r3, [sp, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bfcc      	ite	gt
 8006f66:	461e      	movgt	r6, r3
 8006f68:	2601      	movle	r6, #1
 8006f6a:	4456      	add	r6, sl
 8006f6c:	2700      	movs	r7, #0
 8006f6e:	4649      	mov	r1, r9
 8006f70:	2201      	movs	r2, #1
 8006f72:	4658      	mov	r0, fp
 8006f74:	f000 fb5a 	bl	800762c <__lshift>
 8006f78:	4621      	mov	r1, r4
 8006f7a:	4681      	mov	r9, r0
 8006f7c:	f000 fbc2 	bl	8007704 <__mcmp>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	dcb0      	bgt.n	8006ee6 <_dtoa_r+0xa5e>
 8006f84:	d102      	bne.n	8006f8c <_dtoa_r+0xb04>
 8006f86:	f018 0f01 	tst.w	r8, #1
 8006f8a:	d1ac      	bne.n	8006ee6 <_dtoa_r+0xa5e>
 8006f8c:	4633      	mov	r3, r6
 8006f8e:	461e      	mov	r6, r3
 8006f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f94:	2a30      	cmp	r2, #48	@ 0x30
 8006f96:	d0fa      	beq.n	8006f8e <_dtoa_r+0xb06>
 8006f98:	e5c2      	b.n	8006b20 <_dtoa_r+0x698>
 8006f9a:	459a      	cmp	sl, r3
 8006f9c:	d1a4      	bne.n	8006ee8 <_dtoa_r+0xa60>
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	2331      	movs	r3, #49	@ 0x31
 8006fa6:	f88a 3000 	strb.w	r3, [sl]
 8006faa:	e5b9      	b.n	8006b20 <_dtoa_r+0x698>
 8006fac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800700c <_dtoa_r+0xb84>
 8006fb2:	b11b      	cbz	r3, 8006fbc <_dtoa_r+0xb34>
 8006fb4:	f10a 0308 	add.w	r3, sl, #8
 8006fb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	4650      	mov	r0, sl
 8006fbe:	b019      	add	sp, #100	@ 0x64
 8006fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	f77f ae37 	ble.w	8006c3a <_dtoa_r+0x7b2>
 8006fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	e655      	b.n	8006c80 <_dtoa_r+0x7f8>
 8006fd4:	9b00      	ldr	r3, [sp, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f77f aed6 	ble.w	8006d88 <_dtoa_r+0x900>
 8006fdc:	4656      	mov	r6, sl
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4648      	mov	r0, r9
 8006fe2:	f7ff f9c8 	bl	8006376 <quorem>
 8006fe6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006fea:	f806 8b01 	strb.w	r8, [r6], #1
 8006fee:	9b00      	ldr	r3, [sp, #0]
 8006ff0:	eba6 020a 	sub.w	r2, r6, sl
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	ddb3      	ble.n	8006f60 <_dtoa_r+0xad8>
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	220a      	movs	r2, #10
 8006ffe:	4658      	mov	r0, fp
 8007000:	f000 f968 	bl	80072d4 <__multadd>
 8007004:	4681      	mov	r9, r0
 8007006:	e7ea      	b.n	8006fde <_dtoa_r+0xb56>
 8007008:	08008544 	.word	0x08008544
 800700c:	080084c8 	.word	0x080084c8

08007010 <_free_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4605      	mov	r5, r0
 8007014:	2900      	cmp	r1, #0
 8007016:	d041      	beq.n	800709c <_free_r+0x8c>
 8007018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800701c:	1f0c      	subs	r4, r1, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	bfb8      	it	lt
 8007022:	18e4      	addlt	r4, r4, r3
 8007024:	f000 f8e8 	bl	80071f8 <__malloc_lock>
 8007028:	4a1d      	ldr	r2, [pc, #116]	@ (80070a0 <_free_r+0x90>)
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	b933      	cbnz	r3, 800703c <_free_r+0x2c>
 800702e:	6063      	str	r3, [r4, #4]
 8007030:	6014      	str	r4, [r2, #0]
 8007032:	4628      	mov	r0, r5
 8007034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007038:	f000 b8e4 	b.w	8007204 <__malloc_unlock>
 800703c:	42a3      	cmp	r3, r4
 800703e:	d908      	bls.n	8007052 <_free_r+0x42>
 8007040:	6820      	ldr	r0, [r4, #0]
 8007042:	1821      	adds	r1, r4, r0
 8007044:	428b      	cmp	r3, r1
 8007046:	bf01      	itttt	eq
 8007048:	6819      	ldreq	r1, [r3, #0]
 800704a:	685b      	ldreq	r3, [r3, #4]
 800704c:	1809      	addeq	r1, r1, r0
 800704e:	6021      	streq	r1, [r4, #0]
 8007050:	e7ed      	b.n	800702e <_free_r+0x1e>
 8007052:	461a      	mov	r2, r3
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b10b      	cbz	r3, 800705c <_free_r+0x4c>
 8007058:	42a3      	cmp	r3, r4
 800705a:	d9fa      	bls.n	8007052 <_free_r+0x42>
 800705c:	6811      	ldr	r1, [r2, #0]
 800705e:	1850      	adds	r0, r2, r1
 8007060:	42a0      	cmp	r0, r4
 8007062:	d10b      	bne.n	800707c <_free_r+0x6c>
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	4401      	add	r1, r0
 8007068:	1850      	adds	r0, r2, r1
 800706a:	4283      	cmp	r3, r0
 800706c:	6011      	str	r1, [r2, #0]
 800706e:	d1e0      	bne.n	8007032 <_free_r+0x22>
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	6053      	str	r3, [r2, #4]
 8007076:	4408      	add	r0, r1
 8007078:	6010      	str	r0, [r2, #0]
 800707a:	e7da      	b.n	8007032 <_free_r+0x22>
 800707c:	d902      	bls.n	8007084 <_free_r+0x74>
 800707e:	230c      	movs	r3, #12
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	e7d6      	b.n	8007032 <_free_r+0x22>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	1821      	adds	r1, r4, r0
 8007088:	428b      	cmp	r3, r1
 800708a:	bf04      	itt	eq
 800708c:	6819      	ldreq	r1, [r3, #0]
 800708e:	685b      	ldreq	r3, [r3, #4]
 8007090:	6063      	str	r3, [r4, #4]
 8007092:	bf04      	itt	eq
 8007094:	1809      	addeq	r1, r1, r0
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	6054      	str	r4, [r2, #4]
 800709a:	e7ca      	b.n	8007032 <_free_r+0x22>
 800709c:	bd38      	pop	{r3, r4, r5, pc}
 800709e:	bf00      	nop
 80070a0:	200004c4 	.word	0x200004c4

080070a4 <malloc>:
 80070a4:	4b02      	ldr	r3, [pc, #8]	@ (80070b0 <malloc+0xc>)
 80070a6:	4601      	mov	r1, r0
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	f000 b825 	b.w	80070f8 <_malloc_r>
 80070ae:	bf00      	nop
 80070b0:	20000018 	.word	0x20000018

080070b4 <sbrk_aligned>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	4e0f      	ldr	r6, [pc, #60]	@ (80070f4 <sbrk_aligned+0x40>)
 80070b8:	460c      	mov	r4, r1
 80070ba:	6831      	ldr	r1, [r6, #0]
 80070bc:	4605      	mov	r5, r0
 80070be:	b911      	cbnz	r1, 80070c6 <sbrk_aligned+0x12>
 80070c0:	f000 fe46 	bl	8007d50 <_sbrk_r>
 80070c4:	6030      	str	r0, [r6, #0]
 80070c6:	4621      	mov	r1, r4
 80070c8:	4628      	mov	r0, r5
 80070ca:	f000 fe41 	bl	8007d50 <_sbrk_r>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	d103      	bne.n	80070da <sbrk_aligned+0x26>
 80070d2:	f04f 34ff 	mov.w	r4, #4294967295
 80070d6:	4620      	mov	r0, r4
 80070d8:	bd70      	pop	{r4, r5, r6, pc}
 80070da:	1cc4      	adds	r4, r0, #3
 80070dc:	f024 0403 	bic.w	r4, r4, #3
 80070e0:	42a0      	cmp	r0, r4
 80070e2:	d0f8      	beq.n	80070d6 <sbrk_aligned+0x22>
 80070e4:	1a21      	subs	r1, r4, r0
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 fe32 	bl	8007d50 <_sbrk_r>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d1f2      	bne.n	80070d6 <sbrk_aligned+0x22>
 80070f0:	e7ef      	b.n	80070d2 <sbrk_aligned+0x1e>
 80070f2:	bf00      	nop
 80070f4:	200004c0 	.word	0x200004c0

080070f8 <_malloc_r>:
 80070f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070fc:	1ccd      	adds	r5, r1, #3
 80070fe:	f025 0503 	bic.w	r5, r5, #3
 8007102:	3508      	adds	r5, #8
 8007104:	2d0c      	cmp	r5, #12
 8007106:	bf38      	it	cc
 8007108:	250c      	movcc	r5, #12
 800710a:	2d00      	cmp	r5, #0
 800710c:	4606      	mov	r6, r0
 800710e:	db01      	blt.n	8007114 <_malloc_r+0x1c>
 8007110:	42a9      	cmp	r1, r5
 8007112:	d904      	bls.n	800711e <_malloc_r+0x26>
 8007114:	230c      	movs	r3, #12
 8007116:	6033      	str	r3, [r6, #0]
 8007118:	2000      	movs	r0, #0
 800711a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800711e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071f4 <_malloc_r+0xfc>
 8007122:	f000 f869 	bl	80071f8 <__malloc_lock>
 8007126:	f8d8 3000 	ldr.w	r3, [r8]
 800712a:	461c      	mov	r4, r3
 800712c:	bb44      	cbnz	r4, 8007180 <_malloc_r+0x88>
 800712e:	4629      	mov	r1, r5
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff ffbf 	bl	80070b4 <sbrk_aligned>
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	4604      	mov	r4, r0
 800713a:	d158      	bne.n	80071ee <_malloc_r+0xf6>
 800713c:	f8d8 4000 	ldr.w	r4, [r8]
 8007140:	4627      	mov	r7, r4
 8007142:	2f00      	cmp	r7, #0
 8007144:	d143      	bne.n	80071ce <_malloc_r+0xd6>
 8007146:	2c00      	cmp	r4, #0
 8007148:	d04b      	beq.n	80071e2 <_malloc_r+0xea>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	4639      	mov	r1, r7
 800714e:	4630      	mov	r0, r6
 8007150:	eb04 0903 	add.w	r9, r4, r3
 8007154:	f000 fdfc 	bl	8007d50 <_sbrk_r>
 8007158:	4581      	cmp	r9, r0
 800715a:	d142      	bne.n	80071e2 <_malloc_r+0xea>
 800715c:	6821      	ldr	r1, [r4, #0]
 800715e:	1a6d      	subs	r5, r5, r1
 8007160:	4629      	mov	r1, r5
 8007162:	4630      	mov	r0, r6
 8007164:	f7ff ffa6 	bl	80070b4 <sbrk_aligned>
 8007168:	3001      	adds	r0, #1
 800716a:	d03a      	beq.n	80071e2 <_malloc_r+0xea>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	442b      	add	r3, r5
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	f8d8 3000 	ldr.w	r3, [r8]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	bb62      	cbnz	r2, 80071d4 <_malloc_r+0xdc>
 800717a:	f8c8 7000 	str.w	r7, [r8]
 800717e:	e00f      	b.n	80071a0 <_malloc_r+0xa8>
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	1b52      	subs	r2, r2, r5
 8007184:	d420      	bmi.n	80071c8 <_malloc_r+0xd0>
 8007186:	2a0b      	cmp	r2, #11
 8007188:	d917      	bls.n	80071ba <_malloc_r+0xc2>
 800718a:	1961      	adds	r1, r4, r5
 800718c:	42a3      	cmp	r3, r4
 800718e:	6025      	str	r5, [r4, #0]
 8007190:	bf18      	it	ne
 8007192:	6059      	strne	r1, [r3, #4]
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	bf08      	it	eq
 8007198:	f8c8 1000 	streq.w	r1, [r8]
 800719c:	5162      	str	r2, [r4, r5]
 800719e:	604b      	str	r3, [r1, #4]
 80071a0:	4630      	mov	r0, r6
 80071a2:	f000 f82f 	bl	8007204 <__malloc_unlock>
 80071a6:	f104 000b 	add.w	r0, r4, #11
 80071aa:	1d23      	adds	r3, r4, #4
 80071ac:	f020 0007 	bic.w	r0, r0, #7
 80071b0:	1ac2      	subs	r2, r0, r3
 80071b2:	bf1c      	itt	ne
 80071b4:	1a1b      	subne	r3, r3, r0
 80071b6:	50a3      	strne	r3, [r4, r2]
 80071b8:	e7af      	b.n	800711a <_malloc_r+0x22>
 80071ba:	6862      	ldr	r2, [r4, #4]
 80071bc:	42a3      	cmp	r3, r4
 80071be:	bf0c      	ite	eq
 80071c0:	f8c8 2000 	streq.w	r2, [r8]
 80071c4:	605a      	strne	r2, [r3, #4]
 80071c6:	e7eb      	b.n	80071a0 <_malloc_r+0xa8>
 80071c8:	4623      	mov	r3, r4
 80071ca:	6864      	ldr	r4, [r4, #4]
 80071cc:	e7ae      	b.n	800712c <_malloc_r+0x34>
 80071ce:	463c      	mov	r4, r7
 80071d0:	687f      	ldr	r7, [r7, #4]
 80071d2:	e7b6      	b.n	8007142 <_malloc_r+0x4a>
 80071d4:	461a      	mov	r2, r3
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	42a3      	cmp	r3, r4
 80071da:	d1fb      	bne.n	80071d4 <_malloc_r+0xdc>
 80071dc:	2300      	movs	r3, #0
 80071de:	6053      	str	r3, [r2, #4]
 80071e0:	e7de      	b.n	80071a0 <_malloc_r+0xa8>
 80071e2:	230c      	movs	r3, #12
 80071e4:	6033      	str	r3, [r6, #0]
 80071e6:	4630      	mov	r0, r6
 80071e8:	f000 f80c 	bl	8007204 <__malloc_unlock>
 80071ec:	e794      	b.n	8007118 <_malloc_r+0x20>
 80071ee:	6005      	str	r5, [r0, #0]
 80071f0:	e7d6      	b.n	80071a0 <_malloc_r+0xa8>
 80071f2:	bf00      	nop
 80071f4:	200004c4 	.word	0x200004c4

080071f8 <__malloc_lock>:
 80071f8:	4801      	ldr	r0, [pc, #4]	@ (8007200 <__malloc_lock+0x8>)
 80071fa:	f7ff b8ba 	b.w	8006372 <__retarget_lock_acquire_recursive>
 80071fe:	bf00      	nop
 8007200:	200004bc 	.word	0x200004bc

08007204 <__malloc_unlock>:
 8007204:	4801      	ldr	r0, [pc, #4]	@ (800720c <__malloc_unlock+0x8>)
 8007206:	f7ff b8b5 	b.w	8006374 <__retarget_lock_release_recursive>
 800720a:	bf00      	nop
 800720c:	200004bc 	.word	0x200004bc

08007210 <_Balloc>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	69c6      	ldr	r6, [r0, #28]
 8007214:	4604      	mov	r4, r0
 8007216:	460d      	mov	r5, r1
 8007218:	b976      	cbnz	r6, 8007238 <_Balloc+0x28>
 800721a:	2010      	movs	r0, #16
 800721c:	f7ff ff42 	bl	80070a4 <malloc>
 8007220:	4602      	mov	r2, r0
 8007222:	61e0      	str	r0, [r4, #28]
 8007224:	b920      	cbnz	r0, 8007230 <_Balloc+0x20>
 8007226:	4b18      	ldr	r3, [pc, #96]	@ (8007288 <_Balloc+0x78>)
 8007228:	4818      	ldr	r0, [pc, #96]	@ (800728c <_Balloc+0x7c>)
 800722a:	216b      	movs	r1, #107	@ 0x6b
 800722c:	f000 fdae 	bl	8007d8c <__assert_func>
 8007230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007234:	6006      	str	r6, [r0, #0]
 8007236:	60c6      	str	r6, [r0, #12]
 8007238:	69e6      	ldr	r6, [r4, #28]
 800723a:	68f3      	ldr	r3, [r6, #12]
 800723c:	b183      	cbz	r3, 8007260 <_Balloc+0x50>
 800723e:	69e3      	ldr	r3, [r4, #28]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007246:	b9b8      	cbnz	r0, 8007278 <_Balloc+0x68>
 8007248:	2101      	movs	r1, #1
 800724a:	fa01 f605 	lsl.w	r6, r1, r5
 800724e:	1d72      	adds	r2, r6, #5
 8007250:	0092      	lsls	r2, r2, #2
 8007252:	4620      	mov	r0, r4
 8007254:	f000 fdb8 	bl	8007dc8 <_calloc_r>
 8007258:	b160      	cbz	r0, 8007274 <_Balloc+0x64>
 800725a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800725e:	e00e      	b.n	800727e <_Balloc+0x6e>
 8007260:	2221      	movs	r2, #33	@ 0x21
 8007262:	2104      	movs	r1, #4
 8007264:	4620      	mov	r0, r4
 8007266:	f000 fdaf 	bl	8007dc8 <_calloc_r>
 800726a:	69e3      	ldr	r3, [r4, #28]
 800726c:	60f0      	str	r0, [r6, #12]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e4      	bne.n	800723e <_Balloc+0x2e>
 8007274:	2000      	movs	r0, #0
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	6802      	ldr	r2, [r0, #0]
 800727a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800727e:	2300      	movs	r3, #0
 8007280:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007284:	e7f7      	b.n	8007276 <_Balloc+0x66>
 8007286:	bf00      	nop
 8007288:	080084d5 	.word	0x080084d5
 800728c:	08008555 	.word	0x08008555

08007290 <_Bfree>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	69c6      	ldr	r6, [r0, #28]
 8007294:	4605      	mov	r5, r0
 8007296:	460c      	mov	r4, r1
 8007298:	b976      	cbnz	r6, 80072b8 <_Bfree+0x28>
 800729a:	2010      	movs	r0, #16
 800729c:	f7ff ff02 	bl	80070a4 <malloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	61e8      	str	r0, [r5, #28]
 80072a4:	b920      	cbnz	r0, 80072b0 <_Bfree+0x20>
 80072a6:	4b09      	ldr	r3, [pc, #36]	@ (80072cc <_Bfree+0x3c>)
 80072a8:	4809      	ldr	r0, [pc, #36]	@ (80072d0 <_Bfree+0x40>)
 80072aa:	218f      	movs	r1, #143	@ 0x8f
 80072ac:	f000 fd6e 	bl	8007d8c <__assert_func>
 80072b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072b4:	6006      	str	r6, [r0, #0]
 80072b6:	60c6      	str	r6, [r0, #12]
 80072b8:	b13c      	cbz	r4, 80072ca <_Bfree+0x3a>
 80072ba:	69eb      	ldr	r3, [r5, #28]
 80072bc:	6862      	ldr	r2, [r4, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072c4:	6021      	str	r1, [r4, #0]
 80072c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	080084d5 	.word	0x080084d5
 80072d0:	08008555 	.word	0x08008555

080072d4 <__multadd>:
 80072d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d8:	690d      	ldr	r5, [r1, #16]
 80072da:	4607      	mov	r7, r0
 80072dc:	460c      	mov	r4, r1
 80072de:	461e      	mov	r6, r3
 80072e0:	f101 0c14 	add.w	ip, r1, #20
 80072e4:	2000      	movs	r0, #0
 80072e6:	f8dc 3000 	ldr.w	r3, [ip]
 80072ea:	b299      	uxth	r1, r3
 80072ec:	fb02 6101 	mla	r1, r2, r1, r6
 80072f0:	0c1e      	lsrs	r6, r3, #16
 80072f2:	0c0b      	lsrs	r3, r1, #16
 80072f4:	fb02 3306 	mla	r3, r2, r6, r3
 80072f8:	b289      	uxth	r1, r1
 80072fa:	3001      	adds	r0, #1
 80072fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007300:	4285      	cmp	r5, r0
 8007302:	f84c 1b04 	str.w	r1, [ip], #4
 8007306:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800730a:	dcec      	bgt.n	80072e6 <__multadd+0x12>
 800730c:	b30e      	cbz	r6, 8007352 <__multadd+0x7e>
 800730e:	68a3      	ldr	r3, [r4, #8]
 8007310:	42ab      	cmp	r3, r5
 8007312:	dc19      	bgt.n	8007348 <__multadd+0x74>
 8007314:	6861      	ldr	r1, [r4, #4]
 8007316:	4638      	mov	r0, r7
 8007318:	3101      	adds	r1, #1
 800731a:	f7ff ff79 	bl	8007210 <_Balloc>
 800731e:	4680      	mov	r8, r0
 8007320:	b928      	cbnz	r0, 800732e <__multadd+0x5a>
 8007322:	4602      	mov	r2, r0
 8007324:	4b0c      	ldr	r3, [pc, #48]	@ (8007358 <__multadd+0x84>)
 8007326:	480d      	ldr	r0, [pc, #52]	@ (800735c <__multadd+0x88>)
 8007328:	21ba      	movs	r1, #186	@ 0xba
 800732a:	f000 fd2f 	bl	8007d8c <__assert_func>
 800732e:	6922      	ldr	r2, [r4, #16]
 8007330:	3202      	adds	r2, #2
 8007332:	f104 010c 	add.w	r1, r4, #12
 8007336:	0092      	lsls	r2, r2, #2
 8007338:	300c      	adds	r0, #12
 800733a:	f000 fd19 	bl	8007d70 <memcpy>
 800733e:	4621      	mov	r1, r4
 8007340:	4638      	mov	r0, r7
 8007342:	f7ff ffa5 	bl	8007290 <_Bfree>
 8007346:	4644      	mov	r4, r8
 8007348:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800734c:	3501      	adds	r5, #1
 800734e:	615e      	str	r6, [r3, #20]
 8007350:	6125      	str	r5, [r4, #16]
 8007352:	4620      	mov	r0, r4
 8007354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007358:	08008544 	.word	0x08008544
 800735c:	08008555 	.word	0x08008555

08007360 <__hi0bits>:
 8007360:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007364:	4603      	mov	r3, r0
 8007366:	bf36      	itet	cc
 8007368:	0403      	lslcc	r3, r0, #16
 800736a:	2000      	movcs	r0, #0
 800736c:	2010      	movcc	r0, #16
 800736e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007372:	bf3c      	itt	cc
 8007374:	021b      	lslcc	r3, r3, #8
 8007376:	3008      	addcc	r0, #8
 8007378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800737c:	bf3c      	itt	cc
 800737e:	011b      	lslcc	r3, r3, #4
 8007380:	3004      	addcc	r0, #4
 8007382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007386:	bf3c      	itt	cc
 8007388:	009b      	lslcc	r3, r3, #2
 800738a:	3002      	addcc	r0, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	db05      	blt.n	800739c <__hi0bits+0x3c>
 8007390:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007394:	f100 0001 	add.w	r0, r0, #1
 8007398:	bf08      	it	eq
 800739a:	2020      	moveq	r0, #32
 800739c:	4770      	bx	lr

0800739e <__lo0bits>:
 800739e:	6803      	ldr	r3, [r0, #0]
 80073a0:	4602      	mov	r2, r0
 80073a2:	f013 0007 	ands.w	r0, r3, #7
 80073a6:	d00b      	beq.n	80073c0 <__lo0bits+0x22>
 80073a8:	07d9      	lsls	r1, r3, #31
 80073aa:	d421      	bmi.n	80073f0 <__lo0bits+0x52>
 80073ac:	0798      	lsls	r0, r3, #30
 80073ae:	bf49      	itett	mi
 80073b0:	085b      	lsrmi	r3, r3, #1
 80073b2:	089b      	lsrpl	r3, r3, #2
 80073b4:	2001      	movmi	r0, #1
 80073b6:	6013      	strmi	r3, [r2, #0]
 80073b8:	bf5c      	itt	pl
 80073ba:	6013      	strpl	r3, [r2, #0]
 80073bc:	2002      	movpl	r0, #2
 80073be:	4770      	bx	lr
 80073c0:	b299      	uxth	r1, r3
 80073c2:	b909      	cbnz	r1, 80073c8 <__lo0bits+0x2a>
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	2010      	movs	r0, #16
 80073c8:	b2d9      	uxtb	r1, r3
 80073ca:	b909      	cbnz	r1, 80073d0 <__lo0bits+0x32>
 80073cc:	3008      	adds	r0, #8
 80073ce:	0a1b      	lsrs	r3, r3, #8
 80073d0:	0719      	lsls	r1, r3, #28
 80073d2:	bf04      	itt	eq
 80073d4:	091b      	lsreq	r3, r3, #4
 80073d6:	3004      	addeq	r0, #4
 80073d8:	0799      	lsls	r1, r3, #30
 80073da:	bf04      	itt	eq
 80073dc:	089b      	lsreq	r3, r3, #2
 80073de:	3002      	addeq	r0, #2
 80073e0:	07d9      	lsls	r1, r3, #31
 80073e2:	d403      	bmi.n	80073ec <__lo0bits+0x4e>
 80073e4:	085b      	lsrs	r3, r3, #1
 80073e6:	f100 0001 	add.w	r0, r0, #1
 80073ea:	d003      	beq.n	80073f4 <__lo0bits+0x56>
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	4770      	bx	lr
 80073f0:	2000      	movs	r0, #0
 80073f2:	4770      	bx	lr
 80073f4:	2020      	movs	r0, #32
 80073f6:	4770      	bx	lr

080073f8 <__i2b>:
 80073f8:	b510      	push	{r4, lr}
 80073fa:	460c      	mov	r4, r1
 80073fc:	2101      	movs	r1, #1
 80073fe:	f7ff ff07 	bl	8007210 <_Balloc>
 8007402:	4602      	mov	r2, r0
 8007404:	b928      	cbnz	r0, 8007412 <__i2b+0x1a>
 8007406:	4b05      	ldr	r3, [pc, #20]	@ (800741c <__i2b+0x24>)
 8007408:	4805      	ldr	r0, [pc, #20]	@ (8007420 <__i2b+0x28>)
 800740a:	f240 1145 	movw	r1, #325	@ 0x145
 800740e:	f000 fcbd 	bl	8007d8c <__assert_func>
 8007412:	2301      	movs	r3, #1
 8007414:	6144      	str	r4, [r0, #20]
 8007416:	6103      	str	r3, [r0, #16]
 8007418:	bd10      	pop	{r4, pc}
 800741a:	bf00      	nop
 800741c:	08008544 	.word	0x08008544
 8007420:	08008555 	.word	0x08008555

08007424 <__multiply>:
 8007424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	4614      	mov	r4, r2
 800742a:	690a      	ldr	r2, [r1, #16]
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	bfa8      	it	ge
 8007432:	4623      	movge	r3, r4
 8007434:	460f      	mov	r7, r1
 8007436:	bfa4      	itt	ge
 8007438:	460c      	movge	r4, r1
 800743a:	461f      	movge	r7, r3
 800743c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007440:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007444:	68a3      	ldr	r3, [r4, #8]
 8007446:	6861      	ldr	r1, [r4, #4]
 8007448:	eb0a 0609 	add.w	r6, sl, r9
 800744c:	42b3      	cmp	r3, r6
 800744e:	b085      	sub	sp, #20
 8007450:	bfb8      	it	lt
 8007452:	3101      	addlt	r1, #1
 8007454:	f7ff fedc 	bl	8007210 <_Balloc>
 8007458:	b930      	cbnz	r0, 8007468 <__multiply+0x44>
 800745a:	4602      	mov	r2, r0
 800745c:	4b44      	ldr	r3, [pc, #272]	@ (8007570 <__multiply+0x14c>)
 800745e:	4845      	ldr	r0, [pc, #276]	@ (8007574 <__multiply+0x150>)
 8007460:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007464:	f000 fc92 	bl	8007d8c <__assert_func>
 8007468:	f100 0514 	add.w	r5, r0, #20
 800746c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007470:	462b      	mov	r3, r5
 8007472:	2200      	movs	r2, #0
 8007474:	4543      	cmp	r3, r8
 8007476:	d321      	bcc.n	80074bc <__multiply+0x98>
 8007478:	f107 0114 	add.w	r1, r7, #20
 800747c:	f104 0214 	add.w	r2, r4, #20
 8007480:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007484:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007488:	9302      	str	r3, [sp, #8]
 800748a:	1b13      	subs	r3, r2, r4
 800748c:	3b15      	subs	r3, #21
 800748e:	f023 0303 	bic.w	r3, r3, #3
 8007492:	3304      	adds	r3, #4
 8007494:	f104 0715 	add.w	r7, r4, #21
 8007498:	42ba      	cmp	r2, r7
 800749a:	bf38      	it	cc
 800749c:	2304      	movcc	r3, #4
 800749e:	9301      	str	r3, [sp, #4]
 80074a0:	9b02      	ldr	r3, [sp, #8]
 80074a2:	9103      	str	r1, [sp, #12]
 80074a4:	428b      	cmp	r3, r1
 80074a6:	d80c      	bhi.n	80074c2 <__multiply+0x9e>
 80074a8:	2e00      	cmp	r6, #0
 80074aa:	dd03      	ble.n	80074b4 <__multiply+0x90>
 80074ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d05b      	beq.n	800756c <__multiply+0x148>
 80074b4:	6106      	str	r6, [r0, #16]
 80074b6:	b005      	add	sp, #20
 80074b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074bc:	f843 2b04 	str.w	r2, [r3], #4
 80074c0:	e7d8      	b.n	8007474 <__multiply+0x50>
 80074c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80074c6:	f1ba 0f00 	cmp.w	sl, #0
 80074ca:	d024      	beq.n	8007516 <__multiply+0xf2>
 80074cc:	f104 0e14 	add.w	lr, r4, #20
 80074d0:	46a9      	mov	r9, r5
 80074d2:	f04f 0c00 	mov.w	ip, #0
 80074d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074da:	f8d9 3000 	ldr.w	r3, [r9]
 80074de:	fa1f fb87 	uxth.w	fp, r7
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80074e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80074ec:	f8d9 7000 	ldr.w	r7, [r9]
 80074f0:	4463      	add	r3, ip
 80074f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80074fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80074fe:	b29b      	uxth	r3, r3
 8007500:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007504:	4572      	cmp	r2, lr
 8007506:	f849 3b04 	str.w	r3, [r9], #4
 800750a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800750e:	d8e2      	bhi.n	80074d6 <__multiply+0xb2>
 8007510:	9b01      	ldr	r3, [sp, #4]
 8007512:	f845 c003 	str.w	ip, [r5, r3]
 8007516:	9b03      	ldr	r3, [sp, #12]
 8007518:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800751c:	3104      	adds	r1, #4
 800751e:	f1b9 0f00 	cmp.w	r9, #0
 8007522:	d021      	beq.n	8007568 <__multiply+0x144>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	f104 0c14 	add.w	ip, r4, #20
 800752a:	46ae      	mov	lr, r5
 800752c:	f04f 0a00 	mov.w	sl, #0
 8007530:	f8bc b000 	ldrh.w	fp, [ip]
 8007534:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007538:	fb09 770b 	mla	r7, r9, fp, r7
 800753c:	4457      	add	r7, sl
 800753e:	b29b      	uxth	r3, r3
 8007540:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007544:	f84e 3b04 	str.w	r3, [lr], #4
 8007548:	f85c 3b04 	ldr.w	r3, [ip], #4
 800754c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007550:	f8be 3000 	ldrh.w	r3, [lr]
 8007554:	fb09 330a 	mla	r3, r9, sl, r3
 8007558:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800755c:	4562      	cmp	r2, ip
 800755e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007562:	d8e5      	bhi.n	8007530 <__multiply+0x10c>
 8007564:	9f01      	ldr	r7, [sp, #4]
 8007566:	51eb      	str	r3, [r5, r7]
 8007568:	3504      	adds	r5, #4
 800756a:	e799      	b.n	80074a0 <__multiply+0x7c>
 800756c:	3e01      	subs	r6, #1
 800756e:	e79b      	b.n	80074a8 <__multiply+0x84>
 8007570:	08008544 	.word	0x08008544
 8007574:	08008555 	.word	0x08008555

08007578 <__pow5mult>:
 8007578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800757c:	4615      	mov	r5, r2
 800757e:	f012 0203 	ands.w	r2, r2, #3
 8007582:	4607      	mov	r7, r0
 8007584:	460e      	mov	r6, r1
 8007586:	d007      	beq.n	8007598 <__pow5mult+0x20>
 8007588:	4c25      	ldr	r4, [pc, #148]	@ (8007620 <__pow5mult+0xa8>)
 800758a:	3a01      	subs	r2, #1
 800758c:	2300      	movs	r3, #0
 800758e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007592:	f7ff fe9f 	bl	80072d4 <__multadd>
 8007596:	4606      	mov	r6, r0
 8007598:	10ad      	asrs	r5, r5, #2
 800759a:	d03d      	beq.n	8007618 <__pow5mult+0xa0>
 800759c:	69fc      	ldr	r4, [r7, #28]
 800759e:	b97c      	cbnz	r4, 80075c0 <__pow5mult+0x48>
 80075a0:	2010      	movs	r0, #16
 80075a2:	f7ff fd7f 	bl	80070a4 <malloc>
 80075a6:	4602      	mov	r2, r0
 80075a8:	61f8      	str	r0, [r7, #28]
 80075aa:	b928      	cbnz	r0, 80075b8 <__pow5mult+0x40>
 80075ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007624 <__pow5mult+0xac>)
 80075ae:	481e      	ldr	r0, [pc, #120]	@ (8007628 <__pow5mult+0xb0>)
 80075b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80075b4:	f000 fbea 	bl	8007d8c <__assert_func>
 80075b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075bc:	6004      	str	r4, [r0, #0]
 80075be:	60c4      	str	r4, [r0, #12]
 80075c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80075c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075c8:	b94c      	cbnz	r4, 80075de <__pow5mult+0x66>
 80075ca:	f240 2171 	movw	r1, #625	@ 0x271
 80075ce:	4638      	mov	r0, r7
 80075d0:	f7ff ff12 	bl	80073f8 <__i2b>
 80075d4:	2300      	movs	r3, #0
 80075d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80075da:	4604      	mov	r4, r0
 80075dc:	6003      	str	r3, [r0, #0]
 80075de:	f04f 0900 	mov.w	r9, #0
 80075e2:	07eb      	lsls	r3, r5, #31
 80075e4:	d50a      	bpl.n	80075fc <__pow5mult+0x84>
 80075e6:	4631      	mov	r1, r6
 80075e8:	4622      	mov	r2, r4
 80075ea:	4638      	mov	r0, r7
 80075ec:	f7ff ff1a 	bl	8007424 <__multiply>
 80075f0:	4631      	mov	r1, r6
 80075f2:	4680      	mov	r8, r0
 80075f4:	4638      	mov	r0, r7
 80075f6:	f7ff fe4b 	bl	8007290 <_Bfree>
 80075fa:	4646      	mov	r6, r8
 80075fc:	106d      	asrs	r5, r5, #1
 80075fe:	d00b      	beq.n	8007618 <__pow5mult+0xa0>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	b938      	cbnz	r0, 8007614 <__pow5mult+0x9c>
 8007604:	4622      	mov	r2, r4
 8007606:	4621      	mov	r1, r4
 8007608:	4638      	mov	r0, r7
 800760a:	f7ff ff0b 	bl	8007424 <__multiply>
 800760e:	6020      	str	r0, [r4, #0]
 8007610:	f8c0 9000 	str.w	r9, [r0]
 8007614:	4604      	mov	r4, r0
 8007616:	e7e4      	b.n	80075e2 <__pow5mult+0x6a>
 8007618:	4630      	mov	r0, r6
 800761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761e:	bf00      	nop
 8007620:	080085b0 	.word	0x080085b0
 8007624:	080084d5 	.word	0x080084d5
 8007628:	08008555 	.word	0x08008555

0800762c <__lshift>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	460c      	mov	r4, r1
 8007632:	6849      	ldr	r1, [r1, #4]
 8007634:	6923      	ldr	r3, [r4, #16]
 8007636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800763a:	68a3      	ldr	r3, [r4, #8]
 800763c:	4607      	mov	r7, r0
 800763e:	4691      	mov	r9, r2
 8007640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007644:	f108 0601 	add.w	r6, r8, #1
 8007648:	42b3      	cmp	r3, r6
 800764a:	db0b      	blt.n	8007664 <__lshift+0x38>
 800764c:	4638      	mov	r0, r7
 800764e:	f7ff fddf 	bl	8007210 <_Balloc>
 8007652:	4605      	mov	r5, r0
 8007654:	b948      	cbnz	r0, 800766a <__lshift+0x3e>
 8007656:	4602      	mov	r2, r0
 8007658:	4b28      	ldr	r3, [pc, #160]	@ (80076fc <__lshift+0xd0>)
 800765a:	4829      	ldr	r0, [pc, #164]	@ (8007700 <__lshift+0xd4>)
 800765c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007660:	f000 fb94 	bl	8007d8c <__assert_func>
 8007664:	3101      	adds	r1, #1
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	e7ee      	b.n	8007648 <__lshift+0x1c>
 800766a:	2300      	movs	r3, #0
 800766c:	f100 0114 	add.w	r1, r0, #20
 8007670:	f100 0210 	add.w	r2, r0, #16
 8007674:	4618      	mov	r0, r3
 8007676:	4553      	cmp	r3, sl
 8007678:	db33      	blt.n	80076e2 <__lshift+0xb6>
 800767a:	6920      	ldr	r0, [r4, #16]
 800767c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007680:	f104 0314 	add.w	r3, r4, #20
 8007684:	f019 091f 	ands.w	r9, r9, #31
 8007688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800768c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007690:	d02b      	beq.n	80076ea <__lshift+0xbe>
 8007692:	f1c9 0e20 	rsb	lr, r9, #32
 8007696:	468a      	mov	sl, r1
 8007698:	2200      	movs	r2, #0
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	fa00 f009 	lsl.w	r0, r0, r9
 80076a0:	4310      	orrs	r0, r2
 80076a2:	f84a 0b04 	str.w	r0, [sl], #4
 80076a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076aa:	459c      	cmp	ip, r3
 80076ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80076b0:	d8f3      	bhi.n	800769a <__lshift+0x6e>
 80076b2:	ebac 0304 	sub.w	r3, ip, r4
 80076b6:	3b15      	subs	r3, #21
 80076b8:	f023 0303 	bic.w	r3, r3, #3
 80076bc:	3304      	adds	r3, #4
 80076be:	f104 0015 	add.w	r0, r4, #21
 80076c2:	4584      	cmp	ip, r0
 80076c4:	bf38      	it	cc
 80076c6:	2304      	movcc	r3, #4
 80076c8:	50ca      	str	r2, [r1, r3]
 80076ca:	b10a      	cbz	r2, 80076d0 <__lshift+0xa4>
 80076cc:	f108 0602 	add.w	r6, r8, #2
 80076d0:	3e01      	subs	r6, #1
 80076d2:	4638      	mov	r0, r7
 80076d4:	612e      	str	r6, [r5, #16]
 80076d6:	4621      	mov	r1, r4
 80076d8:	f7ff fdda 	bl	8007290 <_Bfree>
 80076dc:	4628      	mov	r0, r5
 80076de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80076e6:	3301      	adds	r3, #1
 80076e8:	e7c5      	b.n	8007676 <__lshift+0x4a>
 80076ea:	3904      	subs	r1, #4
 80076ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80076f4:	459c      	cmp	ip, r3
 80076f6:	d8f9      	bhi.n	80076ec <__lshift+0xc0>
 80076f8:	e7ea      	b.n	80076d0 <__lshift+0xa4>
 80076fa:	bf00      	nop
 80076fc:	08008544 	.word	0x08008544
 8007700:	08008555 	.word	0x08008555

08007704 <__mcmp>:
 8007704:	690a      	ldr	r2, [r1, #16]
 8007706:	4603      	mov	r3, r0
 8007708:	6900      	ldr	r0, [r0, #16]
 800770a:	1a80      	subs	r0, r0, r2
 800770c:	b530      	push	{r4, r5, lr}
 800770e:	d10e      	bne.n	800772e <__mcmp+0x2a>
 8007710:	3314      	adds	r3, #20
 8007712:	3114      	adds	r1, #20
 8007714:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007718:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800771c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007724:	4295      	cmp	r5, r2
 8007726:	d003      	beq.n	8007730 <__mcmp+0x2c>
 8007728:	d205      	bcs.n	8007736 <__mcmp+0x32>
 800772a:	f04f 30ff 	mov.w	r0, #4294967295
 800772e:	bd30      	pop	{r4, r5, pc}
 8007730:	42a3      	cmp	r3, r4
 8007732:	d3f3      	bcc.n	800771c <__mcmp+0x18>
 8007734:	e7fb      	b.n	800772e <__mcmp+0x2a>
 8007736:	2001      	movs	r0, #1
 8007738:	e7f9      	b.n	800772e <__mcmp+0x2a>
	...

0800773c <__mdiff>:
 800773c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	4689      	mov	r9, r1
 8007742:	4606      	mov	r6, r0
 8007744:	4611      	mov	r1, r2
 8007746:	4648      	mov	r0, r9
 8007748:	4614      	mov	r4, r2
 800774a:	f7ff ffdb 	bl	8007704 <__mcmp>
 800774e:	1e05      	subs	r5, r0, #0
 8007750:	d112      	bne.n	8007778 <__mdiff+0x3c>
 8007752:	4629      	mov	r1, r5
 8007754:	4630      	mov	r0, r6
 8007756:	f7ff fd5b 	bl	8007210 <_Balloc>
 800775a:	4602      	mov	r2, r0
 800775c:	b928      	cbnz	r0, 800776a <__mdiff+0x2e>
 800775e:	4b3f      	ldr	r3, [pc, #252]	@ (800785c <__mdiff+0x120>)
 8007760:	f240 2137 	movw	r1, #567	@ 0x237
 8007764:	483e      	ldr	r0, [pc, #248]	@ (8007860 <__mdiff+0x124>)
 8007766:	f000 fb11 	bl	8007d8c <__assert_func>
 800776a:	2301      	movs	r3, #1
 800776c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007770:	4610      	mov	r0, r2
 8007772:	b003      	add	sp, #12
 8007774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007778:	bfbc      	itt	lt
 800777a:	464b      	movlt	r3, r9
 800777c:	46a1      	movlt	r9, r4
 800777e:	4630      	mov	r0, r6
 8007780:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007784:	bfba      	itte	lt
 8007786:	461c      	movlt	r4, r3
 8007788:	2501      	movlt	r5, #1
 800778a:	2500      	movge	r5, #0
 800778c:	f7ff fd40 	bl	8007210 <_Balloc>
 8007790:	4602      	mov	r2, r0
 8007792:	b918      	cbnz	r0, 800779c <__mdiff+0x60>
 8007794:	4b31      	ldr	r3, [pc, #196]	@ (800785c <__mdiff+0x120>)
 8007796:	f240 2145 	movw	r1, #581	@ 0x245
 800779a:	e7e3      	b.n	8007764 <__mdiff+0x28>
 800779c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80077a0:	6926      	ldr	r6, [r4, #16]
 80077a2:	60c5      	str	r5, [r0, #12]
 80077a4:	f109 0310 	add.w	r3, r9, #16
 80077a8:	f109 0514 	add.w	r5, r9, #20
 80077ac:	f104 0e14 	add.w	lr, r4, #20
 80077b0:	f100 0b14 	add.w	fp, r0, #20
 80077b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80077b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	46d9      	mov	r9, fp
 80077c0:	f04f 0c00 	mov.w	ip, #0
 80077c4:	9b01      	ldr	r3, [sp, #4]
 80077c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80077ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	fa1f f38a 	uxth.w	r3, sl
 80077d4:	4619      	mov	r1, r3
 80077d6:	b283      	uxth	r3, r0
 80077d8:	1acb      	subs	r3, r1, r3
 80077da:	0c00      	lsrs	r0, r0, #16
 80077dc:	4463      	add	r3, ip
 80077de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80077e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80077ec:	4576      	cmp	r6, lr
 80077ee:	f849 3b04 	str.w	r3, [r9], #4
 80077f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077f6:	d8e5      	bhi.n	80077c4 <__mdiff+0x88>
 80077f8:	1b33      	subs	r3, r6, r4
 80077fa:	3b15      	subs	r3, #21
 80077fc:	f023 0303 	bic.w	r3, r3, #3
 8007800:	3415      	adds	r4, #21
 8007802:	3304      	adds	r3, #4
 8007804:	42a6      	cmp	r6, r4
 8007806:	bf38      	it	cc
 8007808:	2304      	movcc	r3, #4
 800780a:	441d      	add	r5, r3
 800780c:	445b      	add	r3, fp
 800780e:	461e      	mov	r6, r3
 8007810:	462c      	mov	r4, r5
 8007812:	4544      	cmp	r4, r8
 8007814:	d30e      	bcc.n	8007834 <__mdiff+0xf8>
 8007816:	f108 0103 	add.w	r1, r8, #3
 800781a:	1b49      	subs	r1, r1, r5
 800781c:	f021 0103 	bic.w	r1, r1, #3
 8007820:	3d03      	subs	r5, #3
 8007822:	45a8      	cmp	r8, r5
 8007824:	bf38      	it	cc
 8007826:	2100      	movcc	r1, #0
 8007828:	440b      	add	r3, r1
 800782a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800782e:	b191      	cbz	r1, 8007856 <__mdiff+0x11a>
 8007830:	6117      	str	r7, [r2, #16]
 8007832:	e79d      	b.n	8007770 <__mdiff+0x34>
 8007834:	f854 1b04 	ldr.w	r1, [r4], #4
 8007838:	46e6      	mov	lr, ip
 800783a:	0c08      	lsrs	r0, r1, #16
 800783c:	fa1c fc81 	uxtah	ip, ip, r1
 8007840:	4471      	add	r1, lr
 8007842:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007846:	b289      	uxth	r1, r1
 8007848:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800784c:	f846 1b04 	str.w	r1, [r6], #4
 8007850:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007854:	e7dd      	b.n	8007812 <__mdiff+0xd6>
 8007856:	3f01      	subs	r7, #1
 8007858:	e7e7      	b.n	800782a <__mdiff+0xee>
 800785a:	bf00      	nop
 800785c:	08008544 	.word	0x08008544
 8007860:	08008555 	.word	0x08008555

08007864 <__d2b>:
 8007864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007868:	460f      	mov	r7, r1
 800786a:	2101      	movs	r1, #1
 800786c:	ec59 8b10 	vmov	r8, r9, d0
 8007870:	4616      	mov	r6, r2
 8007872:	f7ff fccd 	bl	8007210 <_Balloc>
 8007876:	4604      	mov	r4, r0
 8007878:	b930      	cbnz	r0, 8007888 <__d2b+0x24>
 800787a:	4602      	mov	r2, r0
 800787c:	4b23      	ldr	r3, [pc, #140]	@ (800790c <__d2b+0xa8>)
 800787e:	4824      	ldr	r0, [pc, #144]	@ (8007910 <__d2b+0xac>)
 8007880:	f240 310f 	movw	r1, #783	@ 0x30f
 8007884:	f000 fa82 	bl	8007d8c <__assert_func>
 8007888:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800788c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007890:	b10d      	cbz	r5, 8007896 <__d2b+0x32>
 8007892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	f1b8 0300 	subs.w	r3, r8, #0
 800789c:	d023      	beq.n	80078e6 <__d2b+0x82>
 800789e:	4668      	mov	r0, sp
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	f7ff fd7c 	bl	800739e <__lo0bits>
 80078a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078aa:	b1d0      	cbz	r0, 80078e2 <__d2b+0x7e>
 80078ac:	f1c0 0320 	rsb	r3, r0, #32
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	430b      	orrs	r3, r1
 80078b6:	40c2      	lsrs	r2, r0
 80078b8:	6163      	str	r3, [r4, #20]
 80078ba:	9201      	str	r2, [sp, #4]
 80078bc:	9b01      	ldr	r3, [sp, #4]
 80078be:	61a3      	str	r3, [r4, #24]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bf0c      	ite	eq
 80078c4:	2201      	moveq	r2, #1
 80078c6:	2202      	movne	r2, #2
 80078c8:	6122      	str	r2, [r4, #16]
 80078ca:	b1a5      	cbz	r5, 80078f6 <__d2b+0x92>
 80078cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80078d0:	4405      	add	r5, r0
 80078d2:	603d      	str	r5, [r7, #0]
 80078d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80078d8:	6030      	str	r0, [r6, #0]
 80078da:	4620      	mov	r0, r4
 80078dc:	b003      	add	sp, #12
 80078de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078e2:	6161      	str	r1, [r4, #20]
 80078e4:	e7ea      	b.n	80078bc <__d2b+0x58>
 80078e6:	a801      	add	r0, sp, #4
 80078e8:	f7ff fd59 	bl	800739e <__lo0bits>
 80078ec:	9b01      	ldr	r3, [sp, #4]
 80078ee:	6163      	str	r3, [r4, #20]
 80078f0:	3020      	adds	r0, #32
 80078f2:	2201      	movs	r2, #1
 80078f4:	e7e8      	b.n	80078c8 <__d2b+0x64>
 80078f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80078fe:	6038      	str	r0, [r7, #0]
 8007900:	6918      	ldr	r0, [r3, #16]
 8007902:	f7ff fd2d 	bl	8007360 <__hi0bits>
 8007906:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800790a:	e7e5      	b.n	80078d8 <__d2b+0x74>
 800790c:	08008544 	.word	0x08008544
 8007910:	08008555 	.word	0x08008555

08007914 <__ssputs_r>:
 8007914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	688e      	ldr	r6, [r1, #8]
 800791a:	461f      	mov	r7, r3
 800791c:	42be      	cmp	r6, r7
 800791e:	680b      	ldr	r3, [r1, #0]
 8007920:	4682      	mov	sl, r0
 8007922:	460c      	mov	r4, r1
 8007924:	4690      	mov	r8, r2
 8007926:	d82d      	bhi.n	8007984 <__ssputs_r+0x70>
 8007928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800792c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007930:	d026      	beq.n	8007980 <__ssputs_r+0x6c>
 8007932:	6965      	ldr	r5, [r4, #20]
 8007934:	6909      	ldr	r1, [r1, #16]
 8007936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800793a:	eba3 0901 	sub.w	r9, r3, r1
 800793e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007942:	1c7b      	adds	r3, r7, #1
 8007944:	444b      	add	r3, r9
 8007946:	106d      	asrs	r5, r5, #1
 8007948:	429d      	cmp	r5, r3
 800794a:	bf38      	it	cc
 800794c:	461d      	movcc	r5, r3
 800794e:	0553      	lsls	r3, r2, #21
 8007950:	d527      	bpl.n	80079a2 <__ssputs_r+0x8e>
 8007952:	4629      	mov	r1, r5
 8007954:	f7ff fbd0 	bl	80070f8 <_malloc_r>
 8007958:	4606      	mov	r6, r0
 800795a:	b360      	cbz	r0, 80079b6 <__ssputs_r+0xa2>
 800795c:	6921      	ldr	r1, [r4, #16]
 800795e:	464a      	mov	r2, r9
 8007960:	f000 fa06 	bl	8007d70 <memcpy>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800796a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800796e:	81a3      	strh	r3, [r4, #12]
 8007970:	6126      	str	r6, [r4, #16]
 8007972:	6165      	str	r5, [r4, #20]
 8007974:	444e      	add	r6, r9
 8007976:	eba5 0509 	sub.w	r5, r5, r9
 800797a:	6026      	str	r6, [r4, #0]
 800797c:	60a5      	str	r5, [r4, #8]
 800797e:	463e      	mov	r6, r7
 8007980:	42be      	cmp	r6, r7
 8007982:	d900      	bls.n	8007986 <__ssputs_r+0x72>
 8007984:	463e      	mov	r6, r7
 8007986:	6820      	ldr	r0, [r4, #0]
 8007988:	4632      	mov	r2, r6
 800798a:	4641      	mov	r1, r8
 800798c:	f000 f9c6 	bl	8007d1c <memmove>
 8007990:	68a3      	ldr	r3, [r4, #8]
 8007992:	1b9b      	subs	r3, r3, r6
 8007994:	60a3      	str	r3, [r4, #8]
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	4433      	add	r3, r6
 800799a:	6023      	str	r3, [r4, #0]
 800799c:	2000      	movs	r0, #0
 800799e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a2:	462a      	mov	r2, r5
 80079a4:	f000 fa36 	bl	8007e14 <_realloc_r>
 80079a8:	4606      	mov	r6, r0
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d1e0      	bne.n	8007970 <__ssputs_r+0x5c>
 80079ae:	6921      	ldr	r1, [r4, #16]
 80079b0:	4650      	mov	r0, sl
 80079b2:	f7ff fb2d 	bl	8007010 <_free_r>
 80079b6:	230c      	movs	r3, #12
 80079b8:	f8ca 3000 	str.w	r3, [sl]
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	f04f 30ff 	mov.w	r0, #4294967295
 80079c8:	e7e9      	b.n	800799e <__ssputs_r+0x8a>
	...

080079cc <_svfiprintf_r>:
 80079cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d0:	4698      	mov	r8, r3
 80079d2:	898b      	ldrh	r3, [r1, #12]
 80079d4:	061b      	lsls	r3, r3, #24
 80079d6:	b09d      	sub	sp, #116	@ 0x74
 80079d8:	4607      	mov	r7, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	4614      	mov	r4, r2
 80079de:	d510      	bpl.n	8007a02 <_svfiprintf_r+0x36>
 80079e0:	690b      	ldr	r3, [r1, #16]
 80079e2:	b973      	cbnz	r3, 8007a02 <_svfiprintf_r+0x36>
 80079e4:	2140      	movs	r1, #64	@ 0x40
 80079e6:	f7ff fb87 	bl	80070f8 <_malloc_r>
 80079ea:	6028      	str	r0, [r5, #0]
 80079ec:	6128      	str	r0, [r5, #16]
 80079ee:	b930      	cbnz	r0, 80079fe <_svfiprintf_r+0x32>
 80079f0:	230c      	movs	r3, #12
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	b01d      	add	sp, #116	@ 0x74
 80079fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fe:	2340      	movs	r3, #64	@ 0x40
 8007a00:	616b      	str	r3, [r5, #20]
 8007a02:	2300      	movs	r3, #0
 8007a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a06:	2320      	movs	r3, #32
 8007a08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a10:	2330      	movs	r3, #48	@ 0x30
 8007a12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007bb0 <_svfiprintf_r+0x1e4>
 8007a16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a1a:	f04f 0901 	mov.w	r9, #1
 8007a1e:	4623      	mov	r3, r4
 8007a20:	469a      	mov	sl, r3
 8007a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a26:	b10a      	cbz	r2, 8007a2c <_svfiprintf_r+0x60>
 8007a28:	2a25      	cmp	r2, #37	@ 0x25
 8007a2a:	d1f9      	bne.n	8007a20 <_svfiprintf_r+0x54>
 8007a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a30:	d00b      	beq.n	8007a4a <_svfiprintf_r+0x7e>
 8007a32:	465b      	mov	r3, fp
 8007a34:	4622      	mov	r2, r4
 8007a36:	4629      	mov	r1, r5
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7ff ff6b 	bl	8007914 <__ssputs_r>
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f000 80a7 	beq.w	8007b92 <_svfiprintf_r+0x1c6>
 8007a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a46:	445a      	add	r2, fp
 8007a48:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 809f 	beq.w	8007b92 <_svfiprintf_r+0x1c6>
 8007a54:	2300      	movs	r3, #0
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a5e:	f10a 0a01 	add.w	sl, sl, #1
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	9307      	str	r3, [sp, #28]
 8007a66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a6c:	4654      	mov	r4, sl
 8007a6e:	2205      	movs	r2, #5
 8007a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a74:	484e      	ldr	r0, [pc, #312]	@ (8007bb0 <_svfiprintf_r+0x1e4>)
 8007a76:	f7f8 fbab 	bl	80001d0 <memchr>
 8007a7a:	9a04      	ldr	r2, [sp, #16]
 8007a7c:	b9d8      	cbnz	r0, 8007ab6 <_svfiprintf_r+0xea>
 8007a7e:	06d0      	lsls	r0, r2, #27
 8007a80:	bf44      	itt	mi
 8007a82:	2320      	movmi	r3, #32
 8007a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a88:	0711      	lsls	r1, r2, #28
 8007a8a:	bf44      	itt	mi
 8007a8c:	232b      	movmi	r3, #43	@ 0x2b
 8007a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a92:	f89a 3000 	ldrb.w	r3, [sl]
 8007a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a98:	d015      	beq.n	8007ac6 <_svfiprintf_r+0xfa>
 8007a9a:	9a07      	ldr	r2, [sp, #28]
 8007a9c:	4654      	mov	r4, sl
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	f04f 0c0a 	mov.w	ip, #10
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aaa:	3b30      	subs	r3, #48	@ 0x30
 8007aac:	2b09      	cmp	r3, #9
 8007aae:	d94b      	bls.n	8007b48 <_svfiprintf_r+0x17c>
 8007ab0:	b1b0      	cbz	r0, 8007ae0 <_svfiprintf_r+0x114>
 8007ab2:	9207      	str	r2, [sp, #28]
 8007ab4:	e014      	b.n	8007ae0 <_svfiprintf_r+0x114>
 8007ab6:	eba0 0308 	sub.w	r3, r0, r8
 8007aba:	fa09 f303 	lsl.w	r3, r9, r3
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	46a2      	mov	sl, r4
 8007ac4:	e7d2      	b.n	8007a6c <_svfiprintf_r+0xa0>
 8007ac6:	9b03      	ldr	r3, [sp, #12]
 8007ac8:	1d19      	adds	r1, r3, #4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	9103      	str	r1, [sp, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfbb      	ittet	lt
 8007ad2:	425b      	neglt	r3, r3
 8007ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ad8:	9307      	strge	r3, [sp, #28]
 8007ada:	9307      	strlt	r3, [sp, #28]
 8007adc:	bfb8      	it	lt
 8007ade:	9204      	strlt	r2, [sp, #16]
 8007ae0:	7823      	ldrb	r3, [r4, #0]
 8007ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ae4:	d10a      	bne.n	8007afc <_svfiprintf_r+0x130>
 8007ae6:	7863      	ldrb	r3, [r4, #1]
 8007ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aea:	d132      	bne.n	8007b52 <_svfiprintf_r+0x186>
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	1d1a      	adds	r2, r3, #4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	9203      	str	r2, [sp, #12]
 8007af4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007af8:	3402      	adds	r4, #2
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007bc0 <_svfiprintf_r+0x1f4>
 8007b00:	7821      	ldrb	r1, [r4, #0]
 8007b02:	2203      	movs	r2, #3
 8007b04:	4650      	mov	r0, sl
 8007b06:	f7f8 fb63 	bl	80001d0 <memchr>
 8007b0a:	b138      	cbz	r0, 8007b1c <_svfiprintf_r+0x150>
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	eba0 000a 	sub.w	r0, r0, sl
 8007b12:	2240      	movs	r2, #64	@ 0x40
 8007b14:	4082      	lsls	r2, r0
 8007b16:	4313      	orrs	r3, r2
 8007b18:	3401      	adds	r4, #1
 8007b1a:	9304      	str	r3, [sp, #16]
 8007b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b20:	4824      	ldr	r0, [pc, #144]	@ (8007bb4 <_svfiprintf_r+0x1e8>)
 8007b22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b26:	2206      	movs	r2, #6
 8007b28:	f7f8 fb52 	bl	80001d0 <memchr>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d036      	beq.n	8007b9e <_svfiprintf_r+0x1d2>
 8007b30:	4b21      	ldr	r3, [pc, #132]	@ (8007bb8 <_svfiprintf_r+0x1ec>)
 8007b32:	bb1b      	cbnz	r3, 8007b7c <_svfiprintf_r+0x1b0>
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	3307      	adds	r3, #7
 8007b38:	f023 0307 	bic.w	r3, r3, #7
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	9303      	str	r3, [sp, #12]
 8007b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b42:	4433      	add	r3, r6
 8007b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b46:	e76a      	b.n	8007a1e <_svfiprintf_r+0x52>
 8007b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	2001      	movs	r0, #1
 8007b50:	e7a8      	b.n	8007aa4 <_svfiprintf_r+0xd8>
 8007b52:	2300      	movs	r3, #0
 8007b54:	3401      	adds	r4, #1
 8007b56:	9305      	str	r3, [sp, #20]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f04f 0c0a 	mov.w	ip, #10
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b64:	3a30      	subs	r2, #48	@ 0x30
 8007b66:	2a09      	cmp	r2, #9
 8007b68:	d903      	bls.n	8007b72 <_svfiprintf_r+0x1a6>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0c6      	beq.n	8007afc <_svfiprintf_r+0x130>
 8007b6e:	9105      	str	r1, [sp, #20]
 8007b70:	e7c4      	b.n	8007afc <_svfiprintf_r+0x130>
 8007b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b76:	4604      	mov	r4, r0
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e7f0      	b.n	8007b5e <_svfiprintf_r+0x192>
 8007b7c:	ab03      	add	r3, sp, #12
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	462a      	mov	r2, r5
 8007b82:	4b0e      	ldr	r3, [pc, #56]	@ (8007bbc <_svfiprintf_r+0x1f0>)
 8007b84:	a904      	add	r1, sp, #16
 8007b86:	4638      	mov	r0, r7
 8007b88:	f7fd fe84 	bl	8005894 <_printf_float>
 8007b8c:	1c42      	adds	r2, r0, #1
 8007b8e:	4606      	mov	r6, r0
 8007b90:	d1d6      	bne.n	8007b40 <_svfiprintf_r+0x174>
 8007b92:	89ab      	ldrh	r3, [r5, #12]
 8007b94:	065b      	lsls	r3, r3, #25
 8007b96:	f53f af2d 	bmi.w	80079f4 <_svfiprintf_r+0x28>
 8007b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b9c:	e72c      	b.n	80079f8 <_svfiprintf_r+0x2c>
 8007b9e:	ab03      	add	r3, sp, #12
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	4b05      	ldr	r3, [pc, #20]	@ (8007bbc <_svfiprintf_r+0x1f0>)
 8007ba6:	a904      	add	r1, sp, #16
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7fe f90b 	bl	8005dc4 <_printf_i>
 8007bae:	e7ed      	b.n	8007b8c <_svfiprintf_r+0x1c0>
 8007bb0:	080086b0 	.word	0x080086b0
 8007bb4:	080086ba 	.word	0x080086ba
 8007bb8:	08005895 	.word	0x08005895
 8007bbc:	08007915 	.word	0x08007915
 8007bc0:	080086b6 	.word	0x080086b6

08007bc4 <__sflush_r>:
 8007bc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bcc:	0716      	lsls	r6, r2, #28
 8007bce:	4605      	mov	r5, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	d454      	bmi.n	8007c7e <__sflush_r+0xba>
 8007bd4:	684b      	ldr	r3, [r1, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dc02      	bgt.n	8007be0 <__sflush_r+0x1c>
 8007bda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dd48      	ble.n	8007c72 <__sflush_r+0xae>
 8007be0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	d045      	beq.n	8007c72 <__sflush_r+0xae>
 8007be6:	2300      	movs	r3, #0
 8007be8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bec:	682f      	ldr	r7, [r5, #0]
 8007bee:	6a21      	ldr	r1, [r4, #32]
 8007bf0:	602b      	str	r3, [r5, #0]
 8007bf2:	d030      	beq.n	8007c56 <__sflush_r+0x92>
 8007bf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	0759      	lsls	r1, r3, #29
 8007bfa:	d505      	bpl.n	8007c08 <__sflush_r+0x44>
 8007bfc:	6863      	ldr	r3, [r4, #4]
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c02:	b10b      	cbz	r3, 8007c08 <__sflush_r+0x44>
 8007c04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c06:	1ad2      	subs	r2, r2, r3
 8007c08:	2300      	movs	r3, #0
 8007c0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c0c:	6a21      	ldr	r1, [r4, #32]
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b0      	blx	r6
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	d106      	bne.n	8007c26 <__sflush_r+0x62>
 8007c18:	6829      	ldr	r1, [r5, #0]
 8007c1a:	291d      	cmp	r1, #29
 8007c1c:	d82b      	bhi.n	8007c76 <__sflush_r+0xb2>
 8007c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8007cc8 <__sflush_r+0x104>)
 8007c20:	410a      	asrs	r2, r1
 8007c22:	07d6      	lsls	r6, r2, #31
 8007c24:	d427      	bmi.n	8007c76 <__sflush_r+0xb2>
 8007c26:	2200      	movs	r2, #0
 8007c28:	6062      	str	r2, [r4, #4]
 8007c2a:	04d9      	lsls	r1, r3, #19
 8007c2c:	6922      	ldr	r2, [r4, #16]
 8007c2e:	6022      	str	r2, [r4, #0]
 8007c30:	d504      	bpl.n	8007c3c <__sflush_r+0x78>
 8007c32:	1c42      	adds	r2, r0, #1
 8007c34:	d101      	bne.n	8007c3a <__sflush_r+0x76>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	b903      	cbnz	r3, 8007c3c <__sflush_r+0x78>
 8007c3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c3e:	602f      	str	r7, [r5, #0]
 8007c40:	b1b9      	cbz	r1, 8007c72 <__sflush_r+0xae>
 8007c42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c46:	4299      	cmp	r1, r3
 8007c48:	d002      	beq.n	8007c50 <__sflush_r+0x8c>
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f7ff f9e0 	bl	8007010 <_free_r>
 8007c50:	2300      	movs	r3, #0
 8007c52:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c54:	e00d      	b.n	8007c72 <__sflush_r+0xae>
 8007c56:	2301      	movs	r3, #1
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b0      	blx	r6
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	1c50      	adds	r0, r2, #1
 8007c60:	d1c9      	bne.n	8007bf6 <__sflush_r+0x32>
 8007c62:	682b      	ldr	r3, [r5, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0c6      	beq.n	8007bf6 <__sflush_r+0x32>
 8007c68:	2b1d      	cmp	r3, #29
 8007c6a:	d001      	beq.n	8007c70 <__sflush_r+0xac>
 8007c6c:	2b16      	cmp	r3, #22
 8007c6e:	d11e      	bne.n	8007cae <__sflush_r+0xea>
 8007c70:	602f      	str	r7, [r5, #0]
 8007c72:	2000      	movs	r0, #0
 8007c74:	e022      	b.n	8007cbc <__sflush_r+0xf8>
 8007c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c7a:	b21b      	sxth	r3, r3
 8007c7c:	e01b      	b.n	8007cb6 <__sflush_r+0xf2>
 8007c7e:	690f      	ldr	r7, [r1, #16]
 8007c80:	2f00      	cmp	r7, #0
 8007c82:	d0f6      	beq.n	8007c72 <__sflush_r+0xae>
 8007c84:	0793      	lsls	r3, r2, #30
 8007c86:	680e      	ldr	r6, [r1, #0]
 8007c88:	bf08      	it	eq
 8007c8a:	694b      	ldreq	r3, [r1, #20]
 8007c8c:	600f      	str	r7, [r1, #0]
 8007c8e:	bf18      	it	ne
 8007c90:	2300      	movne	r3, #0
 8007c92:	eba6 0807 	sub.w	r8, r6, r7
 8007c96:	608b      	str	r3, [r1, #8]
 8007c98:	f1b8 0f00 	cmp.w	r8, #0
 8007c9c:	dde9      	ble.n	8007c72 <__sflush_r+0xae>
 8007c9e:	6a21      	ldr	r1, [r4, #32]
 8007ca0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ca2:	4643      	mov	r3, r8
 8007ca4:	463a      	mov	r2, r7
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b0      	blx	r6
 8007caa:	2800      	cmp	r0, #0
 8007cac:	dc08      	bgt.n	8007cc0 <__sflush_r+0xfc>
 8007cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb6:	81a3      	strh	r3, [r4, #12]
 8007cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc0:	4407      	add	r7, r0
 8007cc2:	eba8 0800 	sub.w	r8, r8, r0
 8007cc6:	e7e7      	b.n	8007c98 <__sflush_r+0xd4>
 8007cc8:	dfbffffe 	.word	0xdfbffffe

08007ccc <_fflush_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	690b      	ldr	r3, [r1, #16]
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	b913      	cbnz	r3, 8007cdc <_fflush_r+0x10>
 8007cd6:	2500      	movs	r5, #0
 8007cd8:	4628      	mov	r0, r5
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	b118      	cbz	r0, 8007ce6 <_fflush_r+0x1a>
 8007cde:	6a03      	ldr	r3, [r0, #32]
 8007ce0:	b90b      	cbnz	r3, 8007ce6 <_fflush_r+0x1a>
 8007ce2:	f7fe fa1b 	bl	800611c <__sinit>
 8007ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0f3      	beq.n	8007cd6 <_fflush_r+0xa>
 8007cee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cf0:	07d0      	lsls	r0, r2, #31
 8007cf2:	d404      	bmi.n	8007cfe <_fflush_r+0x32>
 8007cf4:	0599      	lsls	r1, r3, #22
 8007cf6:	d402      	bmi.n	8007cfe <_fflush_r+0x32>
 8007cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cfa:	f7fe fb3a 	bl	8006372 <__retarget_lock_acquire_recursive>
 8007cfe:	4628      	mov	r0, r5
 8007d00:	4621      	mov	r1, r4
 8007d02:	f7ff ff5f 	bl	8007bc4 <__sflush_r>
 8007d06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d08:	07da      	lsls	r2, r3, #31
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	d4e4      	bmi.n	8007cd8 <_fflush_r+0xc>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	059b      	lsls	r3, r3, #22
 8007d12:	d4e1      	bmi.n	8007cd8 <_fflush_r+0xc>
 8007d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d16:	f7fe fb2d 	bl	8006374 <__retarget_lock_release_recursive>
 8007d1a:	e7dd      	b.n	8007cd8 <_fflush_r+0xc>

08007d1c <memmove>:
 8007d1c:	4288      	cmp	r0, r1
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	eb01 0402 	add.w	r4, r1, r2
 8007d24:	d902      	bls.n	8007d2c <memmove+0x10>
 8007d26:	4284      	cmp	r4, r0
 8007d28:	4623      	mov	r3, r4
 8007d2a:	d807      	bhi.n	8007d3c <memmove+0x20>
 8007d2c:	1e43      	subs	r3, r0, #1
 8007d2e:	42a1      	cmp	r1, r4
 8007d30:	d008      	beq.n	8007d44 <memmove+0x28>
 8007d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d3a:	e7f8      	b.n	8007d2e <memmove+0x12>
 8007d3c:	4402      	add	r2, r0
 8007d3e:	4601      	mov	r1, r0
 8007d40:	428a      	cmp	r2, r1
 8007d42:	d100      	bne.n	8007d46 <memmove+0x2a>
 8007d44:	bd10      	pop	{r4, pc}
 8007d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d4e:	e7f7      	b.n	8007d40 <memmove+0x24>

08007d50 <_sbrk_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d06      	ldr	r5, [pc, #24]	@ (8007d6c <_sbrk_r+0x1c>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	f7f9 ffa8 	bl	8001cb0 <_sbrk>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_sbrk_r+0x1a>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_sbrk_r+0x1a>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	200004b8 	.word	0x200004b8

08007d70 <memcpy>:
 8007d70:	440a      	add	r2, r1
 8007d72:	4291      	cmp	r1, r2
 8007d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d78:	d100      	bne.n	8007d7c <memcpy+0xc>
 8007d7a:	4770      	bx	lr
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d86:	4291      	cmp	r1, r2
 8007d88:	d1f9      	bne.n	8007d7e <memcpy+0xe>
 8007d8a:	bd10      	pop	{r4, pc}

08007d8c <__assert_func>:
 8007d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d8e:	4614      	mov	r4, r2
 8007d90:	461a      	mov	r2, r3
 8007d92:	4b09      	ldr	r3, [pc, #36]	@ (8007db8 <__assert_func+0x2c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4605      	mov	r5, r0
 8007d98:	68d8      	ldr	r0, [r3, #12]
 8007d9a:	b954      	cbnz	r4, 8007db2 <__assert_func+0x26>
 8007d9c:	4b07      	ldr	r3, [pc, #28]	@ (8007dbc <__assert_func+0x30>)
 8007d9e:	461c      	mov	r4, r3
 8007da0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007da4:	9100      	str	r1, [sp, #0]
 8007da6:	462b      	mov	r3, r5
 8007da8:	4905      	ldr	r1, [pc, #20]	@ (8007dc0 <__assert_func+0x34>)
 8007daa:	f000 f86f 	bl	8007e8c <fiprintf>
 8007dae:	f000 f87f 	bl	8007eb0 <abort>
 8007db2:	4b04      	ldr	r3, [pc, #16]	@ (8007dc4 <__assert_func+0x38>)
 8007db4:	e7f4      	b.n	8007da0 <__assert_func+0x14>
 8007db6:	bf00      	nop
 8007db8:	20000018 	.word	0x20000018
 8007dbc:	08008706 	.word	0x08008706
 8007dc0:	080086d8 	.word	0x080086d8
 8007dc4:	080086cb 	.word	0x080086cb

08007dc8 <_calloc_r>:
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	fba1 5402 	umull	r5, r4, r1, r2
 8007dce:	b93c      	cbnz	r4, 8007de0 <_calloc_r+0x18>
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	f7ff f991 	bl	80070f8 <_malloc_r>
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	b928      	cbnz	r0, 8007de6 <_calloc_r+0x1e>
 8007dda:	2600      	movs	r6, #0
 8007ddc:	4630      	mov	r0, r6
 8007dde:	bd70      	pop	{r4, r5, r6, pc}
 8007de0:	220c      	movs	r2, #12
 8007de2:	6002      	str	r2, [r0, #0]
 8007de4:	e7f9      	b.n	8007dda <_calloc_r+0x12>
 8007de6:	462a      	mov	r2, r5
 8007de8:	4621      	mov	r1, r4
 8007dea:	f7fe fa44 	bl	8006276 <memset>
 8007dee:	e7f5      	b.n	8007ddc <_calloc_r+0x14>

08007df0 <__ascii_mbtowc>:
 8007df0:	b082      	sub	sp, #8
 8007df2:	b901      	cbnz	r1, 8007df6 <__ascii_mbtowc+0x6>
 8007df4:	a901      	add	r1, sp, #4
 8007df6:	b142      	cbz	r2, 8007e0a <__ascii_mbtowc+0x1a>
 8007df8:	b14b      	cbz	r3, 8007e0e <__ascii_mbtowc+0x1e>
 8007dfa:	7813      	ldrb	r3, [r2, #0]
 8007dfc:	600b      	str	r3, [r1, #0]
 8007dfe:	7812      	ldrb	r2, [r2, #0]
 8007e00:	1e10      	subs	r0, r2, #0
 8007e02:	bf18      	it	ne
 8007e04:	2001      	movne	r0, #1
 8007e06:	b002      	add	sp, #8
 8007e08:	4770      	bx	lr
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	e7fb      	b.n	8007e06 <__ascii_mbtowc+0x16>
 8007e0e:	f06f 0001 	mvn.w	r0, #1
 8007e12:	e7f8      	b.n	8007e06 <__ascii_mbtowc+0x16>

08007e14 <_realloc_r>:
 8007e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e18:	4680      	mov	r8, r0
 8007e1a:	4615      	mov	r5, r2
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	b921      	cbnz	r1, 8007e2a <_realloc_r+0x16>
 8007e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e24:	4611      	mov	r1, r2
 8007e26:	f7ff b967 	b.w	80070f8 <_malloc_r>
 8007e2a:	b92a      	cbnz	r2, 8007e38 <_realloc_r+0x24>
 8007e2c:	f7ff f8f0 	bl	8007010 <_free_r>
 8007e30:	2400      	movs	r4, #0
 8007e32:	4620      	mov	r0, r4
 8007e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e38:	f000 f841 	bl	8007ebe <_malloc_usable_size_r>
 8007e3c:	4285      	cmp	r5, r0
 8007e3e:	4606      	mov	r6, r0
 8007e40:	d802      	bhi.n	8007e48 <_realloc_r+0x34>
 8007e42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007e46:	d8f4      	bhi.n	8007e32 <_realloc_r+0x1e>
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	f7ff f954 	bl	80070f8 <_malloc_r>
 8007e50:	4607      	mov	r7, r0
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d0ec      	beq.n	8007e30 <_realloc_r+0x1c>
 8007e56:	42b5      	cmp	r5, r6
 8007e58:	462a      	mov	r2, r5
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	bf28      	it	cs
 8007e5e:	4632      	movcs	r2, r6
 8007e60:	f7ff ff86 	bl	8007d70 <memcpy>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4640      	mov	r0, r8
 8007e68:	f7ff f8d2 	bl	8007010 <_free_r>
 8007e6c:	463c      	mov	r4, r7
 8007e6e:	e7e0      	b.n	8007e32 <_realloc_r+0x1e>

08007e70 <__ascii_wctomb>:
 8007e70:	4603      	mov	r3, r0
 8007e72:	4608      	mov	r0, r1
 8007e74:	b141      	cbz	r1, 8007e88 <__ascii_wctomb+0x18>
 8007e76:	2aff      	cmp	r2, #255	@ 0xff
 8007e78:	d904      	bls.n	8007e84 <__ascii_wctomb+0x14>
 8007e7a:	228a      	movs	r2, #138	@ 0x8a
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e82:	4770      	bx	lr
 8007e84:	700a      	strb	r2, [r1, #0]
 8007e86:	2001      	movs	r0, #1
 8007e88:	4770      	bx	lr
	...

08007e8c <fiprintf>:
 8007e8c:	b40e      	push	{r1, r2, r3}
 8007e8e:	b503      	push	{r0, r1, lr}
 8007e90:	4601      	mov	r1, r0
 8007e92:	ab03      	add	r3, sp, #12
 8007e94:	4805      	ldr	r0, [pc, #20]	@ (8007eac <fiprintf+0x20>)
 8007e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e9a:	6800      	ldr	r0, [r0, #0]
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	f000 f83f 	bl	8007f20 <_vfiprintf_r>
 8007ea2:	b002      	add	sp, #8
 8007ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea8:	b003      	add	sp, #12
 8007eaa:	4770      	bx	lr
 8007eac:	20000018 	.word	0x20000018

08007eb0 <abort>:
 8007eb0:	b508      	push	{r3, lr}
 8007eb2:	2006      	movs	r0, #6
 8007eb4:	f000 fa08 	bl	80082c8 <raise>
 8007eb8:	2001      	movs	r0, #1
 8007eba:	f7f9 fe80 	bl	8001bbe <_exit>

08007ebe <_malloc_usable_size_r>:
 8007ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec2:	1f18      	subs	r0, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bfbc      	itt	lt
 8007ec8:	580b      	ldrlt	r3, [r1, r0]
 8007eca:	18c0      	addlt	r0, r0, r3
 8007ecc:	4770      	bx	lr

08007ece <__sfputc_r>:
 8007ece:	6893      	ldr	r3, [r2, #8]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	b410      	push	{r4}
 8007ed6:	6093      	str	r3, [r2, #8]
 8007ed8:	da08      	bge.n	8007eec <__sfputc_r+0x1e>
 8007eda:	6994      	ldr	r4, [r2, #24]
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	db01      	blt.n	8007ee4 <__sfputc_r+0x16>
 8007ee0:	290a      	cmp	r1, #10
 8007ee2:	d103      	bne.n	8007eec <__sfputc_r+0x1e>
 8007ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ee8:	f000 b932 	b.w	8008150 <__swbuf_r>
 8007eec:	6813      	ldr	r3, [r2, #0]
 8007eee:	1c58      	adds	r0, r3, #1
 8007ef0:	6010      	str	r0, [r2, #0]
 8007ef2:	7019      	strb	r1, [r3, #0]
 8007ef4:	4608      	mov	r0, r1
 8007ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <__sfputs_r>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	4606      	mov	r6, r0
 8007f00:	460f      	mov	r7, r1
 8007f02:	4614      	mov	r4, r2
 8007f04:	18d5      	adds	r5, r2, r3
 8007f06:	42ac      	cmp	r4, r5
 8007f08:	d101      	bne.n	8007f0e <__sfputs_r+0x12>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	e007      	b.n	8007f1e <__sfputs_r+0x22>
 8007f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f12:	463a      	mov	r2, r7
 8007f14:	4630      	mov	r0, r6
 8007f16:	f7ff ffda 	bl	8007ece <__sfputc_r>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	d1f3      	bne.n	8007f06 <__sfputs_r+0xa>
 8007f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f20 <_vfiprintf_r>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	460d      	mov	r5, r1
 8007f26:	b09d      	sub	sp, #116	@ 0x74
 8007f28:	4614      	mov	r4, r2
 8007f2a:	4698      	mov	r8, r3
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	b118      	cbz	r0, 8007f38 <_vfiprintf_r+0x18>
 8007f30:	6a03      	ldr	r3, [r0, #32]
 8007f32:	b90b      	cbnz	r3, 8007f38 <_vfiprintf_r+0x18>
 8007f34:	f7fe f8f2 	bl	800611c <__sinit>
 8007f38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f3a:	07d9      	lsls	r1, r3, #31
 8007f3c:	d405      	bmi.n	8007f4a <_vfiprintf_r+0x2a>
 8007f3e:	89ab      	ldrh	r3, [r5, #12]
 8007f40:	059a      	lsls	r2, r3, #22
 8007f42:	d402      	bmi.n	8007f4a <_vfiprintf_r+0x2a>
 8007f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f46:	f7fe fa14 	bl	8006372 <__retarget_lock_acquire_recursive>
 8007f4a:	89ab      	ldrh	r3, [r5, #12]
 8007f4c:	071b      	lsls	r3, r3, #28
 8007f4e:	d501      	bpl.n	8007f54 <_vfiprintf_r+0x34>
 8007f50:	692b      	ldr	r3, [r5, #16]
 8007f52:	b99b      	cbnz	r3, 8007f7c <_vfiprintf_r+0x5c>
 8007f54:	4629      	mov	r1, r5
 8007f56:	4630      	mov	r0, r6
 8007f58:	f000 f938 	bl	80081cc <__swsetup_r>
 8007f5c:	b170      	cbz	r0, 8007f7c <_vfiprintf_r+0x5c>
 8007f5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f60:	07dc      	lsls	r4, r3, #31
 8007f62:	d504      	bpl.n	8007f6e <_vfiprintf_r+0x4e>
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295
 8007f68:	b01d      	add	sp, #116	@ 0x74
 8007f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6e:	89ab      	ldrh	r3, [r5, #12]
 8007f70:	0598      	lsls	r0, r3, #22
 8007f72:	d4f7      	bmi.n	8007f64 <_vfiprintf_r+0x44>
 8007f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f76:	f7fe f9fd 	bl	8006374 <__retarget_lock_release_recursive>
 8007f7a:	e7f3      	b.n	8007f64 <_vfiprintf_r+0x44>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f80:	2320      	movs	r3, #32
 8007f82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f8a:	2330      	movs	r3, #48	@ 0x30
 8007f8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800813c <_vfiprintf_r+0x21c>
 8007f90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f94:	f04f 0901 	mov.w	r9, #1
 8007f98:	4623      	mov	r3, r4
 8007f9a:	469a      	mov	sl, r3
 8007f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa0:	b10a      	cbz	r2, 8007fa6 <_vfiprintf_r+0x86>
 8007fa2:	2a25      	cmp	r2, #37	@ 0x25
 8007fa4:	d1f9      	bne.n	8007f9a <_vfiprintf_r+0x7a>
 8007fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8007faa:	d00b      	beq.n	8007fc4 <_vfiprintf_r+0xa4>
 8007fac:	465b      	mov	r3, fp
 8007fae:	4622      	mov	r2, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7ff ffa2 	bl	8007efc <__sfputs_r>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	f000 80a7 	beq.w	800810c <_vfiprintf_r+0x1ec>
 8007fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fc0:	445a      	add	r2, fp
 8007fc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 809f 	beq.w	800810c <_vfiprintf_r+0x1ec>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fd8:	f10a 0a01 	add.w	sl, sl, #1
 8007fdc:	9304      	str	r3, [sp, #16]
 8007fde:	9307      	str	r3, [sp, #28]
 8007fe0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fe4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fe6:	4654      	mov	r4, sl
 8007fe8:	2205      	movs	r2, #5
 8007fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fee:	4853      	ldr	r0, [pc, #332]	@ (800813c <_vfiprintf_r+0x21c>)
 8007ff0:	f7f8 f8ee 	bl	80001d0 <memchr>
 8007ff4:	9a04      	ldr	r2, [sp, #16]
 8007ff6:	b9d8      	cbnz	r0, 8008030 <_vfiprintf_r+0x110>
 8007ff8:	06d1      	lsls	r1, r2, #27
 8007ffa:	bf44      	itt	mi
 8007ffc:	2320      	movmi	r3, #32
 8007ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008002:	0713      	lsls	r3, r2, #28
 8008004:	bf44      	itt	mi
 8008006:	232b      	movmi	r3, #43	@ 0x2b
 8008008:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800800c:	f89a 3000 	ldrb.w	r3, [sl]
 8008010:	2b2a      	cmp	r3, #42	@ 0x2a
 8008012:	d015      	beq.n	8008040 <_vfiprintf_r+0x120>
 8008014:	9a07      	ldr	r2, [sp, #28]
 8008016:	4654      	mov	r4, sl
 8008018:	2000      	movs	r0, #0
 800801a:	f04f 0c0a 	mov.w	ip, #10
 800801e:	4621      	mov	r1, r4
 8008020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008024:	3b30      	subs	r3, #48	@ 0x30
 8008026:	2b09      	cmp	r3, #9
 8008028:	d94b      	bls.n	80080c2 <_vfiprintf_r+0x1a2>
 800802a:	b1b0      	cbz	r0, 800805a <_vfiprintf_r+0x13a>
 800802c:	9207      	str	r2, [sp, #28]
 800802e:	e014      	b.n	800805a <_vfiprintf_r+0x13a>
 8008030:	eba0 0308 	sub.w	r3, r0, r8
 8008034:	fa09 f303 	lsl.w	r3, r9, r3
 8008038:	4313      	orrs	r3, r2
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	46a2      	mov	sl, r4
 800803e:	e7d2      	b.n	8007fe6 <_vfiprintf_r+0xc6>
 8008040:	9b03      	ldr	r3, [sp, #12]
 8008042:	1d19      	adds	r1, r3, #4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	9103      	str	r1, [sp, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	bfbb      	ittet	lt
 800804c:	425b      	neglt	r3, r3
 800804e:	f042 0202 	orrlt.w	r2, r2, #2
 8008052:	9307      	strge	r3, [sp, #28]
 8008054:	9307      	strlt	r3, [sp, #28]
 8008056:	bfb8      	it	lt
 8008058:	9204      	strlt	r2, [sp, #16]
 800805a:	7823      	ldrb	r3, [r4, #0]
 800805c:	2b2e      	cmp	r3, #46	@ 0x2e
 800805e:	d10a      	bne.n	8008076 <_vfiprintf_r+0x156>
 8008060:	7863      	ldrb	r3, [r4, #1]
 8008062:	2b2a      	cmp	r3, #42	@ 0x2a
 8008064:	d132      	bne.n	80080cc <_vfiprintf_r+0x1ac>
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	1d1a      	adds	r2, r3, #4
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	9203      	str	r2, [sp, #12]
 800806e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008072:	3402      	adds	r4, #2
 8008074:	9305      	str	r3, [sp, #20]
 8008076:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800814c <_vfiprintf_r+0x22c>
 800807a:	7821      	ldrb	r1, [r4, #0]
 800807c:	2203      	movs	r2, #3
 800807e:	4650      	mov	r0, sl
 8008080:	f7f8 f8a6 	bl	80001d0 <memchr>
 8008084:	b138      	cbz	r0, 8008096 <_vfiprintf_r+0x176>
 8008086:	9b04      	ldr	r3, [sp, #16]
 8008088:	eba0 000a 	sub.w	r0, r0, sl
 800808c:	2240      	movs	r2, #64	@ 0x40
 800808e:	4082      	lsls	r2, r0
 8008090:	4313      	orrs	r3, r2
 8008092:	3401      	adds	r4, #1
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809a:	4829      	ldr	r0, [pc, #164]	@ (8008140 <_vfiprintf_r+0x220>)
 800809c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080a0:	2206      	movs	r2, #6
 80080a2:	f7f8 f895 	bl	80001d0 <memchr>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d03f      	beq.n	800812a <_vfiprintf_r+0x20a>
 80080aa:	4b26      	ldr	r3, [pc, #152]	@ (8008144 <_vfiprintf_r+0x224>)
 80080ac:	bb1b      	cbnz	r3, 80080f6 <_vfiprintf_r+0x1d6>
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	3307      	adds	r3, #7
 80080b2:	f023 0307 	bic.w	r3, r3, #7
 80080b6:	3308      	adds	r3, #8
 80080b8:	9303      	str	r3, [sp, #12]
 80080ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080bc:	443b      	add	r3, r7
 80080be:	9309      	str	r3, [sp, #36]	@ 0x24
 80080c0:	e76a      	b.n	8007f98 <_vfiprintf_r+0x78>
 80080c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080c6:	460c      	mov	r4, r1
 80080c8:	2001      	movs	r0, #1
 80080ca:	e7a8      	b.n	800801e <_vfiprintf_r+0xfe>
 80080cc:	2300      	movs	r3, #0
 80080ce:	3401      	adds	r4, #1
 80080d0:	9305      	str	r3, [sp, #20]
 80080d2:	4619      	mov	r1, r3
 80080d4:	f04f 0c0a 	mov.w	ip, #10
 80080d8:	4620      	mov	r0, r4
 80080da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080de:	3a30      	subs	r2, #48	@ 0x30
 80080e0:	2a09      	cmp	r2, #9
 80080e2:	d903      	bls.n	80080ec <_vfiprintf_r+0x1cc>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0c6      	beq.n	8008076 <_vfiprintf_r+0x156>
 80080e8:	9105      	str	r1, [sp, #20]
 80080ea:	e7c4      	b.n	8008076 <_vfiprintf_r+0x156>
 80080ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80080f0:	4604      	mov	r4, r0
 80080f2:	2301      	movs	r3, #1
 80080f4:	e7f0      	b.n	80080d8 <_vfiprintf_r+0x1b8>
 80080f6:	ab03      	add	r3, sp, #12
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	462a      	mov	r2, r5
 80080fc:	4b12      	ldr	r3, [pc, #72]	@ (8008148 <_vfiprintf_r+0x228>)
 80080fe:	a904      	add	r1, sp, #16
 8008100:	4630      	mov	r0, r6
 8008102:	f7fd fbc7 	bl	8005894 <_printf_float>
 8008106:	4607      	mov	r7, r0
 8008108:	1c78      	adds	r0, r7, #1
 800810a:	d1d6      	bne.n	80080ba <_vfiprintf_r+0x19a>
 800810c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800810e:	07d9      	lsls	r1, r3, #31
 8008110:	d405      	bmi.n	800811e <_vfiprintf_r+0x1fe>
 8008112:	89ab      	ldrh	r3, [r5, #12]
 8008114:	059a      	lsls	r2, r3, #22
 8008116:	d402      	bmi.n	800811e <_vfiprintf_r+0x1fe>
 8008118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800811a:	f7fe f92b 	bl	8006374 <__retarget_lock_release_recursive>
 800811e:	89ab      	ldrh	r3, [r5, #12]
 8008120:	065b      	lsls	r3, r3, #25
 8008122:	f53f af1f 	bmi.w	8007f64 <_vfiprintf_r+0x44>
 8008126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008128:	e71e      	b.n	8007f68 <_vfiprintf_r+0x48>
 800812a:	ab03      	add	r3, sp, #12
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	462a      	mov	r2, r5
 8008130:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <_vfiprintf_r+0x228>)
 8008132:	a904      	add	r1, sp, #16
 8008134:	4630      	mov	r0, r6
 8008136:	f7fd fe45 	bl	8005dc4 <_printf_i>
 800813a:	e7e4      	b.n	8008106 <_vfiprintf_r+0x1e6>
 800813c:	080086b0 	.word	0x080086b0
 8008140:	080086ba 	.word	0x080086ba
 8008144:	08005895 	.word	0x08005895
 8008148:	08007efd 	.word	0x08007efd
 800814c:	080086b6 	.word	0x080086b6

08008150 <__swbuf_r>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	460e      	mov	r6, r1
 8008154:	4614      	mov	r4, r2
 8008156:	4605      	mov	r5, r0
 8008158:	b118      	cbz	r0, 8008162 <__swbuf_r+0x12>
 800815a:	6a03      	ldr	r3, [r0, #32]
 800815c:	b90b      	cbnz	r3, 8008162 <__swbuf_r+0x12>
 800815e:	f7fd ffdd 	bl	800611c <__sinit>
 8008162:	69a3      	ldr	r3, [r4, #24]
 8008164:	60a3      	str	r3, [r4, #8]
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	071a      	lsls	r2, r3, #28
 800816a:	d501      	bpl.n	8008170 <__swbuf_r+0x20>
 800816c:	6923      	ldr	r3, [r4, #16]
 800816e:	b943      	cbnz	r3, 8008182 <__swbuf_r+0x32>
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	f000 f82a 	bl	80081cc <__swsetup_r>
 8008178:	b118      	cbz	r0, 8008182 <__swbuf_r+0x32>
 800817a:	f04f 37ff 	mov.w	r7, #4294967295
 800817e:	4638      	mov	r0, r7
 8008180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	6922      	ldr	r2, [r4, #16]
 8008186:	1a98      	subs	r0, r3, r2
 8008188:	6963      	ldr	r3, [r4, #20]
 800818a:	b2f6      	uxtb	r6, r6
 800818c:	4283      	cmp	r3, r0
 800818e:	4637      	mov	r7, r6
 8008190:	dc05      	bgt.n	800819e <__swbuf_r+0x4e>
 8008192:	4621      	mov	r1, r4
 8008194:	4628      	mov	r0, r5
 8008196:	f7ff fd99 	bl	8007ccc <_fflush_r>
 800819a:	2800      	cmp	r0, #0
 800819c:	d1ed      	bne.n	800817a <__swbuf_r+0x2a>
 800819e:	68a3      	ldr	r3, [r4, #8]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	60a3      	str	r3, [r4, #8]
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	6022      	str	r2, [r4, #0]
 80081aa:	701e      	strb	r6, [r3, #0]
 80081ac:	6962      	ldr	r2, [r4, #20]
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d004      	beq.n	80081be <__swbuf_r+0x6e>
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	07db      	lsls	r3, r3, #31
 80081b8:	d5e1      	bpl.n	800817e <__swbuf_r+0x2e>
 80081ba:	2e0a      	cmp	r6, #10
 80081bc:	d1df      	bne.n	800817e <__swbuf_r+0x2e>
 80081be:	4621      	mov	r1, r4
 80081c0:	4628      	mov	r0, r5
 80081c2:	f7ff fd83 	bl	8007ccc <_fflush_r>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d0d9      	beq.n	800817e <__swbuf_r+0x2e>
 80081ca:	e7d6      	b.n	800817a <__swbuf_r+0x2a>

080081cc <__swsetup_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4b29      	ldr	r3, [pc, #164]	@ (8008274 <__swsetup_r+0xa8>)
 80081d0:	4605      	mov	r5, r0
 80081d2:	6818      	ldr	r0, [r3, #0]
 80081d4:	460c      	mov	r4, r1
 80081d6:	b118      	cbz	r0, 80081e0 <__swsetup_r+0x14>
 80081d8:	6a03      	ldr	r3, [r0, #32]
 80081da:	b90b      	cbnz	r3, 80081e0 <__swsetup_r+0x14>
 80081dc:	f7fd ff9e 	bl	800611c <__sinit>
 80081e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e4:	0719      	lsls	r1, r3, #28
 80081e6:	d422      	bmi.n	800822e <__swsetup_r+0x62>
 80081e8:	06da      	lsls	r2, r3, #27
 80081ea:	d407      	bmi.n	80081fc <__swsetup_r+0x30>
 80081ec:	2209      	movs	r2, #9
 80081ee:	602a      	str	r2, [r5, #0]
 80081f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081f4:	81a3      	strh	r3, [r4, #12]
 80081f6:	f04f 30ff 	mov.w	r0, #4294967295
 80081fa:	e033      	b.n	8008264 <__swsetup_r+0x98>
 80081fc:	0758      	lsls	r0, r3, #29
 80081fe:	d512      	bpl.n	8008226 <__swsetup_r+0x5a>
 8008200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008202:	b141      	cbz	r1, 8008216 <__swsetup_r+0x4a>
 8008204:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008208:	4299      	cmp	r1, r3
 800820a:	d002      	beq.n	8008212 <__swsetup_r+0x46>
 800820c:	4628      	mov	r0, r5
 800820e:	f7fe feff 	bl	8007010 <_free_r>
 8008212:	2300      	movs	r3, #0
 8008214:	6363      	str	r3, [r4, #52]	@ 0x34
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	2300      	movs	r3, #0
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f043 0308 	orr.w	r3, r3, #8
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	b94b      	cbnz	r3, 8008246 <__swsetup_r+0x7a>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800823c:	d003      	beq.n	8008246 <__swsetup_r+0x7a>
 800823e:	4621      	mov	r1, r4
 8008240:	4628      	mov	r0, r5
 8008242:	f000 f883 	bl	800834c <__smakebuf_r>
 8008246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824a:	f013 0201 	ands.w	r2, r3, #1
 800824e:	d00a      	beq.n	8008266 <__swsetup_r+0x9a>
 8008250:	2200      	movs	r2, #0
 8008252:	60a2      	str	r2, [r4, #8]
 8008254:	6962      	ldr	r2, [r4, #20]
 8008256:	4252      	negs	r2, r2
 8008258:	61a2      	str	r2, [r4, #24]
 800825a:	6922      	ldr	r2, [r4, #16]
 800825c:	b942      	cbnz	r2, 8008270 <__swsetup_r+0xa4>
 800825e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008262:	d1c5      	bne.n	80081f0 <__swsetup_r+0x24>
 8008264:	bd38      	pop	{r3, r4, r5, pc}
 8008266:	0799      	lsls	r1, r3, #30
 8008268:	bf58      	it	pl
 800826a:	6962      	ldrpl	r2, [r4, #20]
 800826c:	60a2      	str	r2, [r4, #8]
 800826e:	e7f4      	b.n	800825a <__swsetup_r+0x8e>
 8008270:	2000      	movs	r0, #0
 8008272:	e7f7      	b.n	8008264 <__swsetup_r+0x98>
 8008274:	20000018 	.word	0x20000018

08008278 <_raise_r>:
 8008278:	291f      	cmp	r1, #31
 800827a:	b538      	push	{r3, r4, r5, lr}
 800827c:	4605      	mov	r5, r0
 800827e:	460c      	mov	r4, r1
 8008280:	d904      	bls.n	800828c <_raise_r+0x14>
 8008282:	2316      	movs	r3, #22
 8008284:	6003      	str	r3, [r0, #0]
 8008286:	f04f 30ff 	mov.w	r0, #4294967295
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800828e:	b112      	cbz	r2, 8008296 <_raise_r+0x1e>
 8008290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008294:	b94b      	cbnz	r3, 80082aa <_raise_r+0x32>
 8008296:	4628      	mov	r0, r5
 8008298:	f000 f830 	bl	80082fc <_getpid_r>
 800829c:	4622      	mov	r2, r4
 800829e:	4601      	mov	r1, r0
 80082a0:	4628      	mov	r0, r5
 80082a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082a6:	f000 b817 	b.w	80082d8 <_kill_r>
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d00a      	beq.n	80082c4 <_raise_r+0x4c>
 80082ae:	1c59      	adds	r1, r3, #1
 80082b0:	d103      	bne.n	80082ba <_raise_r+0x42>
 80082b2:	2316      	movs	r3, #22
 80082b4:	6003      	str	r3, [r0, #0]
 80082b6:	2001      	movs	r0, #1
 80082b8:	e7e7      	b.n	800828a <_raise_r+0x12>
 80082ba:	2100      	movs	r1, #0
 80082bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082c0:	4620      	mov	r0, r4
 80082c2:	4798      	blx	r3
 80082c4:	2000      	movs	r0, #0
 80082c6:	e7e0      	b.n	800828a <_raise_r+0x12>

080082c8 <raise>:
 80082c8:	4b02      	ldr	r3, [pc, #8]	@ (80082d4 <raise+0xc>)
 80082ca:	4601      	mov	r1, r0
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f7ff bfd3 	b.w	8008278 <_raise_r>
 80082d2:	bf00      	nop
 80082d4:	20000018 	.word	0x20000018

080082d8 <_kill_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d07      	ldr	r5, [pc, #28]	@ (80082f8 <_kill_r+0x20>)
 80082dc:	2300      	movs	r3, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	4611      	mov	r1, r2
 80082e4:	602b      	str	r3, [r5, #0]
 80082e6:	f7f9 fc5a 	bl	8001b9e <_kill>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d102      	bne.n	80082f4 <_kill_r+0x1c>
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	b103      	cbz	r3, 80082f4 <_kill_r+0x1c>
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	bd38      	pop	{r3, r4, r5, pc}
 80082f6:	bf00      	nop
 80082f8:	200004b8 	.word	0x200004b8

080082fc <_getpid_r>:
 80082fc:	f7f9 bc47 	b.w	8001b8e <_getpid>

08008300 <__swhatbuf_r>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	460c      	mov	r4, r1
 8008304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008308:	2900      	cmp	r1, #0
 800830a:	b096      	sub	sp, #88	@ 0x58
 800830c:	4615      	mov	r5, r2
 800830e:	461e      	mov	r6, r3
 8008310:	da0d      	bge.n	800832e <__swhatbuf_r+0x2e>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008318:	f04f 0100 	mov.w	r1, #0
 800831c:	bf14      	ite	ne
 800831e:	2340      	movne	r3, #64	@ 0x40
 8008320:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008324:	2000      	movs	r0, #0
 8008326:	6031      	str	r1, [r6, #0]
 8008328:	602b      	str	r3, [r5, #0]
 800832a:	b016      	add	sp, #88	@ 0x58
 800832c:	bd70      	pop	{r4, r5, r6, pc}
 800832e:	466a      	mov	r2, sp
 8008330:	f000 f848 	bl	80083c4 <_fstat_r>
 8008334:	2800      	cmp	r0, #0
 8008336:	dbec      	blt.n	8008312 <__swhatbuf_r+0x12>
 8008338:	9901      	ldr	r1, [sp, #4]
 800833a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800833e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008342:	4259      	negs	r1, r3
 8008344:	4159      	adcs	r1, r3
 8008346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800834a:	e7eb      	b.n	8008324 <__swhatbuf_r+0x24>

0800834c <__smakebuf_r>:
 800834c:	898b      	ldrh	r3, [r1, #12]
 800834e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008350:	079d      	lsls	r5, r3, #30
 8008352:	4606      	mov	r6, r0
 8008354:	460c      	mov	r4, r1
 8008356:	d507      	bpl.n	8008368 <__smakebuf_r+0x1c>
 8008358:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	2301      	movs	r3, #1
 8008362:	6163      	str	r3, [r4, #20]
 8008364:	b003      	add	sp, #12
 8008366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008368:	ab01      	add	r3, sp, #4
 800836a:	466a      	mov	r2, sp
 800836c:	f7ff ffc8 	bl	8008300 <__swhatbuf_r>
 8008370:	9f00      	ldr	r7, [sp, #0]
 8008372:	4605      	mov	r5, r0
 8008374:	4639      	mov	r1, r7
 8008376:	4630      	mov	r0, r6
 8008378:	f7fe febe 	bl	80070f8 <_malloc_r>
 800837c:	b948      	cbnz	r0, 8008392 <__smakebuf_r+0x46>
 800837e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008382:	059a      	lsls	r2, r3, #22
 8008384:	d4ee      	bmi.n	8008364 <__smakebuf_r+0x18>
 8008386:	f023 0303 	bic.w	r3, r3, #3
 800838a:	f043 0302 	orr.w	r3, r3, #2
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	e7e2      	b.n	8008358 <__smakebuf_r+0xc>
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	6020      	str	r0, [r4, #0]
 8008396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	9b01      	ldr	r3, [sp, #4]
 800839e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083a2:	b15b      	cbz	r3, 80083bc <__smakebuf_r+0x70>
 80083a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a8:	4630      	mov	r0, r6
 80083aa:	f000 f81d 	bl	80083e8 <_isatty_r>
 80083ae:	b128      	cbz	r0, 80083bc <__smakebuf_r+0x70>
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f023 0303 	bic.w	r3, r3, #3
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	431d      	orrs	r5, r3
 80083c0:	81a5      	strh	r5, [r4, #12]
 80083c2:	e7cf      	b.n	8008364 <__smakebuf_r+0x18>

080083c4 <_fstat_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4d07      	ldr	r5, [pc, #28]	@ (80083e4 <_fstat_r+0x20>)
 80083c8:	2300      	movs	r3, #0
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	f7f9 fc44 	bl	8001c5e <_fstat>
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	d102      	bne.n	80083e0 <_fstat_r+0x1c>
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	b103      	cbz	r3, 80083e0 <_fstat_r+0x1c>
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	bd38      	pop	{r3, r4, r5, pc}
 80083e2:	bf00      	nop
 80083e4:	200004b8 	.word	0x200004b8

080083e8 <_isatty_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d06      	ldr	r5, [pc, #24]	@ (8008404 <_isatty_r+0x1c>)
 80083ec:	2300      	movs	r3, #0
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	602b      	str	r3, [r5, #0]
 80083f4:	f7f9 fc43 	bl	8001c7e <_isatty>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d102      	bne.n	8008402 <_isatty_r+0x1a>
 80083fc:	682b      	ldr	r3, [r5, #0]
 80083fe:	b103      	cbz	r3, 8008402 <_isatty_r+0x1a>
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	200004b8 	.word	0x200004b8

08008408 <sqrtf>:
 8008408:	b508      	push	{r3, lr}
 800840a:	ed2d 8b02 	vpush	{d8}
 800840e:	eeb0 8a40 	vmov.f32	s16, s0
 8008412:	f000 f817 	bl	8008444 <__ieee754_sqrtf>
 8008416:	eeb4 8a48 	vcmp.f32	s16, s16
 800841a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841e:	d60c      	bvs.n	800843a <sqrtf+0x32>
 8008420:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008440 <sqrtf+0x38>
 8008424:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800842c:	d505      	bpl.n	800843a <sqrtf+0x32>
 800842e:	f7fd ff75 	bl	800631c <__errno>
 8008432:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008436:	2321      	movs	r3, #33	@ 0x21
 8008438:	6003      	str	r3, [r0, #0]
 800843a:	ecbd 8b02 	vpop	{d8}
 800843e:	bd08      	pop	{r3, pc}
 8008440:	00000000 	.word	0x00000000

08008444 <__ieee754_sqrtf>:
 8008444:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008448:	4770      	bx	lr
	...

0800844c <_init>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	bf00      	nop
 8008450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008452:	bc08      	pop	{r3}
 8008454:	469e      	mov	lr, r3
 8008456:	4770      	bx	lr

08008458 <_fini>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	bf00      	nop
 800845c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845e:	bc08      	pop	{r3}
 8008460:	469e      	mov	lr, r3
 8008462:	4770      	bx	lr
