
STM32F407G-DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ee0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800a070  0800a070  0000b070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a420  0800a420  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a420  0800a420  0000b420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a428  0800a428  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a428  0800a428  0000b428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a42c  0800a42c  0000b42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800a430  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1e8  2**0
                  CONTENTS
 10 .bss          00000500  200001e8  200001e8  0000c1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006e8  200006e8  0000c1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013137  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df8  00000000  00000000  0001f34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  00022148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d12  00000000  00000000  00023230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a1c  00000000  00000000  00023f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153fb  00000000  00000000  0002895e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcab4  00000000  00000000  0003dd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a80d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057cc  00000000  00000000  0011a850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0012001c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a058 	.word	0x0800a058

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a058 	.word	0x0800a058

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2108      	movs	r1, #8
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LIS3DSH_WriteIO+0x4c>)
 8000f52:	f002 fed7 	bl	8003d04 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000f56:	f107 010f 	add.w	r1, r7, #15
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	480a      	ldr	r0, [pc, #40]	@ (8000f88 <LIS3DSH_WriteIO+0x50>)
 8000f60:	f003 fc49 	bl	80047f6 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	230a      	movs	r3, #10
 8000f6a:	6839      	ldr	r1, [r7, #0]
 8000f6c:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <LIS3DSH_WriteIO+0x50>)
 8000f6e:	f003 fc42 	bl	80047f6 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000f72:	2201      	movs	r2, #1
 8000f74:	2108      	movs	r1, #8
 8000f76:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <LIS3DSH_WriteIO+0x4c>)
 8000f78:	f002 fec4 	bl	8003d04 <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000
 8000f88:	20000204 	.word	0x20000204

08000f8c <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4818      	ldr	r0, [pc, #96]	@ (800100c <LIS3DSH_ReadIO+0x80>)
 8000fac:	f002 feaa 	bl	8003d04 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000fb0:	f107 0108 	add.w	r1, r7, #8
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4815      	ldr	r0, [pc, #84]	@ (8001010 <LIS3DSH_ReadIO+0x84>)
 8000fba:	f003 fc1c 	bl	80047f6 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	f107 0108 	add.w	r1, r7, #8
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	4811      	ldr	r0, [pc, #68]	@ (8001010 <LIS3DSH_ReadIO+0x84>)
 8000fca:	f003 fd58 	bl	8004a7e <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	480e      	ldr	r0, [pc, #56]	@ (800100c <LIS3DSH_ReadIO+0x80>)
 8000fd4:	f002 fe96 	bl	8003d04 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e00b      	b.n	8000ff6 <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3210      	adds	r2, #16
 8000fe8:	443a      	add	r2, r7
 8000fea:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000fee:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	429a      	cmp	r2, r3
 8001000:	dbed      	blt.n	8000fde <LIS3DSH_ReadIO+0x52>
	}
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	20000204 	.word	0x20000204

08001014 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8001022:	2258      	movs	r2, #88	@ 0x58
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	485b      	ldr	r0, [pc, #364]	@ (8001194 <LIS3DSH_Init+0x180>)
 8001028:	f006 ffa9 	bl	8007f7e <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	78db      	ldrb	r3, [r3, #3]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	b25a      	sxtb	r2, r3
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b25b      	sxtb	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b25b      	sxtb	r3, r3
 800104a:	f023 030f 	bic.w	r3, r3, #15
 800104e:	b25a      	sxtb	r2, r3
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b25b      	sxtb	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 800105c:	f107 030f 	add.w	r3, r7, #15
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	2020      	movs	r0, #32
 8001066:	f7ff ff67 	bl	8000f38 <LIS3DSH_WriteIO>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	789b      	ldrb	r3, [r3, #2]
 8001072:	b25b      	sxtb	r3, r3
 8001074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001078:	b25a      	sxtb	r2, r3
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	b25b      	sxtb	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b25b      	sxtb	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	785b      	ldrb	r3, [r3, #1]
 800108a:	b25b      	sxtb	r3, r3
 800108c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001090:	b25a      	sxtb	r2, r3
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b25b      	sxtb	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 800109e:	f107 030f 	add.w	r3, r7, #15
 80010a2:	2201      	movs	r2, #1
 80010a4:	4619      	mov	r1, r3
 80010a6:	2024      	movs	r0, #36	@ 0x24
 80010a8:	f7ff ff46 	bl	8000f38 <LIS3DSH_WriteIO>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	791b      	ldrb	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d008      	beq.n	80010c6 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 80010b4:	2388      	movs	r3, #136	@ 0x88
 80010b6:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 80010b8:	f107 030f 	add.w	r3, r7, #15
 80010bc:	2201      	movs	r2, #1
 80010be:	4619      	mov	r1, r3
 80010c0:	2023      	movs	r0, #35	@ 0x23
 80010c2:	f7ff ff39 	bl	8000f38 <LIS3DSH_WriteIO>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	2b20      	cmp	r3, #32
 80010cc:	d858      	bhi.n	8001180 <LIS3DSH_Init+0x16c>
 80010ce:	a201      	add	r2, pc, #4	@ (adr r2, 80010d4 <LIS3DSH_Init+0xc0>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	08001159 	.word	0x08001159
 80010d8:	08001181 	.word	0x08001181
 80010dc:	08001181 	.word	0x08001181
 80010e0:	08001181 	.word	0x08001181
 80010e4:	08001181 	.word	0x08001181
 80010e8:	08001181 	.word	0x08001181
 80010ec:	08001181 	.word	0x08001181
 80010f0:	08001181 	.word	0x08001181
 80010f4:	08001161 	.word	0x08001161
 80010f8:	08001181 	.word	0x08001181
 80010fc:	08001181 	.word	0x08001181
 8001100:	08001181 	.word	0x08001181
 8001104:	08001181 	.word	0x08001181
 8001108:	08001181 	.word	0x08001181
 800110c:	08001181 	.word	0x08001181
 8001110:	08001181 	.word	0x08001181
 8001114:	08001169 	.word	0x08001169
 8001118:	08001181 	.word	0x08001181
 800111c:	08001181 	.word	0x08001181
 8001120:	08001181 	.word	0x08001181
 8001124:	08001181 	.word	0x08001181
 8001128:	08001181 	.word	0x08001181
 800112c:	08001181 	.word	0x08001181
 8001130:	08001181 	.word	0x08001181
 8001134:	08001171 	.word	0x08001171
 8001138:	08001181 	.word	0x08001181
 800113c:	08001181 	.word	0x08001181
 8001140:	08001181 	.word	0x08001181
 8001144:	08001181 	.word	0x08001181
 8001148:	08001181 	.word	0x08001181
 800114c:	08001181 	.word	0x08001181
 8001150:	08001181 	.word	0x08001181
 8001154:	08001179 	.word	0x08001179
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <LIS3DSH_Init+0x184>)
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <LIS3DSH_Init+0x188>)
 800115c:	601a      	str	r2, [r3, #0]
			break;
 800115e:	e00f      	b.n	8001180 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <LIS3DSH_Init+0x184>)
 8001162:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <LIS3DSH_Init+0x18c>)
 8001164:	601a      	str	r2, [r3, #0]
			break;
 8001166:	e00b      	b.n	8001180 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <LIS3DSH_Init+0x184>)
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <LIS3DSH_Init+0x190>)
 800116c:	601a      	str	r2, [r3, #0]
			break;
 800116e:	e007      	b.n	8001180 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <LIS3DSH_Init+0x184>)
 8001172:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <LIS3DSH_Init+0x194>)
 8001174:	601a      	str	r2, [r3, #0]
			break;
 8001176:	e003      	b.n	8001180 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <LIS3DSH_Init+0x184>)
 800117a:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <LIS3DSH_Init+0x198>)
 800117c:	601a      	str	r2, [r3, #0]
			break;
 800117e:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8001180:	2201      	movs	r2, #1
 8001182:	2108      	movs	r1, #8
 8001184:	480a      	ldr	r0, [pc, #40]	@ (80011b0 <LIS3DSH_Init+0x19c>)
 8001186:	f002 fdbd 	bl	8003d04 <HAL_GPIO_WritePin>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000204 	.word	0x20000204
 8001198:	20000000 	.word	0x20000000
 800119c:	3d75c28f 	.word	0x3d75c28f
 80011a0:	3df5c28f 	.word	0x3df5c28f
 80011a4:	3e3851ec 	.word	0x3e3851ec
 80011a8:	3e75c28f 	.word	0x3e75c28f
 80011ac:	3f3ae148 	.word	0x3f3ae148
 80011b0:	40021000 	.word	0x40021000

080011b4 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2202      	movs	r2, #2
 80011c2:	4619      	mov	r1, r3
 80011c4:	2028      	movs	r0, #40	@ 0x28
 80011c6:	f7ff fee1 	bl	8000f8c <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 80011ca:	7d7b      	ldrb	r3, [r7, #21]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	7d3a      	ldrb	r2, [r7, #20]
 80011d2:	4413      	add	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	81bb      	strh	r3, [r7, #12]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2202      	movs	r2, #2
 80011e0:	4619      	mov	r1, r3
 80011e2:	202a      	movs	r0, #42	@ 0x2a
 80011e4:	f7ff fed2 	bl	8000f8c <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 80011e8:	7d7b      	ldrb	r3, [r7, #21]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	7d3a      	ldrb	r2, [r7, #20]
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	81fb      	strh	r3, [r7, #14]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2202      	movs	r2, #2
 80011fe:	4619      	mov	r1, r3
 8001200:	202c      	movs	r0, #44	@ 0x2c
 8001202:	f7ff fec3 	bl	8000f8c <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8001206:	7d7b      	ldrb	r3, [r7, #21]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b29b      	uxth	r3, r3
 800120c:	7d3a      	ldrb	r2, [r7, #20]
 800120e:	4413      	add	r3, r2
 8001210:	b29b      	uxth	r3, r3
 8001212:	b21b      	sxth	r3, r3
 8001214:	823b      	strh	r3, [r7, #16]

	return tempDataRaw;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	461a      	mov	r2, r3
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	6010      	str	r0, [r2, #0]
 8001222:	889b      	ldrh	r3, [r3, #4]
 8001224:	8093      	strh	r3, [r2, #4]

}
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	@ 0x30
 8001234:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffba 	bl	80011b4 <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8001240:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124c:	4b31      	ldr	r3, [pc, #196]	@ (8001314 <LIS3DSH_GetDataScaled+0xe4>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001256:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <LIS3DSH_GetDataScaled+0xe8>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001260:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800131c <LIS3DSH_GetDataScaled+0xec>
 8001264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001268:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <LIS3DSH_GetDataScaled+0xf0>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001272:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 8001276:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001282:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <LIS3DSH_GetDataScaled+0xe4>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <LIS3DSH_GetDataScaled+0xf4>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001296:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800131c <LIS3DSH_GetDataScaled+0xec>
 800129a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800129e:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <LIS3DSH_GetDataScaled+0xf8>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 80012ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b8:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <LIS3DSH_GetDataScaled+0xe4>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c2:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <LIS3DSH_GetDataScaled+0xfc>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012cc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800131c <LIS3DSH_GetDataScaled+0xec>
 80012d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012d4:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <LIS3DSH_GetDataScaled+0x100>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012de:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 80012e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e6:	f107 0210 	add.w	r2, r7, #16
 80012ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80012ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f6:	ee06 1a90 	vmov	s13, r1
 80012fa:	ee07 2a10 	vmov	s14, r2
 80012fe:	ee07 3a90 	vmov	s15, r3
}
 8001302:	eeb0 0a66 	vmov.f32	s0, s13
 8001306:	eef0 0a47 	vmov.f32	s1, s14
 800130a:	eeb0 1a67 	vmov.f32	s2, s15
 800130e:	3730      	adds	r7, #48	@ 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004
 800131c:	00000000 	.word	0x00000000
 8001320:	2000025c 	.word	0x2000025c
 8001324:	20000008 	.word	0x20000008
 8001328:	20000260 	.word	0x20000260
 800132c:	2000000c 	.word	0x2000000c
 8001330:	20000264 	.word	0x20000264

08001334 <LIS3DSH_PollDRDY>:
//4. Poll for Data Ready
bool LIS3DSH_PollDRDY(uint32_t msTimeout)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 800133c:	f001 fe04 	bl	8002f48 <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]
	do
	{
		//Read status register with a timeout
		LIS3DSH_ReadIO(0x27, &Acc_status, 1);
 8001342:	f107 030b 	add.w	r3, r7, #11
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	2027      	movs	r0, #39	@ 0x27
 800134c:	f7ff fe1e 	bl	8000f8c <LIS3DSH_ReadIO>
		if(Acc_status & 0x07)break;
 8001350:	7afb      	ldrb	r3, [r7, #11]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10d      	bne.n	8001376 <LIS3DSH_PollDRDY+0x42>

	}while((Acc_status & 0x07)==0 && (HAL_GetTick() - startTick) < msTimeout);
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <LIS3DSH_PollDRDY+0x44>
 8001364:	f001 fdf0 	bl	8002f48 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8e6      	bhi.n	8001342 <LIS3DSH_PollDRDY+0xe>
 8001374:	e000      	b.n	8001378 <LIS3DSH_PollDRDY+0x44>
		if(Acc_status & 0x07)break;
 8001376:	bf00      	nop
	if(Acc_status & 0x07)
 8001378:	7afb      	ldrb	r3, [r7, #11]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <LIS3DSH_PollDRDY+0x52>
	{
		return true;
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <LIS3DSH_PollDRDY+0x54>
	}
	return false;
 8001386:	2300      	movs	r3, #0

}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <LIS3DSH_X_calibrate>:

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	ed87 0a01 	vstr	s0, [r7, #4]
 800139a:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 800139e:	ed97 7a00 	vldr	s14, [r7]
 80013a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013aa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80013ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <LIS3DSH_X_calibrate+0x50>)
 80013b4:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80013b8:	ed97 7a00 	vldr	s14, [r7]
 80013bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013c4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80013e4 <LIS3DSH_X_calibrate+0x54>
 80013c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <LIS3DSH_X_calibrate+0x58>)
 80013ce:	edc3 7a00 	vstr	s15, [r3]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000025c 	.word	0x2000025c
 80013e4:	44fa0000 	.word	0x44fa0000
 80013e8:	20000004 	.word	0x20000004

080013ec <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013f6:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80013fa:	ed97 7a00 	vldr	s14, [r7]
 80013fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001406:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800140a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <LIS3DSH_Y_calibrate+0x50>)
 8001410:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8001414:	ed97 7a00 	vldr	s14, [r7]
 8001418:	edd7 7a01 	vldr	s15, [r7, #4]
 800141c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001420:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001440 <LIS3DSH_Y_calibrate+0x54>
 8001424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <LIS3DSH_Y_calibrate+0x58>)
 800142a:	edc3 7a00 	vstr	s15, [r3]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000260 	.word	0x20000260
 8001440:	44fa0000 	.word	0x44fa0000
 8001444:	20000008 	.word	0x20000008

08001448 <Max31865_delay>:

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7
//#########################################################################################################################
void  Max31865_delay(uint32_t delay_ms)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  #if (_MAX31865_USE_FREERTOS == 1)
  osDelay(delay_ms);
  #else
  HAL_Delay(delay_ms);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f001 fd85 	bl	8002f60 <HAL_Delay>
  #endif  
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <Max31865_readRegisterN>:
//#########################################################################################################################
void Max31865_readRegisterN(Max31865_t *max31865,uint8_t addr, uint8_t *buffer, uint8_t n)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b088      	sub	sp, #32
 8001462:	af02      	add	r7, sp, #8
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	461a      	mov	r2, r3
 800146a:	460b      	mov	r3, r1
 800146c:	72fb      	strb	r3, [r7, #11]
 800146e:	4613      	mov	r3, r2
 8001470:	72bb      	strb	r3, [r7, #10]
  uint8_t tmp = 0xFF;
 8001472:	23ff      	movs	r3, #255	@ 0xff
 8001474:	75fb      	strb	r3, [r7, #23]
	addr &= 0x7F;
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800147c:	b2db      	uxtb	r3, r3
 800147e:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);          
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	889b      	ldrh	r3, [r3, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	f002 fc3a 	bl	8003d04 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6898      	ldr	r0, [r3, #8]
 8001494:	f107 010b 	add.w	r1, r7, #11
 8001498:	2364      	movs	r3, #100	@ 0x64
 800149a:	2201      	movs	r2, #1
 800149c:	f003 f9ab 	bl	80047f6 <HAL_SPI_Transmit>
	while (n--)
 80014a0:	e00c      	b.n	80014bc <Max31865_readRegisterN+0x5e>
	{
    HAL_SPI_TransmitReceive(max31865->spi, &tmp, buffer, 1, 100);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6898      	ldr	r0, [r3, #8]
 80014a6:	f107 0117 	add.w	r1, r7, #23
 80014aa:	2364      	movs	r3, #100	@ 0x64
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	f003 fbfd 	bl	8004cb0 <HAL_SPI_TransmitReceive>
		buffer++;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3301      	adds	r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
	while (n--)
 80014bc:	7abb      	ldrb	r3, [r7, #10]
 80014be:	1e5a      	subs	r2, r3, #1
 80014c0:	72ba      	strb	r2, [r7, #10]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ed      	bne.n	80014a2 <Max31865_readRegisterN+0x44>
	}
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);      
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	889b      	ldrh	r3, [r3, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4619      	mov	r1, r3
 80014d2:	f002 fc17 	bl	8003d04 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <Max31865_readRegister8>:
//#########################################################################################################################
uint8_t Max31865_readRegister8(Max31865_t *max31865,uint8_t addr)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
	Max31865_readRegisterN(max31865, addr, &ret, 1);
 80014ee:	f107 020f 	add.w	r2, r7, #15
 80014f2:	78f9      	ldrb	r1, [r7, #3]
 80014f4:	2301      	movs	r3, #1
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffb1 	bl	800145e <Max31865_readRegisterN>
	return ret;  
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <Max31865_readRegister16>:
//#########################################################################################################################
uint16_t Max31865_readRegister16(Max31865_t *max31865,uint8_t addr)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[2] = {0, 0};
 8001512:	2300      	movs	r3, #0
 8001514:	81bb      	strh	r3, [r7, #12]
	Max31865_readRegisterN(max31865, addr, buffer, 2);
 8001516:	f107 020c 	add.w	r2, r7, #12
 800151a:	78f9      	ldrb	r1, [r7, #3]
 800151c:	2302      	movs	r3, #2
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff9d 	bl	800145e <Max31865_readRegisterN>
	uint16_t ret = buffer[0];
 8001524:	7b3b      	ldrb	r3, [r7, #12]
 8001526:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 8001528:	89fb      	ldrh	r3, [r7, #14]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	81fb      	strh	r3, [r7, #14]
	ret |=  buffer[1];
 800152e:	7b7b      	ldrb	r3, [r7, #13]
 8001530:	461a      	mov	r2, r3
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	4313      	orrs	r3, r2
 8001536:	81fb      	strh	r3, [r7, #14]
	return ret;
 8001538:	89fb      	ldrh	r3, [r7, #14]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <Max31865_writeRegister8>:
//#########################################################################################################################
void Max31865_writeRegister8(Max31865_t *max31865,uint8_t addr, uint8_t data)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	70fb      	strb	r3, [r7, #3]
 800154e:	4613      	mov	r3, r2
 8001550:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);          
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	889b      	ldrh	r3, [r3, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	f002 fbd1 	bl	8003d04 <HAL_GPIO_WritePin>
  addr |= 0x80;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001568:	b2db      	uxtb	r3, r3
 800156a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);   
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6898      	ldr	r0, [r3, #8]
 8001570:	1cf9      	adds	r1, r7, #3
 8001572:	2364      	movs	r3, #100	@ 0x64
 8001574:	2201      	movs	r2, #1
 8001576:	f003 f93e 	bl	80047f6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(max31865->spi,&data, 1, 100);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6898      	ldr	r0, [r3, #8]
 800157e:	1cb9      	adds	r1, r7, #2
 8001580:	2364      	movs	r3, #100	@ 0x64
 8001582:	2201      	movs	r2, #1
 8001584:	f003 f937 	bl	80047f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);          
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	889b      	ldrh	r3, [r3, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	f002 fbb6 	bl	8003d04 <HAL_GPIO_WritePin>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <Max31865_readFault>:
//#########################################################################################################################
uint8_t Max31865_readFault(Max31865_t *max31865)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return Max31865_readRegister8(max31865, MAX31856_FAULTSTAT_REG);
 80015a8:	2107      	movs	r1, #7
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff97 	bl	80014de <Max31865_readRegister8>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <Max31865_clearFault>:
//#########################################################################################################################
void Max31865_clearFault(Max31865_t *max31865)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80015c2:	2100      	movs	r1, #0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff8a 	bl	80014de <Max31865_readRegister8>
 80015ca:	4603      	mov	r3, r0
 80015cc:	73fb      	strb	r3, [r7, #15]
	t &= ~0x2C;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	f023 032c 	bic.w	r3, r3, #44	@ 0x2c
 80015d4:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_FAULTSTAT;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	461a      	mov	r2, r3
 80015e2:	2100      	movs	r1, #0
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffac 	bl	8001542 <Max31865_writeRegister8>
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <Max31865_enableBias>:
//#########################################################################################################################
void Max31865_enableBias(Max31865_t *max31865, uint8_t enable)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80015fe:	2100      	movs	r1, #0
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff6c 	bl	80014de <Max31865_readRegister8>
 8001606:	4603      	mov	r3, r0
 8001608:	73fb      	strb	r3, [r7, #15]
	if (enable)
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <Max31865_enableBias+0x28>
		t |= MAX31856_CONFIG_BIAS;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e003      	b.n	8001622 <Max31865_enableBias+0x30>
	else
		t &= ~MAX31856_CONFIG_BIAS;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001620:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	461a      	mov	r2, r3
 8001626:	2100      	movs	r1, #0
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff8a 	bl	8001542 <Max31865_writeRegister8>
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <Max31865_autoConvert>:
//#########################################################################################################################
void Max31865_autoConvert(Max31865_t *max31865, uint8_t enable)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001642:	2100      	movs	r1, #0
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff4a 	bl	80014de <Max31865_readRegister8>
 800164a:	4603      	mov	r3, r0
 800164c:	73fb      	strb	r3, [r7, #15]
	if (enable)
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <Max31865_autoConvert+0x28>
		t |= MAX31856_CONFIG_MODEAUTO;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e003      	b.n	8001666 <Max31865_autoConvert+0x30>
	else
		t &= ~MAX31856_CONFIG_MODEAUTO; 
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001664:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	461a      	mov	r2, r3
 800166a:	2100      	movs	r1, #0
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff68 	bl	8001542 <Max31865_writeRegister8>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <Max31865_setWires>:
//#########################################################################################################################
void Max31865_setWires(Max31865_t *max31865, uint8_t numWires)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001686:	2100      	movs	r1, #0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff28 	bl	80014de <Max31865_readRegister8>
 800168e:	4603      	mov	r3, r0
 8001690:	73fb      	strb	r3, [r7, #15]
	if (numWires == 3)
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d104      	bne.n	80016a2 <Max31865_setWires+0x28>
		t |= MAX31856_CONFIG_3WIRE;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e003      	b.n	80016aa <Max31865_setWires+0x30>
	else
		t &= ~MAX31856_CONFIG_3WIRE;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	f023 0310 	bic.w	r3, r3, #16
 80016a8:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	461a      	mov	r2, r3
 80016ae:	2100      	movs	r1, #0
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff46 	bl	8001542 <Max31865_writeRegister8>
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <Max31865_setFilter>:
//#########################################################################################################################
void Max31865_setFilter(Max31865_t *max31865, uint8_t filterHz)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80016ca:	2100      	movs	r1, #0
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff06 	bl	80014de <Max31865_readRegister8>
 80016d2:	4603      	mov	r3, r0
 80016d4:	73fb      	strb	r3, [r7, #15]
	if (filterHz == 50)
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	2b32      	cmp	r3, #50	@ 0x32
 80016da:	d104      	bne.n	80016e6 <Max31865_setFilter+0x28>
		t |= MAX31856_CONFIG_FILT50HZ;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e003      	b.n	80016ee <Max31865_setFilter+0x30>
	else
		t &= ~MAX31856_CONFIG_FILT50HZ;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	461a      	mov	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff24 	bl	8001542 <Max31865_writeRegister8>
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <Max31865_readRTD>:
//#########################################################################################################################
uint16_t Max31865_readRTD (Max31865_t *max31865)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	Max31865_clearFault(max31865);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ff55 	bl	80015ba <Max31865_clearFault>
	Max31865_enableBias(max31865, 1);
 8001710:	2101      	movs	r1, #1
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ff6d 	bl	80015f2 <Max31865_enableBias>
	Max31865_delay(10);
 8001718:	200a      	movs	r0, #10
 800171a:	f7ff fe95 	bl	8001448 <Max31865_delay>
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 800171e:	2100      	movs	r1, #0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fedc 	bl	80014de <Max31865_readRegister8>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_1SHOT;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	461a      	mov	r2, r3
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff02 	bl	8001542 <Max31865_writeRegister8>
	Max31865_delay(65);
 800173e:	2041      	movs	r0, #65	@ 0x41
 8001740:	f7ff fe82 	bl	8001448 <Max31865_delay>
	uint16_t rtd = Max31865_readRegister16(max31865, MAX31856_RTDMSB_REG);
 8001744:	2101      	movs	r1, #1
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fedd 	bl	8001506 <Max31865_readRegister16>
 800174c:	4603      	mov	r3, r0
 800174e:	81bb      	strh	r3, [r7, #12]
	rtd >>= 1;
 8001750:	89bb      	ldrh	r3, [r7, #12]
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	81bb      	strh	r3, [r7, #12]
	return rtd;
 8001756:	89bb      	ldrh	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <Max31865_init>:
//#########################################################################################################################
//#########################################################################################################################
//#########################################################################################################################
void  Max31865_init(Max31865_t *max31865,SPI_HandleTypeDef *spi,GPIO_TypeDef  *cs_gpio,uint16_t cs_pin,uint8_t  numwires, uint8_t filterHz)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	807b      	strh	r3, [r7, #2]
  if(max31865->lock == 1)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d102      	bne.n	800177c <Max31865_init+0x1c>
    Max31865_delay(1);
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff fe66 	bl	8001448 <Max31865_delay>
  max31865->lock = 1;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	731a      	strb	r2, [r3, #12]
  max31865->spi = spi;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	609a      	str	r2, [r3, #8]
  max31865->cs_gpio = cs_gpio;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
  max31865->cs_pin = cs_pin; 
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	887a      	ldrh	r2, [r7, #2]
 8001792:	809a      	strh	r2, [r3, #4]
  HAL_GPIO_WritePin(max31865->cs_gpio,max31865->cs_pin,GPIO_PIN_SET);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	889b      	ldrh	r3, [r3, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	4619      	mov	r1, r3
 80017a0:	f002 fab0 	bl	8003d04 <HAL_GPIO_WritePin>
  Max31865_delay(100);
 80017a4:	2064      	movs	r0, #100	@ 0x64
 80017a6:	f7ff fe4f 	bl	8001448 <Max31865_delay>
  Max31865_setWires(max31865, numwires);
 80017aa:	7e3b      	ldrb	r3, [r7, #24]
 80017ac:	4619      	mov	r1, r3
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff ff63 	bl	800167a <Max31865_setWires>
	Max31865_enableBias(max31865, 0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f7ff ff1b 	bl	80015f2 <Max31865_enableBias>
	Max31865_autoConvert(max31865, 0);
 80017bc:	2100      	movs	r1, #0
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff ff39 	bl	8001636 <Max31865_autoConvert>
	Max31865_clearFault(max31865);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7ff fef8 	bl	80015ba <Max31865_clearFault>
  Max31865_setFilter(max31865, filterHz);  
 80017ca:	7f3b      	ldrb	r3, [r7, #28]
 80017cc:	4619      	mov	r1, r3
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff ff75 	bl	80016be <Max31865_setFilter>
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	0000      	movs	r0, r0
	...

080017e0 <Max31865_readTempC>:
//#########################################################################################################################
bool Max31865_readTempC(Max31865_t *max31865,float *readTemp)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  if(max31865->lock == 1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7b1b      	ldrb	r3, [r3, #12]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <Max31865_readTempC+0x18>
    Max31865_delay(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7ff fe28 	bl	8001448 <Max31865_delay>
  max31865->lock = 1;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	731a      	strb	r2, [r3, #12]
  bool isOk = false;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  float Z1, Z2, Z3, Z4, Rt, temp;
	Rt = Max31865_readRTD(max31865);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff7c 	bl	8001702 <Max31865_readRTD>
 800180a:	4603      	mov	r3, r0
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001814:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt /= 32768;
 8001818:	ed97 7a08 	vldr	s14, [r7, #32]
 800181c:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001a80 <Max31865_readTempC+0x2a0>
 8001820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001824:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt *= _MAX31865_RREF;
 8001828:	edd7 7a08 	vldr	s15, [r7, #32]
 800182c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8001a84 <Max31865_readTempC+0x2a4>
 8001830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001834:	edc7 7a08 	vstr	s15, [r7, #32]
	Z1 = -RTD_A;
 8001838:	4b93      	ldr	r3, [pc, #588]	@ (8001a88 <Max31865_readTempC+0x2a8>)
 800183a:	61fb      	str	r3, [r7, #28]
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
 800183c:	4b93      	ldr	r3, [pc, #588]	@ (8001a8c <Max31865_readTempC+0x2ac>)
 800183e:	61bb      	str	r3, [r7, #24]
	Z3 = (4 * RTD_B) / _MAX31865_RNOMINAL;
 8001840:	4b93      	ldr	r3, [pc, #588]	@ (8001a90 <Max31865_readTempC+0x2b0>)
 8001842:	617b      	str	r3, [r7, #20]
	Z4 = 2 * RTD_B;
 8001844:	4b93      	ldr	r3, [pc, #588]	@ (8001a94 <Max31865_readTempC+0x2b4>)
 8001846:	613b      	str	r3, [r7, #16]
	temp = Z2 + (Z3 * Rt);
 8001848:	ed97 7a05 	vldr	s14, [r7, #20]
 800184c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001854:	ed97 7a06 	vldr	s14, [r7, #24]
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	edc7 7a03 	vstr	s15, [r7, #12]
	temp = (sqrtf(temp) + Z1) / Z4;
 8001860:	ed97 0a03 	vldr	s0, [r7, #12]
 8001864:	f008 fbd6 	bl	800a014 <sqrtf>
 8001868:	eeb0 7a40 	vmov.f32	s14, s0
 800186c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001870:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001874:	ed97 7a04 	vldr	s14, [r7, #16]
 8001878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (temp >= 0)
 8001880:	edd7 7a03 	vldr	s15, [r7, #12]
 8001884:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188c:	db11      	blt.n	80018b2 <Max31865_readTempC+0xd2>
  {
    *readTemp = temp; 
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	601a      	str	r2, [r3, #0]
    if(Max31865_readFault(max31865) == 0)
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff fe83 	bl	80015a0 <Max31865_readFault>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <Max31865_readTempC+0xc6>
      isOk = true;        
 80018a0:	2301      	movs	r3, #1
 80018a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    max31865->lock = 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	731a      	strb	r2, [r3, #12]
    return isOk;
 80018ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018b0:	e0cb      	b.n	8001a4a <Max31865_readTempC+0x26a>
  }
	Rt /= _MAX31865_RNOMINAL;
 80018b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80018b6:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8001a98 <Max31865_readTempC+0x2b8>
 80018ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018be:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt *= 100;    
 80018c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80018c6:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001a98 <Max31865_readTempC+0x2b8>
 80018ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ce:	edc7 7a08 	vstr	s15, [r7, #32]
	float rpoly = Rt;
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	60bb      	str	r3, [r7, #8]
	temp = -242.02;
 80018d6:	4b71      	ldr	r3, [pc, #452]	@ (8001a9c <Max31865_readTempC+0x2bc>)
 80018d8:	60fb      	str	r3, [r7, #12]
	temp += 2.2228 * rpoly;
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f7fe fe34 	bl	8000548 <__aeabi_f2d>
 80018e0:	4604      	mov	r4, r0
 80018e2:	460d      	mov	r5, r1
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	f7fe fe2f 	bl	8000548 <__aeabi_f2d>
 80018ea:	a35b      	add	r3, pc, #364	@ (adr r3, 8001a58 <Max31865_readTempC+0x278>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fe82 	bl	80005f8 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fcc6 	bl	800028c <__adddf3>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f94e 	bl	8000ba8 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // square
 8001910:	ed97 7a02 	vldr	s14, [r7, #8]
 8001914:	edd7 7a08 	vldr	s15, [r7, #32]
 8001918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191c:	edc7 7a02 	vstr	s15, [r7, #8]
	temp += 2.5859e-3 * rpoly;
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7fe fe11 	bl	8000548 <__aeabi_f2d>
 8001926:	4604      	mov	r4, r0
 8001928:	460d      	mov	r5, r1
 800192a:	68b8      	ldr	r0, [r7, #8]
 800192c:	f7fe fe0c 	bl	8000548 <__aeabi_f2d>
 8001930:	a34b      	add	r3, pc, #300	@ (adr r3, 8001a60 <Max31865_readTempC+0x280>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe fe5f 	bl	80005f8 <__aeabi_dmul>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4620      	mov	r0, r4
 8001940:	4629      	mov	r1, r5
 8001942:	f7fe fca3 	bl	800028c <__adddf3>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f92b 	bl	8000ba8 <__aeabi_d2f>
 8001952:	4603      	mov	r3, r0
 8001954:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^3
 8001956:	ed97 7a02 	vldr	s14, [r7, #8]
 800195a:	edd7 7a08 	vldr	s15, [r7, #32]
 800195e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001962:	edc7 7a02 	vstr	s15, [r7, #8]
	temp -= 4.8260e-6 * rpoly;
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f7fe fdee 	bl	8000548 <__aeabi_f2d>
 800196c:	4604      	mov	r4, r0
 800196e:	460d      	mov	r5, r1
 8001970:	68b8      	ldr	r0, [r7, #8]
 8001972:	f7fe fde9 	bl	8000548 <__aeabi_f2d>
 8001976:	a33c      	add	r3, pc, #240	@ (adr r3, 8001a68 <Max31865_readTempC+0x288>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fe3c 	bl	80005f8 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4620      	mov	r0, r4
 8001986:	4629      	mov	r1, r5
 8001988:	f7fe fc7e 	bl	8000288 <__aeabi_dsub>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f908 	bl	8000ba8 <__aeabi_d2f>
 8001998:	4603      	mov	r3, r0
 800199a:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^4
 800199c:	ed97 7a02 	vldr	s14, [r7, #8]
 80019a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	edc7 7a02 	vstr	s15, [r7, #8]
	temp -= 2.8183e-8 * rpoly;
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7fe fdcb 	bl	8000548 <__aeabi_f2d>
 80019b2:	4604      	mov	r4, r0
 80019b4:	460d      	mov	r5, r1
 80019b6:	68b8      	ldr	r0, [r7, #8]
 80019b8:	f7fe fdc6 	bl	8000548 <__aeabi_f2d>
 80019bc:	a32c      	add	r3, pc, #176	@ (adr r3, 8001a70 <Max31865_readTempC+0x290>)
 80019be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c2:	f7fe fe19 	bl	80005f8 <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4620      	mov	r0, r4
 80019cc:	4629      	mov	r1, r5
 80019ce:	f7fe fc5b 	bl	8000288 <__aeabi_dsub>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f8e5 	bl	8000ba8 <__aeabi_d2f>
 80019de:	4603      	mov	r3, r0
 80019e0:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^5
 80019e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80019e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80019ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ee:	edc7 7a02 	vstr	s15, [r7, #8]
	temp += 1.5243e-10 * rpoly;
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7fe fda8 	bl	8000548 <__aeabi_f2d>
 80019f8:	4604      	mov	r4, r0
 80019fa:	460d      	mov	r5, r1
 80019fc:	68b8      	ldr	r0, [r7, #8]
 80019fe:	f7fe fda3 	bl	8000548 <__aeabi_f2d>
 8001a02:	a31d      	add	r3, pc, #116	@ (adr r3, 8001a78 <Max31865_readTempC+0x298>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdf6 	bl	80005f8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fc3a 	bl	800028c <__adddf3>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f8c2 	bl	8000ba8 <__aeabi_d2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	60fb      	str	r3, [r7, #12]

  *readTemp = temp; 
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	601a      	str	r2, [r3, #0]
  if(Max31865_readFault(max31865) == 0)
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fdb6 	bl	80015a0 <Max31865_readFault>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <Max31865_readTempC+0x260>
    isOk = true;        
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  max31865->lock = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	731a      	strb	r2, [r3, #12]
  return isOk;  
 8001a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3728      	adds	r7, #40	@ 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	f3af 8000 	nop.w
 8001a58:	5dcc63f1 	.word	0x5dcc63f1
 8001a5c:	4001c84b 	.word	0x4001c84b
 8001a60:	7dc882bb 	.word	0x7dc882bb
 8001a64:	3f652f06 	.word	0x3f652f06
 8001a68:	c766c293 	.word	0xc766c293
 8001a6c:	3ed43de0 	.word	0x3ed43de0
 8001a70:	513156ce 	.word	0x513156ce
 8001a74:	3e5e42e2 	.word	0x3e5e42e2
 8001a78:	61e4fa3e 	.word	0x61e4fa3e
 8001a7c:	3de4f327 	.word	0x3de4f327
 8001a80:	47000000 	.word	0x47000000
 8001a84:	43d70000 	.word	0x43d70000
 8001a88:	bb801132 	.word	0xbb801132
 8001a8c:	37938317 	.word	0x37938317
 8001a90:	b2c66d70 	.word	0xb2c66d70
 8001a94:	b59b057f 	.word	0xb59b057f
 8001a98:	42c80000 	.word	0x42c80000
 8001a9c:	c372051f 	.word	0xc372051f

08001aa0 <Max31865_Filter>:
  *readTemp = (*readTemp * 9.0f / 5.0f) + 32.0f;
  return isOk;
}
//#########################################################################################################################
float Max31865_Filter(float	newInput, float	lastOutput, float efectiveFactor)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001aaa:	edc7 0a02 	vstr	s1, [r7, #8]
 8001aae:	ed87 1a01 	vstr	s2, [r7, #4]
	return ((float)lastOutput*(1.0f-efectiveFactor)) + ((float)newInput*efectiveFactor) ;
 8001ab2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001abe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac6:	edd7 6a03 	vldr	s13, [r7, #12]
 8001aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aea:	463b      	mov	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001af6:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001af8:	4a21      	ldr	r2, [pc, #132]	@ (8001b80 <MX_ADC1_Init+0x9c>)
 8001afa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001afc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001b02:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b16:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b24:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b26:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <MX_ADC1_Init+0xa0>)
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b44:	480d      	ldr	r0, [pc, #52]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b46:	f001 fa2f 	bl	8002fa8 <HAL_ADC_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b50:	f000 fc6e 	bl	8002430 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b60:	463b      	mov	r3, r7
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <MX_ADC1_Init+0x98>)
 8001b66:	f001 fc01 	bl	800336c <HAL_ADC_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b70:	f000 fc5e 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000268 	.word	0x20000268
 8001b80:	40012000 	.word	0x40012000
 8001b84:	0f000001 	.word	0x0f000001

08001b88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a17      	ldr	r2, [pc, #92]	@ (8001c04 <HAL_ADC_MspInit+0x7c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d127      	bne.n	8001bfa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <HAL_ADC_MspInit+0x80>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	4a15      	ldr	r2, [pc, #84]	@ (8001c08 <HAL_ADC_MspInit+0x80>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bba:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <HAL_ADC_MspInit+0x80>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b0f      	ldr	r3, [pc, #60]	@ (8001c08 <HAL_ADC_MspInit+0x80>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a0e      	ldr	r2, [pc, #56]	@ (8001c08 <HAL_ADC_MspInit+0x80>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <HAL_ADC_MspInit+0x80>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001be2:	2301      	movs	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be6:	2303      	movs	r3, #3
 8001be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <HAL_ADC_MspInit+0x84>)
 8001bf6:	f001 fee9 	bl	80039cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	@ 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40012000 	.word	0x40012000
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020000 	.word	0x40020000

08001c10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b59      	ldr	r3, [pc, #356]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a58      	ldr	r2, [pc, #352]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c30:	f043 0310 	orr.w	r3, r3, #16
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b56      	ldr	r3, [pc, #344]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b52      	ldr	r3, [pc, #328]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a51      	ldr	r2, [pc, #324]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b4f      	ldr	r3, [pc, #316]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b4b      	ldr	r3, [pc, #300]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a4a      	ldr	r2, [pc, #296]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b48      	ldr	r3, [pc, #288]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b44      	ldr	r3, [pc, #272]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a43      	ldr	r2, [pc, #268]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b41      	ldr	r3, [pc, #260]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	@ (8001d90 <MX_GPIO_Init+0x180>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MEMS_CS_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f241 0108 	movw	r1, #4104	@ 0x1008
 8001cb8:	4836      	ldr	r0, [pc, #216]	@ (8001d94 <MX_GPIO_Init+0x184>)
 8001cba:	f002 f823 	bl	8003d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLed_Pin|OrangeLed_Pin|BlueLed_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8001cc4:	4834      	ldr	r0, [pc, #208]	@ (8001d98 <MX_GPIO_Init+0x188>)
 8001cc6:	f002 f81d 	bl	8003d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001cd0:	4832      	ldr	r0, [pc, #200]	@ (8001d9c <MX_GPIO_Init+0x18c>)
 8001cd2:	f002 f817 	bl	8003d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PE12 */
  GPIO_InitStruct.Pin = MEMS_CS_Pin|GPIO_PIN_12;
 8001cd6:	f241 0308 	movw	r3, #4104	@ 0x1008
 8001cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	4829      	ldr	r0, [pc, #164]	@ (8001d94 <MX_GPIO_Init+0x184>)
 8001cf0:	f001 fe6c 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GreenLed_Pin|OrangeLed_Pin|BlueLed_Pin;
 8001cf4:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4822      	ldr	r0, [pc, #136]	@ (8001d98 <MX_GPIO_Init+0x188>)
 8001d0e:	f001 fe5d 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	481c      	ldr	r0, [pc, #112]	@ (8001d9c <MX_GPIO_Init+0x18c>)
 8001d2c:	f001 fe4e 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d36:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	4816      	ldr	r0, [pc, #88]	@ (8001da0 <MX_GPIO_Init+0x190>)
 8001d48:	f001 fe40 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <MX_GPIO_Init+0x184>)
 8001d62:	f001 fe33 	bl	80039cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2006      	movs	r0, #6
 8001d6c:	f001 fdf7 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d70:	2006      	movs	r0, #6
 8001d72:	f001 fe10 	bl	8003996 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2017      	movs	r0, #23
 8001d7c:	f001 fdef 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d80:	2017      	movs	r0, #23
 8001d82:	f001 fe08 	bl	8003996 <HAL_NVIC_EnableIRQ>

}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	@ 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020000 	.word	0x40020000

08001da4 <low_pass_filter>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float low_pass_filter(float new_sample) {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	ed87 0a01 	vstr	s0, [r7, #4]
	filtered_y = alpha * new_sample + (1.0f - alpha) * filtered_y;
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <low_pass_filter+0x50>)
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <low_pass_filter+0x50>)
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dc6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dca:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <low_pass_filter+0x54>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd8:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <low_pass_filter+0x54>)
 8001dda:	edc3 7a00 	vstr	s15, [r3]
    return filtered_y;
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <low_pass_filter+0x54>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	ee07 3a90 	vmov	s15, r3
}
 8001de6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	20000010 	.word	0x20000010
 8001df8:	20000340 	.word	0x20000340

08001dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e00:	b09b      	sub	sp, #108	@ 0x6c
 8001e02:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e04:	f001 f83a 	bl	8002e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e08:	f000 fa88 	bl	800231c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e0c:	f7ff ff00 	bl	8001c10 <MX_GPIO_Init>
  MX_TIM8_Init();
 8001e10:	f000 fe10 	bl	8002a34 <MX_TIM8_Init>
  MX_TIM11_Init();
 8001e14:	f000 fe92 	bl	8002b3c <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8001e18:	f000 ff94 	bl	8002d44 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001e1c:	f000 fb44 	bl	80024a8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001e20:	f000 fb0c 	bl	800243c <MX_SPI1_Init>
  MX_TIM6_Init();
 8001e24:	f000 fdd0 	bl	80029c8 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001e28:	f7ff fe5c 	bl	8001ae4 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001e2c:	f000 fb72 	bl	8002514 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001e30:	4872      	ldr	r0, [pc, #456]	@ (8001ffc <main+0x200>)
 8001e32:	f003 fae1 	bl	80053f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim11);
 8001e36:	4872      	ldr	r0, [pc, #456]	@ (8002000 <main+0x204>)
 8001e38:	f003 fa76 	bl	8005328 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 8001e3c:	4870      	ldr	r0, [pc, #448]	@ (8002000 <main+0x204>)
 8001e3e:	f003 fa73 	bl	8005328 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001e42:	2100      	movs	r1, #0
 8001e44:	486e      	ldr	r0, [pc, #440]	@ (8002000 <main+0x204>)
 8001e46:	f003 fba1 	bl	800558c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	486d      	ldr	r0, [pc, #436]	@ (8002004 <main+0x208>)
 8001e4e:	f003 fcbf 	bl	80057d0 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8001e52:	2104      	movs	r1, #4
 8001e54:	486b      	ldr	r0, [pc, #428]	@ (8002004 <main+0x208>)
 8001e56:	f003 fcbb 	bl	80057d0 <HAL_TIM_IC_Start>
  TIM11->CCR1 = 4;
 8001e5a:	4b6b      	ldr	r3, [pc, #428]	@ (8002008 <main+0x20c>)
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	635a      	str	r2, [r3, #52]	@ 0x34

  Max31865_init(&pt100,&hspi2,GPIOC,GPIO_PIN_8,3,50);
 8001e60:	2332      	movs	r3, #50	@ 0x32
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2303      	movs	r3, #3
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6c:	4a67      	ldr	r2, [pc, #412]	@ (800200c <main+0x210>)
 8001e6e:	4968      	ldr	r1, [pc, #416]	@ (8002010 <main+0x214>)
 8001e70:	4868      	ldr	r0, [pc, #416]	@ (8002014 <main+0x218>)
 8001e72:	f7ff fc75 	bl	8001760 <Max31865_init>
  Max31865_init(&pt100E,&hspi3,GPIOE,GPIO_PIN_12,3,50);
 8001e76:	2332      	movs	r3, #50	@ 0x32
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e82:	4a65      	ldr	r2, [pc, #404]	@ (8002018 <main+0x21c>)
 8001e84:	4965      	ldr	r1, [pc, #404]	@ (800201c <main+0x220>)
 8001e86:	4866      	ldr	r0, [pc, #408]	@ (8002020 <main+0x224>)
 8001e88:	f7ff fc6a 	bl	8001760 <Max31865_init>

  accelerometerConfig.dataRate = LIS3DSH_DATARATE_12_5;
 8001e8c:	2330      	movs	r3, #48	@ 0x30
 8001e8e:	f887 3020 	strb.w	r3, [r7, #32]
  accelerometerConfig.fullScale = LIS3DSH_FULLSCALE_4;
 8001e92:	2308      	movs	r3, #8
 8001e94:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  accelerometerConfig.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8001e98:	23c0      	movs	r3, #192	@ 0xc0
 8001e9a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  accelerometerConfig.enableAxes = LIS3DSH_XYZ_ENABLE;
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  accelerometerConfig.interruptEnable = false;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  LIS3DSH_Init(&hspi1, &accelerometerConfig);
 8001eaa:	f107 0320 	add.w	r3, r7, #32
 8001eae:	4619      	mov	r1, r3
 8001eb0:	485c      	ldr	r0, [pc, #368]	@ (8002024 <main+0x228>)
 8001eb2:	f7ff f8af 	bl	8001014 <LIS3DSH_Init>
  LIS3DSH_X_calibrate(-1027, 1061);
 8001eb6:	eddf 0a5c 	vldr	s1, [pc, #368]	@ 8002028 <main+0x22c>
 8001eba:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 800202c <main+0x230>
 8001ebe:	f7ff fa67 	bl	8001390 <LIS3DSH_X_calibrate>
  LIS3DSH_Y_calibrate(-999, 990);
 8001ec2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8002030 <main+0x234>
 8001ec6:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8002034 <main+0x238>
 8001eca:	f7ff fa8f 	bl	80013ec <LIS3DSH_Y_calibrate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// DISTANCE SENSORS
	HAL_GPIO_TogglePin(BlueLed_GPIO_Port, BlueLed_Pin);
 8001ece:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ed2:	4859      	ldr	r0, [pc, #356]	@ (8002038 <main+0x23c>)
 8001ed4:	f001 ff2f 	bl	8003d36 <HAL_GPIO_TogglePin>
	if (HAL_GetTick() - delay_hcsr04 >= 100){ // every 100 ms
 8001ed8:	f001 f836 	bl	8002f48 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b57      	ldr	r3, [pc, #348]	@ (800203c <main+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b63      	cmp	r3, #99	@ 0x63
 8001ee6:	d92c      	bls.n	8001f42 <main+0x146>
		delay_hcsr04 = HAL_GetTick();
 8001ee8:	f001 f82e 	bl	8002f48 <HAL_GetTick>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4a53      	ldr	r2, [pc, #332]	@ (800203c <main+0x240>)
 8001ef0:	6013      	str	r3, [r2, #0]
		echo1 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4843      	ldr	r0, [pc, #268]	@ (8002004 <main+0x208>)
 8001ef6:	f003 ffd7 	bl	8005ea8 <HAL_TIM_ReadCapturedValue>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4a50      	ldr	r2, [pc, #320]	@ (8002040 <main+0x244>)
 8001efe:	6013      	str	r3, [r2, #0]
		echo2 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 8001f00:	2104      	movs	r1, #4
 8001f02:	4840      	ldr	r0, [pc, #256]	@ (8002004 <main+0x208>)
 8001f04:	f003 ffd0 	bl	8005ea8 <HAL_TIM_ReadCapturedValue>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4a4e      	ldr	r2, [pc, #312]	@ (8002044 <main+0x248>)
 8001f0c:	6013      	str	r3, [r2, #0]
		dist1 = echo1 / 58.0f;
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8002040 <main+0x244>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f1a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8002048 <main+0x24c>
 8001f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f22:	4b4a      	ldr	r3, [pc, #296]	@ (800204c <main+0x250>)
 8001f24:	edc3 7a00 	vstr	s15, [r3]
		dist2 = echo2 / 58.0f;
 8001f28:	4b46      	ldr	r3, [pc, #280]	@ (8002044 <main+0x248>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f34:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002048 <main+0x24c>
 8001f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3c:	4b44      	ldr	r3, [pc, #272]	@ (8002050 <main+0x254>)
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
	}

	float tempIn;
	float tempE;
	HAL_GPIO_TogglePin(GreenLed_GPIO_Port, GreenLed_Pin);
 8001f42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f46:	483c      	ldr	r0, [pc, #240]	@ (8002038 <main+0x23c>)
 8001f48:	f001 fef5 	bl	8003d36 <HAL_GPIO_TogglePin>

	// PT100 temperature sensor interior
	pt100isOK = Max31865_readTempC(&pt100,&tempIn);
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	4830      	ldr	r0, [pc, #192]	@ (8002014 <main+0x218>)
 8001f54:	f7ff fc44 	bl	80017e0 <Max31865_readTempC>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002054 <main+0x258>)
 8001f5e:	701a      	strb	r2, [r3, #0]
	rtd_raw = Max31865_readRTD(&pt100);
 8001f60:	482c      	ldr	r0, [pc, #176]	@ (8002014 <main+0x218>)
 8001f62:	f7ff fbce 	bl	8001702 <Max31865_readRTD>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002058 <main+0x25c>)
 8001f6c:	801a      	strh	r2, [r3, #0]
	if (pt100isOK != false){
 8001f6e:	4b39      	ldr	r3, [pc, #228]	@ (8002054 <main+0x258>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d012      	beq.n	8001f9c <main+0x1a0>
		pt100Temp = Max31865_Filter(tempIn,pt100Temp,0.1);
 8001f76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f7a:	4b38      	ldr	r3, [pc, #224]	@ (800205c <main+0x260>)
 8001f7c:	ed93 7a00 	vldr	s14, [r3]
 8001f80:	ed9f 1a37 	vldr	s2, [pc, #220]	@ 8002060 <main+0x264>
 8001f84:	eef0 0a47 	vmov.f32	s1, s14
 8001f88:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8c:	f7ff fd88 	bl	8001aa0 <Max31865_Filter>
 8001f90:	eef0 7a40 	vmov.f32	s15, s0
 8001f94:	4b31      	ldr	r3, [pc, #196]	@ (800205c <main+0x260>)
 8001f96:	edc3 7a00 	vstr	s15, [r3]
 8001f9a:	e006      	b.n	8001faa <main+0x1ae>
	}
	else{
		fault = Max31865_readFault(&pt100);
 8001f9c:	481d      	ldr	r0, [pc, #116]	@ (8002014 <main+0x218>)
 8001f9e:	f7ff faff 	bl	80015a0 <Max31865_readFault>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8002064 <main+0x268>)
 8001fa8:	701a      	strb	r2, [r3, #0]
	}

	// PT100 temperature sensor exterior
	pt100EisOK = Max31865_readTempC(&pt100E,&tempE);
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	4619      	mov	r1, r3
 8001fb0:	481b      	ldr	r0, [pc, #108]	@ (8002020 <main+0x224>)
 8001fb2:	f7ff fc15 	bl	80017e0 <Max31865_readTempC>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b2b      	ldr	r3, [pc, #172]	@ (8002068 <main+0x26c>)
 8001fbc:	701a      	strb	r2, [r3, #0]
	rtd_rawE = Max31865_readRTD(&pt100E);
 8001fbe:	4818      	ldr	r0, [pc, #96]	@ (8002020 <main+0x224>)
 8001fc0:	f7ff fb9f 	bl	8001702 <Max31865_readRTD>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b28      	ldr	r3, [pc, #160]	@ (800206c <main+0x270>)
 8001fca:	801a      	strh	r2, [r3, #0]
	if (pt100EisOK != false){
 8001fcc:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <main+0x26c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d04f      	beq.n	8002074 <main+0x278>
		pt100ETemp = Max31865_Filter(tempE,pt100ETemp,0.1);
 8001fd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fd8:	4b25      	ldr	r3, [pc, #148]	@ (8002070 <main+0x274>)
 8001fda:	ed93 7a00 	vldr	s14, [r3]
 8001fde:	ed9f 1a20 	vldr	s2, [pc, #128]	@ 8002060 <main+0x264>
 8001fe2:	eef0 0a47 	vmov.f32	s1, s14
 8001fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fea:	f7ff fd59 	bl	8001aa0 <Max31865_Filter>
 8001fee:	eef0 7a40 	vmov.f32	s15, s0
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <main+0x274>)
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
 8001ff8:	e043      	b.n	8002082 <main+0x286>
 8001ffa:	bf00      	nop
 8001ffc:	20000478 	.word	0x20000478
 8002000:	20000508 	.word	0x20000508
 8002004:	200004c0 	.word	0x200004c0
 8002008:	40014800 	.word	0x40014800
 800200c:	40020800 	.word	0x40020800
 8002010:	200003c0 	.word	0x200003c0
 8002014:	200002f4 	.word	0x200002f4
 8002018:	40021000 	.word	0x40021000
 800201c:	20000418 	.word	0x20000418
 8002020:	20000310 	.word	0x20000310
 8002024:	20000368 	.word	0x20000368
 8002028:	4484a000 	.word	0x4484a000
 800202c:	c4806000 	.word	0xc4806000
 8002030:	44778000 	.word	0x44778000
 8002034:	c479c000 	.word	0xc479c000
 8002038:	40020c00 	.word	0x40020c00
 800203c:	200002e8 	.word	0x200002e8
 8002040:	200002e0 	.word	0x200002e0
 8002044:	200002e4 	.word	0x200002e4
 8002048:	42680000 	.word	0x42680000
 800204c:	200002ec 	.word	0x200002ec
 8002050:	200002f0 	.word	0x200002f0
 8002054:	20000304 	.word	0x20000304
 8002058:	2000030e 	.word	0x2000030e
 800205c:	20000308 	.word	0x20000308
 8002060:	3dcccccd 	.word	0x3dcccccd
 8002064:	2000030c 	.word	0x2000030c
 8002068:	20000320 	.word	0x20000320
 800206c:	2000032a 	.word	0x2000032a
 8002070:	20000324 	.word	0x20000324
	}
	else{
		faultE = Max31865_readFault(&pt100E);
 8002074:	488e      	ldr	r0, [pc, #568]	@ (80022b0 <main+0x4b4>)
 8002076:	f7ff fa93 	bl	80015a0 <Max31865_readFault>
 800207a:	4603      	mov	r3, r0
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b8d      	ldr	r3, [pc, #564]	@ (80022b4 <main+0x4b8>)
 8002080:	701a      	strb	r2, [r3, #0]
	}

	// Accelerometer
	if (LIS3DSH_PollDRDY(100)) {
 8002082:	2064      	movs	r0, #100	@ 0x64
 8002084:	f7ff f956 	bl	8001334 <LIS3DSH_PollDRDY>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d058      	beq.n	8002140 <main+0x344>
		current_acceleration = LIS3DSH_GetDataScaled();
 800208e:	f7ff f8cf 	bl	8001230 <LIS3DSH_GetDataScaled>
 8002092:	eef0 6a40 	vmov.f32	s13, s0
 8002096:	eeb0 7a60 	vmov.f32	s14, s1
 800209a:	eef0 7a41 	vmov.f32	s15, s2
 800209e:	4b86      	ldr	r3, [pc, #536]	@ (80022b8 <main+0x4bc>)
 80020a0:	edc3 6a00 	vstr	s13, [r3]
 80020a4:	ed83 7a01 	vstr	s14, [r3, #4]
 80020a8:	edc3 7a02 	vstr	s15, [r3, #8]

		y_transformed = current_acceleration.y * 0.00981f;
 80020ac:	4b82      	ldr	r3, [pc, #520]	@ (80022b8 <main+0x4bc>)
 80020ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80020b2:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80022bc <main+0x4c0>
 80020b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ba:	4b81      	ldr	r3, [pc, #516]	@ (80022c0 <main+0x4c4>)
 80020bc:	edc3 7a00 	vstr	s15, [r3]

		if (fabs(y_transformed) < 0.5f) {
 80020c0:	4b7f      	ldr	r3, [pc, #508]	@ (80022c0 <main+0x4c4>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eef0 7ae7 	vabs.f32	s15, s15
 80020ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	d503      	bpl.n	80020e0 <main+0x2e4>
			y_transformed = 0.0f;
 80020d8:	4b79      	ldr	r3, [pc, #484]	@ (80022c0 <main+0x4c4>)
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
		}

		low_pass_filter(y_transformed);
 80020e0:	4b77      	ldr	r3, [pc, #476]	@ (80022c0 <main+0x4c4>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ea:	f7ff fe5b 	bl	8001da4 <low_pass_filter>

		timer_current_vy = HAL_GetTick();
 80020ee:	f000 ff2b 	bl	8002f48 <HAL_GetTick>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a73      	ldr	r2, [pc, #460]	@ (80022c4 <main+0x4c8>)
 80020f6:	6013      	str	r3, [r2, #0]

		dt_vy = (timer_current_vy - timer_last_vy) / 1000.0f;
 80020f8:	4b72      	ldr	r3, [pc, #456]	@ (80022c4 <main+0x4c8>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b72      	ldr	r3, [pc, #456]	@ (80022c8 <main+0x4cc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800210a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80022cc <main+0x4d0>
 800210e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002112:	4b6f      	ldr	r3, [pc, #444]	@ (80022d0 <main+0x4d4>)
 8002114:	edc3 7a00 	vstr	s15, [r3]

		vy += filtered_y * dt_vy;
 8002118:	4b6e      	ldr	r3, [pc, #440]	@ (80022d4 <main+0x4d8>)
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	4b6c      	ldr	r3, [pc, #432]	@ (80022d0 <main+0x4d4>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002128:	4b6b      	ldr	r3, [pc, #428]	@ (80022d8 <main+0x4dc>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	4b69      	ldr	r3, [pc, #420]	@ (80022d8 <main+0x4dc>)
 8002134:	edc3 7a00 	vstr	s15, [r3]

		timer_last_vy = timer_current_vy;
 8002138:	4b62      	ldr	r3, [pc, #392]	@ (80022c4 <main+0x4c8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a62      	ldr	r2, [pc, #392]	@ (80022c8 <main+0x4cc>)
 800213e:	6013      	str	r3, [r2, #0]
	}

	// Fuel level
	HAL_ADC_Start(&hadc1);
 8002140:	4866      	ldr	r0, [pc, #408]	@ (80022dc <main+0x4e0>)
 8002142:	f000 ff75 	bl	8003030 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK){
 8002146:	2105      	movs	r1, #5
 8002148:	4864      	ldr	r0, [pc, #400]	@ (80022dc <main+0x4e0>)
 800214a:	f001 f876 	bl	800323a <HAL_ADC_PollForConversion>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <main+0x364>
		fuel_level = HAL_ADC_GetValue(&hadc1);
 8002154:	4861      	ldr	r0, [pc, #388]	@ (80022dc <main+0x4e0>)
 8002156:	f001 f8fb 	bl	8003350 <HAL_ADC_GetValue>
 800215a:	4603      	mov	r3, r0
 800215c:	4a60      	ldr	r2, [pc, #384]	@ (80022e0 <main+0x4e4>)
 800215e:	6013      	str	r3, [r2, #0]
	}
	HAL_ADC_Stop(&hadc1);
 8002160:	485e      	ldr	r0, [pc, #376]	@ (80022dc <main+0x4e0>)
 8002162:	f001 f837 	bl	80031d4 <HAL_ADC_Stop>

	// Distance
	timer_current = HAL_GetTick();
 8002166:	f000 feef 	bl	8002f48 <HAL_GetTick>
 800216a:	4603      	mov	r3, r0
 800216c:	4a5d      	ldr	r2, [pc, #372]	@ (80022e4 <main+0x4e8>)
 800216e:	6013      	str	r3, [r2, #0]
	dt = (timer_current - timer_last) / 1000.0f;
 8002170:	4b5c      	ldr	r3, [pc, #368]	@ (80022e4 <main+0x4e8>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b5c      	ldr	r3, [pc, #368]	@ (80022e8 <main+0x4ec>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002182:	eddf 6a52 	vldr	s13, [pc, #328]	@ 80022cc <main+0x4d0>
 8002186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218a:	4b58      	ldr	r3, [pc, #352]	@ (80022ec <main+0x4f0>)
 800218c:	edc3 7a00 	vstr	s15, [r3]

	timer_last = timer_current;
 8002190:	4b54      	ldr	r3, [pc, #336]	@ (80022e4 <main+0x4e8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a54      	ldr	r2, [pc, #336]	@ (80022e8 <main+0x4ec>)
 8002196:	6013      	str	r3, [r2, #0]

	travelled_distance += fabs(vy) * dt;
 8002198:	4b55      	ldr	r3, [pc, #340]	@ (80022f0 <main+0x4f4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9d3 	bl	8000548 <__aeabi_f2d>
 80021a2:	4604      	mov	r4, r0
 80021a4:	460d      	mov	r5, r1
 80021a6:	4b4c      	ldr	r3, [pc, #304]	@ (80022d8 <main+0x4dc>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	eef0 7ae7 	vabs.f32	s15, s15
 80021b0:	ee17 0a90 	vmov	r0, s15
 80021b4:	f7fe f9c8 	bl	8000548 <__aeabi_f2d>
 80021b8:	4680      	mov	r8, r0
 80021ba:	4689      	mov	r9, r1
 80021bc:	4b4b      	ldr	r3, [pc, #300]	@ (80022ec <main+0x4f0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f9c1 	bl	8000548 <__aeabi_f2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4640      	mov	r0, r8
 80021cc:	4649      	mov	r1, r9
 80021ce:	f7fe fa13 	bl	80005f8 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4620      	mov	r0, r4
 80021d8:	4629      	mov	r1, r5
 80021da:	f7fe f857 	bl	800028c <__adddf3>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f7fe fcdf 	bl	8000ba8 <__aeabi_d2f>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a40      	ldr	r2, [pc, #256]	@ (80022f0 <main+0x4f4>)
 80021ee:	6013      	str	r3, [r2, #0]

	snprintf((char*)txData, sizeof(txData), "%.2f,%.2f,%.2f,%.2f,%lu,%.2f,%lu,%.2f\r\n",
 80021f0:	4b40      	ldr	r3, [pc, #256]	@ (80022f4 <main+0x4f8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f9a7 	bl	8000548 <__aeabi_f2d>
 80021fa:	4604      	mov	r4, r0
 80021fc:	460d      	mov	r5, r1
 80021fe:	4b3e      	ldr	r3, [pc, #248]	@ (80022f8 <main+0x4fc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f9a0 	bl	8000548 <__aeabi_f2d>
 8002208:	4680      	mov	r8, r0
 800220a:	4689      	mov	r9, r1
 800220c:	4b3b      	ldr	r3, [pc, #236]	@ (80022fc <main+0x500>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f999 	bl	8000548 <__aeabi_f2d>
 8002216:	4682      	mov	sl, r0
 8002218:	468b      	mov	fp, r1
 800221a:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <main+0x504>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f992 	bl	8000548 <__aeabi_f2d>
 8002224:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002228:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <main+0x508>)
 800222a:	681e      	ldr	r6, [r3, #0]
    dist1,dist2,pt100Temp,pt100ETemp,rpm,fabs(vy),fuel_level,travelled_distance);
 800222c:	4b2a      	ldr	r3, [pc, #168]	@ (80022d8 <main+0x4dc>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	eef0 7ae7 	vabs.f32	s15, s15
	snprintf((char*)txData, sizeof(txData), "%.2f,%.2f,%.2f,%.2f,%lu,%.2f,%lu,%.2f\r\n",
 8002236:	ee17 0a90 	vmov	r0, s15
 800223a:	f7fe f985 	bl	8000548 <__aeabi_f2d>
 800223e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002242:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <main+0x4e4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	4b29      	ldr	r3, [pc, #164]	@ (80022f0 <main+0x4f4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f97b 	bl	8000548 <__aeabi_f2d>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	930c      	str	r3, [sp, #48]	@ 0x30
 800225e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002262:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002266:	9608      	str	r6, [sp, #32]
 8002268:	ed97 7b04 	vldr	d7, [r7, #16]
 800226c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002270:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002274:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002278:	e9cd 4500 	strd	r4, r5, [sp]
 800227c:	4a22      	ldr	r2, [pc, #136]	@ (8002308 <main+0x50c>)
 800227e:	2129      	movs	r1, #41	@ 0x29
 8002280:	4822      	ldr	r0, [pc, #136]	@ (800230c <main+0x510>)
 8002282:	f005 fd85 	bl	8007d90 <sniprintf>
	HAL_UART_Transmit(&huart2, txData, sizeof(txData), 100);
 8002286:	2364      	movs	r3, #100	@ 0x64
 8002288:	2229      	movs	r2, #41	@ 0x29
 800228a:	4920      	ldr	r1, [pc, #128]	@ (800230c <main+0x510>)
 800228c:	4820      	ldr	r0, [pc, #128]	@ (8002310 <main+0x514>)
 800228e:	f004 fc13 	bl	8006ab8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rxData, sizeof(rxData), 100);
 8002292:	2364      	movs	r3, #100	@ 0x64
 8002294:	2202      	movs	r2, #2
 8002296:	491f      	ldr	r1, [pc, #124]	@ (8002314 <main+0x518>)
 8002298:	481d      	ldr	r0, [pc, #116]	@ (8002310 <main+0x514>)
 800229a:	f004 fc98 	bl	8006bce <HAL_UART_Receive>
	HAL_GPIO_TogglePin(OrangeLed_GPIO_Port, OrangeLed_Pin);
 800229e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022a2:	481d      	ldr	r0, [pc, #116]	@ (8002318 <main+0x51c>)
 80022a4:	f001 fd47 	bl	8003d36 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80022a8:	2064      	movs	r0, #100	@ 0x64
 80022aa:	f000 fe59 	bl	8002f60 <HAL_Delay>
  {
 80022ae:	e60e      	b.n	8001ece <main+0xd2>
 80022b0:	20000310 	.word	0x20000310
 80022b4:	20000328 	.word	0x20000328
 80022b8:	2000032c 	.word	0x2000032c
 80022bc:	3c20ba1f 	.word	0x3c20ba1f
 80022c0:	20000338 	.word	0x20000338
 80022c4:	20000344 	.word	0x20000344
 80022c8:	20000348 	.word	0x20000348
 80022cc:	447a0000 	.word	0x447a0000
 80022d0:	2000034c 	.word	0x2000034c
 80022d4:	20000340 	.word	0x20000340
 80022d8:	2000033c 	.word	0x2000033c
 80022dc:	20000268 	.word	0x20000268
 80022e0:	20000354 	.word	0x20000354
 80022e4:	20000358 	.word	0x20000358
 80022e8:	2000035c 	.word	0x2000035c
 80022ec:	20000360 	.word	0x20000360
 80022f0:	20000364 	.word	0x20000364
 80022f4:	200002ec 	.word	0x200002ec
 80022f8:	200002f0 	.word	0x200002f0
 80022fc:	20000308 	.word	0x20000308
 8002300:	20000324 	.word	0x20000324
 8002304:	20000350 	.word	0x20000350
 8002308:	0800a070 	.word	0x0800a070
 800230c:	200002b0 	.word	0x200002b0
 8002310:	20000550 	.word	0x20000550
 8002314:	200002dc 	.word	0x200002dc
 8002318:	40020c00 	.word	0x40020c00

0800231c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b094      	sub	sp, #80	@ 0x50
 8002320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002322:	f107 0320 	add.w	r3, r7, #32
 8002326:	2230      	movs	r2, #48	@ 0x30
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f005 fda7 	bl	8007e7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	4b28      	ldr	r3, [pc, #160]	@ (80023e8 <SystemClock_Config+0xcc>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	4a27      	ldr	r2, [pc, #156]	@ (80023e8 <SystemClock_Config+0xcc>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800234e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002350:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <SystemClock_Config+0xcc>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	4b22      	ldr	r3, [pc, #136]	@ (80023ec <SystemClock_Config+0xd0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a21      	ldr	r2, [pc, #132]	@ (80023ec <SystemClock_Config+0xd0>)
 8002366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b1f      	ldr	r3, [pc, #124]	@ (80023ec <SystemClock_Config+0xd0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002378:	2302      	movs	r3, #2
 800237a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800237c:	2301      	movs	r3, #1
 800237e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002380:	2310      	movs	r3, #16
 8002382:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002384:	2302      	movs	r3, #2
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002388:	2300      	movs	r3, #0
 800238a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800238c:	2308      	movs	r3, #8
 800238e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002390:	23a0      	movs	r3, #160	@ 0xa0
 8002392:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002394:	2302      	movs	r3, #2
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002398:	2307      	movs	r3, #7
 800239a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239c:	f107 0320 	add.w	r3, r7, #32
 80023a0:	4618      	mov	r0, r3
 80023a2:	f001 fd07 	bl	8003db4 <HAL_RCC_OscConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023ac:	f000 f840 	bl	8002430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b0:	230f      	movs	r3, #15
 80023b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b4:	2302      	movs	r3, #2
 80023b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80023c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	2105      	movs	r1, #5
 80023ce:	4618      	mov	r0, r3
 80023d0:	f001 ff68 	bl	80042a4 <HAL_RCC_ClockConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023da:	f000 f829 	bl	8002430 <Error_Handler>
  }
}
 80023de:	bf00      	nop
 80023e0:	3750      	adds	r7, #80	@ 0x50
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000

080023f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// RPM
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a09      	ldr	r2, [pc, #36]	@ (8002424 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10a      	bne.n	8002418 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        rpm = RPM_COUNTER * 3; // 60s/20 ranuras = 3
 8002402:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4b07      	ldr	r3, [pc, #28]	@ (800242c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002410:	601a      	str	r2, [r3, #0]
        RPM_COUNTER = 0;
 8002412:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
    }
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40001000 	.word	0x40001000
 8002428:	20000470 	.word	0x20000470
 800242c:	20000350 	.word	0x20000350

08002430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002434:	b672      	cpsid	i
}
 8002436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <Error_Handler+0x8>

0800243c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002440:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002442:	4a18      	ldr	r2, [pc, #96]	@ (80024a4 <MX_SPI1_Init+0x68>)
 8002444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002446:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800244c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800245a:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <MX_SPI1_Init+0x64>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002460:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800246c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800246e:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002470:	2228      	movs	r2, #40	@ 0x28
 8002472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002474:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <MX_SPI1_Init+0x64>)
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002480:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002488:	220a      	movs	r2, #10
 800248a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800248c:	4804      	ldr	r0, [pc, #16]	@ (80024a0 <MX_SPI1_Init+0x64>)
 800248e:	f002 f929 	bl	80046e4 <HAL_SPI_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002498:	f7ff ffca 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000368 	.word	0x20000368
 80024a4:	40013000 	.word	0x40013000

080024a8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80024ac:	4b17      	ldr	r3, [pc, #92]	@ (800250c <MX_SPI2_Init+0x64>)
 80024ae:	4a18      	ldr	r2, [pc, #96]	@ (8002510 <MX_SPI2_Init+0x68>)
 80024b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024b2:	4b16      	ldr	r3, [pc, #88]	@ (800250c <MX_SPI2_Init+0x64>)
 80024b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <MX_SPI2_Init+0x64>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <MX_SPI2_Init+0x64>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <MX_SPI2_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <MX_SPI2_Init+0x64>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <MX_SPI2_Init+0x64>)
 80024d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80024da:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <MX_SPI2_Init+0x64>)
 80024dc:	2238      	movs	r2, #56	@ 0x38
 80024de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <MX_SPI2_Init+0x64>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <MX_SPI2_Init+0x64>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <MX_SPI2_Init+0x64>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <MX_SPI2_Init+0x64>)
 80024f4:	220a      	movs	r2, #10
 80024f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024f8:	4804      	ldr	r0, [pc, #16]	@ (800250c <MX_SPI2_Init+0x64>)
 80024fa:	f002 f8f3 	bl	80046e4 <HAL_SPI_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002504:	f7ff ff94 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	200003c0 	.word	0x200003c0
 8002510:	40003800 	.word	0x40003800

08002514 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002518:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <MX_SPI3_Init+0x64>)
 800251a:	4a18      	ldr	r2, [pc, #96]	@ (800257c <MX_SPI3_Init+0x68>)
 800251c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <MX_SPI3_Init+0x64>)
 8002520:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002524:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002526:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <MX_SPI3_Init+0x64>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800252c:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <MX_SPI3_Init+0x64>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002532:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <MX_SPI3_Init+0x64>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002538:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <MX_SPI3_Init+0x64>)
 800253a:	2201      	movs	r2, #1
 800253c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800253e:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <MX_SPI3_Init+0x64>)
 8002540:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002544:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002546:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <MX_SPI3_Init+0x64>)
 8002548:	2238      	movs	r2, #56	@ 0x38
 800254a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800254c:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <MX_SPI3_Init+0x64>)
 800254e:	2200      	movs	r2, #0
 8002550:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <MX_SPI3_Init+0x64>)
 8002554:	2200      	movs	r2, #0
 8002556:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002558:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <MX_SPI3_Init+0x64>)
 800255a:	2200      	movs	r2, #0
 800255c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800255e:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <MX_SPI3_Init+0x64>)
 8002560:	220a      	movs	r2, #10
 8002562:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002564:	4804      	ldr	r0, [pc, #16]	@ (8002578 <MX_SPI3_Init+0x64>)
 8002566:	f002 f8bd 	bl	80046e4 <HAL_SPI_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002570:	f7ff ff5e 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000418 	.word	0x20000418
 800257c:	40003c00 	.word	0x40003c00

08002580 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08e      	sub	sp, #56	@ 0x38
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a5b      	ldr	r2, [pc, #364]	@ (800270c <HAL_SPI_MspInit+0x18c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d12c      	bne.n	80025fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
 80025a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a59      	ldr	r2, [pc, #356]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80025ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b57      	ldr	r3, [pc, #348]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ba:	623b      	str	r3, [r7, #32]
 80025bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	4a52      	ldr	r2, [pc, #328]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ce:	4b50      	ldr	r3, [pc, #320]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025da:	23e0      	movs	r3, #224	@ 0xe0
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ea:	2305      	movs	r3, #5
 80025ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025f2:	4619      	mov	r1, r3
 80025f4:	4847      	ldr	r0, [pc, #284]	@ (8002714 <HAL_SPI_MspInit+0x194>)
 80025f6:	f001 f9e9 	bl	80039cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80025fa:	e082      	b.n	8002702 <HAL_SPI_MspInit+0x182>
  else if(spiHandle->Instance==SPI2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a45      	ldr	r2, [pc, #276]	@ (8002718 <HAL_SPI_MspInit+0x198>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d14b      	bne.n	800269e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	4b41      	ldr	r3, [pc, #260]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	4a40      	ldr	r2, [pc, #256]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002614:	6413      	str	r3, [r2, #64]	@ 0x40
 8002616:	4b3e      	ldr	r3, [pc, #248]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800261e:	61bb      	str	r3, [r7, #24]
 8002620:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	4b3a      	ldr	r3, [pc, #232]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	4a39      	ldr	r2, [pc, #228]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	6313      	str	r3, [r2, #48]	@ 0x30
 8002632:	4b37      	ldr	r3, [pc, #220]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	4b33      	ldr	r3, [pc, #204]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	4a32      	ldr	r2, [pc, #200]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6313      	str	r3, [r2, #48]	@ 0x30
 800264e:	4b30      	ldr	r3, [pc, #192]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800265a:	230c      	movs	r3, #12
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800266a:	2305      	movs	r3, #5
 800266c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002672:	4619      	mov	r1, r3
 8002674:	4829      	ldr	r0, [pc, #164]	@ (800271c <HAL_SPI_MspInit+0x19c>)
 8002676:	f001 f9a9 	bl	80039cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800267a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800268c:	2305      	movs	r3, #5
 800268e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002694:	4619      	mov	r1, r3
 8002696:	4822      	ldr	r0, [pc, #136]	@ (8002720 <HAL_SPI_MspInit+0x1a0>)
 8002698:	f001 f998 	bl	80039cc <HAL_GPIO_Init>
}
 800269c:	e031      	b.n	8002702 <HAL_SPI_MspInit+0x182>
  else if(spiHandle->Instance==SPI3)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a20      	ldr	r2, [pc, #128]	@ (8002724 <HAL_SPI_MspInit+0x1a4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d12c      	bne.n	8002702 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80026b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b8:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	4a10      	ldr	r2, [pc, #64]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <HAL_SPI_MspInit+0x190>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80026e0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026f2:	2306      	movs	r3, #6
 80026f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026fa:	4619      	mov	r1, r3
 80026fc:	4807      	ldr	r0, [pc, #28]	@ (800271c <HAL_SPI_MspInit+0x19c>)
 80026fe:	f001 f965 	bl	80039cc <HAL_GPIO_Init>
}
 8002702:	bf00      	nop
 8002704:	3738      	adds	r7, #56	@ 0x38
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40013000 	.word	0x40013000
 8002710:	40023800 	.word	0x40023800
 8002714:	40020000 	.word	0x40020000
 8002718:	40003800 	.word	0x40003800
 800271c:	40020800 	.word	0x40020800
 8002720:	40020400 	.word	0x40020400
 8002724:	40003c00 	.word	0x40003c00

08002728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <HAL_MspInit+0x4c>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	4a0f      	ldr	r2, [pc, #60]	@ (8002774 <HAL_MspInit+0x4c>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800273c:	6453      	str	r3, [r2, #68]	@ 0x44
 800273e:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <HAL_MspInit+0x4c>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <HAL_MspInit+0x4c>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a08      	ldr	r2, [pc, #32]	@ (8002774 <HAL_MspInit+0x4c>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_MspInit+0x4c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002766:	2007      	movs	r0, #7
 8002768:	f001 f8ee 	bl	8003948 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800

08002778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <NMI_Handler+0x4>

08002780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <HardFault_Handler+0x4>

08002788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <MemManage_Handler+0x4>

08002790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <BusFault_Handler+0x4>

08002798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <UsageFault_Handler+0x4>

080027a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ce:	f000 fba7 	bl	8002f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80027da:	2001      	movs	r0, #1
 80027dc:	f001 fac6 	bl	8003d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80027e8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027ec:	f001 fabe 	bl	8003d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  RPM_COUNTER ++;
 80027f0:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <EXTI9_5_IRQHandler+0x1c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	4a02      	ldr	r2, [pc, #8]	@ (8002800 <EXTI9_5_IRQHandler+0x1c>)
 80027f8:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000470 	.word	0x20000470

08002804 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002808:	4802      	ldr	r0, [pc, #8]	@ (8002814 <TIM6_DAC_IRQHandler+0x10>)
 800280a:	f003 f8bd 	bl	8005988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000478 	.word	0x20000478

08002818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return 1;
 800281c:	2301      	movs	r3, #1
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_kill>:

int _kill(int pid, int sig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002832:	f005 fb77 	bl	8007f24 <__errno>
 8002836:	4603      	mov	r3, r0
 8002838:	2216      	movs	r2, #22
 800283a:	601a      	str	r2, [r3, #0]
  return -1;
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_exit>:

void _exit (int status)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ffe7 	bl	8002828 <_kill>
  while (1) {}    /* Make sure we hang here */
 800285a:	bf00      	nop
 800285c:	e7fd      	b.n	800285a <_exit+0x12>

0800285e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e00a      	b.n	8002886 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002870:	f3af 8000 	nop.w
 8002874:	4601      	mov	r1, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	60ba      	str	r2, [r7, #8]
 800287c:	b2ca      	uxtb	r2, r1
 800287e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3301      	adds	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	dbf0      	blt.n	8002870 <_read+0x12>
  }

  return len;
 800288e:	687b      	ldr	r3, [r7, #4]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e009      	b.n	80028be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	60ba      	str	r2, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3301      	adds	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	dbf1      	blt.n	80028aa <_write+0x12>
  }
  return len;
 80028c6:	687b      	ldr	r3, [r7, #4]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_close>:

int _close(int file)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028f8:	605a      	str	r2, [r3, #4]
  return 0;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_isatty>:

int _isatty(int file)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002910:	2301      	movs	r3, #1
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002940:	4a14      	ldr	r2, [pc, #80]	@ (8002994 <_sbrk+0x5c>)
 8002942:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <_sbrk+0x60>)
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <_sbrk+0x64>)
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <_sbrk+0x68>)
 8002958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	429a      	cmp	r2, r3
 8002966:	d207      	bcs.n	8002978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002968:	f005 fadc 	bl	8007f24 <__errno>
 800296c:	4603      	mov	r3, r0
 800296e:	220c      	movs	r2, #12
 8002970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	e009      	b.n	800298c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <_sbrk+0x64>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	4a05      	ldr	r2, [pc, #20]	@ (800299c <_sbrk+0x64>)
 8002988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20020000 	.word	0x20020000
 8002998:	00000400 	.word	0x00000400
 800299c:	20000474 	.word	0x20000474
 80029a0:	200006e8 	.word	0x200006e8

080029a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <SystemInit+0x20>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	4a05      	ldr	r2, [pc, #20]	@ (80029c4 <SystemInit+0x20>)
 80029b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ce:	463b      	mov	r3, r7
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029d6:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <MX_TIM6_Init+0x64>)
 80029d8:	4a15      	ldr	r2, [pc, #84]	@ (8002a30 <MX_TIM6_Init+0x68>)
 80029da:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80029dc:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <MX_TIM6_Init+0x64>)
 80029de:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80029e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <MX_TIM6_Init+0x64>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80029ea:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <MX_TIM6_Init+0x64>)
 80029ec:	f242 720f 	movw	r2, #9999	@ 0x270f
 80029f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <MX_TIM6_Init+0x64>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029f8:	480c      	ldr	r0, [pc, #48]	@ (8002a2c <MX_TIM6_Init+0x64>)
 80029fa:	f002 fc45 	bl	8005288 <HAL_TIM_Base_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002a04:	f7ff fd14 	bl	8002430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a10:	463b      	mov	r3, r7
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	@ (8002a2c <MX_TIM6_Init+0x64>)
 8002a16:	f003 ff6f 	bl	80068f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002a20:	f7ff fd06 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000478 	.word	0x20000478
 8002a30:	40001000 	.word	0x40001000

08002a34 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	@ 0x30
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
 8002a48:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a60:	4b34      	ldr	r3, [pc, #208]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002a62:	4a35      	ldr	r2, [pc, #212]	@ (8002b38 <MX_TIM8_Init+0x104>)
 8002a64:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80;
 8002a66:	4b33      	ldr	r3, [pc, #204]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002a68:	2250      	movs	r2, #80	@ 0x50
 8002a6a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6c:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002a72:	4b30      	ldr	r3, [pc, #192]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a78:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a80:	4b2c      	ldr	r3, [pc, #176]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a86:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a8c:	4829      	ldr	r0, [pc, #164]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002a8e:	f002 fbfb 	bl	8005288 <HAL_TIM_Base_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8002a98:	f7ff fcca 	bl	8002430 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002a9c:	4825      	ldr	r0, [pc, #148]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002a9e:	f002 fe3d 	bl	800571c <HAL_TIM_IC_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002aa8:	f7ff fcc2 	bl	8002430 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002aac:	2304      	movs	r3, #4
 8002aae:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002ab0:	2360      	movs	r3, #96	@ 0x60
 8002ab2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002ab4:	230a      	movs	r3, #10
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	481c      	ldr	r0, [pc, #112]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002ac4:	f003 f9ae 	bl	8005e24 <HAL_TIM_SlaveConfigSynchro>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002ace:	f7ff fcaf 	bl	8002430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4814      	ldr	r0, [pc, #80]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002ae2:	f003 ff09 	bl	80068f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8002aec:	f7ff fca0 	bl	8002430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002af0:	230a      	movs	r3, #10
 8002af2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002af4:	2301      	movs	r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	2200      	movs	r2, #0
 8002b04:	4619      	mov	r1, r3
 8002b06:	480b      	ldr	r0, [pc, #44]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002b08:	f003 f82e 	bl	8005b68 <HAL_TIM_IC_ConfigChannel>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 8002b12:	f7ff fc8d 	bl	8002430 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	2204      	movs	r2, #4
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4805      	ldr	r0, [pc, #20]	@ (8002b34 <MX_TIM8_Init+0x100>)
 8002b1e:	f003 f823 	bl	8005b68 <HAL_TIM_IC_ConfigChannel>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002b28:	f7ff fc82 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b2c:	bf00      	nop
 8002b2e:	3730      	adds	r7, #48	@ 0x30
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	200004c0 	.word	0x200004c0
 8002b38:	40010400 	.word	0x40010400

08002b3c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
 8002b50:	615a      	str	r2, [r3, #20]
 8002b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002b54:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <MX_TIM11_Init+0x94>)
 8002b56:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd4 <MX_TIM11_Init+0x98>)
 8002b58:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 199;
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd0 <MX_TIM11_Init+0x94>)
 8002b5c:	22c7      	movs	r2, #199	@ 0xc7
 8002b5e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <MX_TIM11_Init+0x94>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd0 <MX_TIM11_Init+0x94>)
 8002b68:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8002b6c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6e:	4b18      	ldr	r3, [pc, #96]	@ (8002bd0 <MX_TIM11_Init+0x94>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b74:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <MX_TIM11_Init+0x94>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b7a:	4815      	ldr	r0, [pc, #84]	@ (8002bd0 <MX_TIM11_Init+0x94>)
 8002b7c:	f002 fb84 	bl	8005288 <HAL_TIM_Base_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002b86:	f7ff fc53 	bl	8002430 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002b8a:	4811      	ldr	r0, [pc, #68]	@ (8002bd0 <MX_TIM11_Init+0x94>)
 8002b8c:	f002 fca4 	bl	80054d8 <HAL_TIM_PWM_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002b96:	f7ff fc4b 	bl	8002430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b9a:	2360      	movs	r3, #96	@ 0x60
 8002b9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	2200      	movs	r2, #0
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4807      	ldr	r0, [pc, #28]	@ (8002bd0 <MX_TIM11_Init+0x94>)
 8002bb2:	f003 f875 	bl	8005ca0 <HAL_TIM_PWM_ConfigChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002bbc:	f7ff fc38 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002bc0:	4803      	ldr	r0, [pc, #12]	@ (8002bd0 <MX_TIM11_Init+0x94>)
 8002bc2:	f000 f885 	bl	8002cd0 <HAL_TIM_MspPostInit>

}
 8002bc6:	bf00      	nop
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000508 	.word	0x20000508
 8002bd4:	40014800 	.word	0x40014800

08002bd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08c      	sub	sp, #48	@ 0x30
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM6)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a31      	ldr	r2, [pc, #196]	@ (8002cbc <HAL_TIM_Base_MspInit+0xe4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d116      	bne.n	8002c28 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	4b30      	ldr	r3, [pc, #192]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	4a2f      	ldr	r2, [pc, #188]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c04:	f043 0310 	orr.w	r3, r3, #16
 8002c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	69bb      	ldr	r3, [r7, #24]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2036      	movs	r0, #54	@ 0x36
 8002c1c:	f000 fe9f 	bl	800395e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c20:	2036      	movs	r0, #54	@ 0x36
 8002c22:	f000 feb8 	bl	8003996 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002c26:	e044      	b.n	8002cb2 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM8)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a25      	ldr	r2, [pc, #148]	@ (8002cc4 <HAL_TIM_Base_MspInit+0xec>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d12c      	bne.n	8002c8c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	4a21      	ldr	r2, [pc, #132]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c42:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5e:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c6a:	23c0      	movs	r3, #192	@ 0xc0
 8002c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7e:	f107 031c 	add.w	r3, r7, #28
 8002c82:	4619      	mov	r1, r3
 8002c84:	4810      	ldr	r0, [pc, #64]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xf0>)
 8002c86:	f000 fea1 	bl	80039cc <HAL_GPIO_Init>
}
 8002c8a:	e012      	b.n	8002cb2 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM11)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0e      	ldr	r2, [pc, #56]	@ (8002ccc <HAL_TIM_Base_MspInit+0xf4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10d      	bne.n	8002cb2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	4a08      	ldr	r2, [pc, #32]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca6:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xe8>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
}
 8002cb2:	bf00      	nop
 8002cb4:	3730      	adds	r7, #48	@ 0x30
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40001000 	.word	0x40001000
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40010400 	.word	0x40010400
 8002cc8:	40020800 	.word	0x40020800
 8002ccc:	40014800 	.word	0x40014800

08002cd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM11)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <HAL_TIM_MspPostInit+0x68>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d11e      	bne.n	8002d30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <HAL_TIM_MspPostInit+0x6c>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	4a10      	ldr	r2, [pc, #64]	@ (8002d3c <HAL_TIM_MspPostInit+0x6c>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d02:	4b0e      	ldr	r3, [pc, #56]	@ (8002d3c <HAL_TIM_MspPostInit+0x6c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002d20:	2303      	movs	r3, #3
 8002d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4805      	ldr	r0, [pc, #20]	@ (8002d40 <HAL_TIM_MspPostInit+0x70>)
 8002d2c:	f000 fe4e 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002d30:	bf00      	nop
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020400 	.word	0x40020400

08002d44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d48:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d4a:	4a12      	ldr	r2, [pc, #72]	@ (8002d94 <MX_USART2_UART_Init+0x50>)
 8002d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d62:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d68:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d74:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d7a:	4805      	ldr	r0, [pc, #20]	@ (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d7c:	f003 fe4c 	bl	8006a18 <HAL_UART_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d86:	f7ff fb53 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000550 	.word	0x20000550
 8002d94:	40004400 	.word	0x40004400

08002d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	@ 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a19      	ldr	r2, [pc, #100]	@ (8002e1c <HAL_UART_MspInit+0x84>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d12b      	bne.n	8002e12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	4b18      	ldr	r3, [pc, #96]	@ (8002e20 <HAL_UART_MspInit+0x88>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	4a17      	ldr	r2, [pc, #92]	@ (8002e20 <HAL_UART_MspInit+0x88>)
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <HAL_UART_MspInit+0x88>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <HAL_UART_MspInit+0x88>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4a10      	ldr	r2, [pc, #64]	@ (8002e20 <HAL_UART_MspInit+0x88>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e20 <HAL_UART_MspInit+0x88>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002df2:	230c      	movs	r3, #12
 8002df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e02:	2307      	movs	r3, #7
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4805      	ldr	r0, [pc, #20]	@ (8002e24 <HAL_UART_MspInit+0x8c>)
 8002e0e:	f000 fddd 	bl	80039cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e12:	bf00      	nop
 8002e14:	3728      	adds	r7, #40	@ 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40004400 	.word	0x40004400
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020000 	.word	0x40020000

08002e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e2c:	f7ff fdba 	bl	80029a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e30:	480c      	ldr	r0, [pc, #48]	@ (8002e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e32:	490d      	ldr	r1, [pc, #52]	@ (8002e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e34:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e38:	e002      	b.n	8002e40 <LoopCopyDataInit>

08002e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3e:	3304      	adds	r3, #4

08002e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e44:	d3f9      	bcc.n	8002e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e46:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e48:	4c0a      	ldr	r4, [pc, #40]	@ (8002e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e4c:	e001      	b.n	8002e52 <LoopFillZerobss>

08002e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e50:	3204      	adds	r2, #4

08002e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e54:	d3fb      	bcc.n	8002e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e56:	f005 f86b 	bl	8007f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5a:	f7fe ffcf 	bl	8001dfc <main>
  bx  lr    
 8002e5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e68:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002e6c:	0800a430 	.word	0x0800a430
  ldr r2, =_sbss
 8002e70:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002e74:	200006e8 	.word	0x200006e8

08002e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e78:	e7fe      	b.n	8002e78 <ADC_IRQHandler>
	...

08002e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e80:	4b0e      	ldr	r3, [pc, #56]	@ (8002ebc <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <HAL_Init+0x40>)
 8002e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <HAL_Init+0x40>)
 8002e92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e98:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a07      	ldr	r2, [pc, #28]	@ (8002ebc <HAL_Init+0x40>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	f000 fd4f 	bl	8003948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f000 f808 	bl	8002ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb0:	f7ff fc3a 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00

08002ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ec8:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <HAL_InitTick+0x54>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <HAL_InitTick+0x58>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fd67 	bl	80039b2 <HAL_SYSTICK_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00e      	b.n	8002f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d80a      	bhi.n	8002f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	f000 fd2f 	bl	800395e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f00:	4a06      	ldr	r2, [pc, #24]	@ (8002f1c <HAL_InitTick+0x5c>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000014 	.word	0x20000014
 8002f18:	2000001c 	.word	0x2000001c
 8002f1c:	20000018 	.word	0x20000018

08002f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <HAL_IncTick+0x20>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_IncTick+0x24>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a04      	ldr	r2, [pc, #16]	@ (8002f44 <HAL_IncTick+0x24>)
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2000001c 	.word	0x2000001c
 8002f44:	20000598 	.word	0x20000598

08002f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <HAL_GetTick+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000598 	.word	0x20000598

08002f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f68:	f7ff ffee 	bl	8002f48 <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d005      	beq.n	8002f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <HAL_Delay+0x44>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f86:	bf00      	nop
 8002f88:	f7ff ffde 	bl	8002f48 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d8f7      	bhi.n	8002f88 <HAL_Delay+0x28>
  {
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000001c 	.word	0x2000001c

08002fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e033      	b.n	8003026 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fe fdde 	bl	8001b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fee:	f023 0302 	bic.w	r3, r3, #2
 8002ff2:	f043 0202 	orr.w	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fad8 	bl	80035b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	641a      	str	r2, [r3, #64]	@ 0x40
 8003016:	e001      	b.n	800301c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_ADC_Start+0x1a>
 8003046:	2302      	movs	r3, #2
 8003048:	e0b2      	b.n	80031b0 <HAL_ADC_Start+0x180>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d018      	beq.n	8003092 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003070:	4b52      	ldr	r3, [pc, #328]	@ (80031bc <HAL_ADC_Start+0x18c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a52      	ldr	r2, [pc, #328]	@ (80031c0 <HAL_ADC_Start+0x190>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0c9a      	lsrs	r2, r3, #18
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003084:	e002      	b.n	800308c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	3b01      	subs	r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f9      	bne.n	8003086 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d17a      	bne.n	8003196 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030de:	d106      	bne.n	80030ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	f023 0206 	bic.w	r2, r3, #6
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80030ec:	e002      	b.n	80030f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030fc:	4b31      	ldr	r3, [pc, #196]	@ (80031c4 <HAL_ADC_Start+0x194>)
 80030fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003108:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2b00      	cmp	r3, #0
 8003114:	d12a      	bne.n	800316c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2b      	ldr	r2, [pc, #172]	@ (80031c8 <HAL_ADC_Start+0x198>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d015      	beq.n	800314c <HAL_ADC_Start+0x11c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a29      	ldr	r2, [pc, #164]	@ (80031cc <HAL_ADC_Start+0x19c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d105      	bne.n	8003136 <HAL_ADC_Start+0x106>
 800312a:	4b26      	ldr	r3, [pc, #152]	@ (80031c4 <HAL_ADC_Start+0x194>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a25      	ldr	r2, [pc, #148]	@ (80031d0 <HAL_ADC_Start+0x1a0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d136      	bne.n	80031ae <HAL_ADC_Start+0x17e>
 8003140:	4b20      	ldr	r3, [pc, #128]	@ (80031c4 <HAL_ADC_Start+0x194>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d130      	bne.n	80031ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d129      	bne.n	80031ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	e020      	b.n	80031ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <HAL_ADC_Start+0x198>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d11b      	bne.n	80031ae <HAL_ADC_Start+0x17e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d114      	bne.n	80031ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	e00b      	b.n	80031ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f043 0210 	orr.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	20000014 	.word	0x20000014
 80031c0:	431bde83 	.word	0x431bde83
 80031c4:	40012300 	.word	0x40012300
 80031c8:	40012000 	.word	0x40012000
 80031cc:	40012100 	.word	0x40012100
 80031d0:	40012200 	.word	0x40012200

080031d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_Stop+0x16>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e021      	b.n	800322e <HAL_ADC_Stop+0x5a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003256:	d113      	bne.n	8003280 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003266:	d10b      	bne.n	8003280 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e063      	b.n	8003348 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003280:	f7ff fe62 	bl	8002f48 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003286:	e021      	b.n	80032cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328e:	d01d      	beq.n	80032cc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_ADC_PollForConversion+0x6c>
 8003296:	f7ff fe57 	bl	8002f48 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d212      	bcs.n	80032cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d00b      	beq.n	80032cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	f043 0204 	orr.w	r2, r3, #4
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e03d      	b.n	8003348 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d1d6      	bne.n	8003288 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f06f 0212 	mvn.w	r2, #18
 80032e2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d123      	bne.n	8003346 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003302:	2b00      	cmp	r3, #0
 8003304:	d11f      	bne.n	8003346 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800331e:	2b00      	cmp	r3, #0
 8003320:	d111      	bne.n	8003346 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	f043 0201 	orr.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x1c>
 8003384:	2302      	movs	r3, #2
 8003386:	e105      	b.n	8003594 <HAL_ADC_ConfigChannel+0x228>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b09      	cmp	r3, #9
 8003396:	d925      	bls.n	80033e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68d9      	ldr	r1, [r3, #12]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	3b1e      	subs	r3, #30
 80033ae:	2207      	movs	r2, #7
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43da      	mvns	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	400a      	ands	r2, r1
 80033bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68d9      	ldr	r1, [r3, #12]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	4618      	mov	r0, r3
 80033d0:	4603      	mov	r3, r0
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4403      	add	r3, r0
 80033d6:	3b1e      	subs	r3, #30
 80033d8:	409a      	lsls	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	e022      	b.n	800342a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6919      	ldr	r1, [r3, #16]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	2207      	movs	r2, #7
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43da      	mvns	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	400a      	ands	r2, r1
 8003406:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6919      	ldr	r1, [r3, #16]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	4618      	mov	r0, r3
 800341a:	4603      	mov	r3, r0
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4403      	add	r3, r0
 8003420:	409a      	lsls	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b06      	cmp	r3, #6
 8003430:	d824      	bhi.n	800347c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	3b05      	subs	r3, #5
 8003444:	221f      	movs	r2, #31
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	400a      	ands	r2, r1
 8003452:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	4618      	mov	r0, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	3b05      	subs	r3, #5
 800346e:	fa00 f203 	lsl.w	r2, r0, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	635a      	str	r2, [r3, #52]	@ 0x34
 800347a:	e04c      	b.n	8003516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b0c      	cmp	r3, #12
 8003482:	d824      	bhi.n	80034ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	3b23      	subs	r3, #35	@ 0x23
 8003496:	221f      	movs	r2, #31
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43da      	mvns	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	400a      	ands	r2, r1
 80034a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	4618      	mov	r0, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	3b23      	subs	r3, #35	@ 0x23
 80034c0:	fa00 f203 	lsl.w	r2, r0, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80034cc:	e023      	b.n	8003516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	3b41      	subs	r3, #65	@ 0x41
 80034e0:	221f      	movs	r2, #31
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43da      	mvns	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	400a      	ands	r2, r1
 80034ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	4618      	mov	r0, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	3b41      	subs	r3, #65	@ 0x41
 800350a:	fa00 f203 	lsl.w	r2, r0, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003516:	4b22      	ldr	r3, [pc, #136]	@ (80035a0 <HAL_ADC_ConfigChannel+0x234>)
 8003518:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a21      	ldr	r2, [pc, #132]	@ (80035a4 <HAL_ADC_ConfigChannel+0x238>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d109      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x1cc>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b12      	cmp	r3, #18
 800352a:	d105      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_ADC_ConfigChannel+0x238>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d123      	bne.n	800358a <HAL_ADC_ConfigChannel+0x21e>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b10      	cmp	r3, #16
 8003548:	d003      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x1e6>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b11      	cmp	r3, #17
 8003550:	d11b      	bne.n	800358a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b10      	cmp	r3, #16
 8003564:	d111      	bne.n	800358a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003566:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <HAL_ADC_ConfigChannel+0x23c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a10      	ldr	r2, [pc, #64]	@ (80035ac <HAL_ADC_ConfigChannel+0x240>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	0c9a      	lsrs	r2, r3, #18
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800357c:	e002      	b.n	8003584 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3b01      	subs	r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f9      	bne.n	800357e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40012300 	.word	0x40012300
 80035a4:	40012000 	.word	0x40012000
 80035a8:	20000014 	.word	0x20000014
 80035ac:	431bde83 	.word	0x431bde83

080035b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b8:	4b79      	ldr	r3, [pc, #484]	@ (80037a0 <ADC_Init+0x1f0>)
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	021a      	lsls	r2, r3, #8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800362a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6899      	ldr	r1, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	4a58      	ldr	r2, [pc, #352]	@ (80037a4 <ADC_Init+0x1f4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d022      	beq.n	800368e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003656:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6899      	ldr	r1, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	e00f      	b.n	80036ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800369c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0202 	bic.w	r2, r2, #2
 80036bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6899      	ldr	r1, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7e1b      	ldrb	r3, [r3, #24]
 80036c8:	005a      	lsls	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01b      	beq.n	8003714 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80036fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	3b01      	subs	r3, #1
 8003708:	035a      	lsls	r2, r3, #13
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	e007      	b.n	8003724 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	3b01      	subs	r3, #1
 8003740:	051a      	lsls	r2, r3, #20
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6899      	ldr	r1, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003766:	025a      	lsls	r2, r3, #9
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6899      	ldr	r1, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	029a      	lsls	r2, r3, #10
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40012300 	.word	0x40012300
 80037a4:	0f000001 	.word	0x0f000001

080037a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b8:	4b0c      	ldr	r3, [pc, #48]	@ (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c4:	4013      	ands	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037da:	4a04      	ldr	r2, [pc, #16]	@ (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	60d3      	str	r3, [r2, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <__NVIC_GetPriorityGrouping+0x18>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f003 0307 	and.w	r3, r3, #7
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	2b00      	cmp	r3, #0
 800381c:	db0b      	blt.n	8003836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4907      	ldr	r1, [pc, #28]	@ (8003844 <__NVIC_EnableIRQ+0x38>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2001      	movs	r0, #1
 800382e:	fa00 f202 	lsl.w	r2, r0, r2
 8003832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000e100 	.word	0xe000e100

08003848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0a      	blt.n	8003872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	490c      	ldr	r1, [pc, #48]	@ (8003894 <__NVIC_SetPriority+0x4c>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	440b      	add	r3, r1
 800386c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003870:	e00a      	b.n	8003888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4908      	ldr	r1, [pc, #32]	@ (8003898 <__NVIC_SetPriority+0x50>)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3b04      	subs	r3, #4
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	440b      	add	r3, r1
 8003886:	761a      	strb	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000e100 	.word	0xe000e100
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	@ 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f1c3 0307 	rsb	r3, r3, #7
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	bf28      	it	cs
 80038ba:	2304      	movcs	r3, #4
 80038bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d902      	bls.n	80038cc <NVIC_EncodePriority+0x30>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3b03      	subs	r3, #3
 80038ca:	e000      	b.n	80038ce <NVIC_EncodePriority+0x32>
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	401a      	ands	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	4313      	orrs	r3, r2
         );
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	@ 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003914:	d301      	bcc.n	800391a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003916:	2301      	movs	r3, #1
 8003918:	e00f      	b.n	800393a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391a:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <SysTick_Config+0x40>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003922:	210f      	movs	r1, #15
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f7ff ff8e 	bl	8003848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <SysTick_Config+0x40>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003932:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <SysTick_Config+0x40>)
 8003934:	2207      	movs	r2, #7
 8003936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	e000e010 	.word	0xe000e010

08003948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff29 	bl	80037a8 <__NVIC_SetPriorityGrouping>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003970:	f7ff ff3e 	bl	80037f0 <__NVIC_GetPriorityGrouping>
 8003974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff8e 	bl	800389c <NVIC_EncodePriority>
 8003980:	4602      	mov	r2, r0
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5d 	bl	8003848 <__NVIC_SetPriority>
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff31 	bl	800380c <__NVIC_EnableIRQ>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffa2 	bl	8003904 <SysTick_Config>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b089      	sub	sp, #36	@ 0x24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	e16b      	b.n	8003cc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e8:	2201      	movs	r2, #1
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f040 815a 	bne.w	8003cba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d005      	beq.n	8003a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d130      	bne.n	8003a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	2203      	movs	r2, #3
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a54:	2201      	movs	r2, #1
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 0201 	and.w	r2, r3, #1
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d017      	beq.n	8003abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d123      	bne.n	8003b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	08da      	lsrs	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3208      	adds	r2, #8
 8003ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	220f      	movs	r2, #15
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	08da      	lsrs	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3208      	adds	r2, #8
 8003b0a:	69b9      	ldr	r1, [r7, #24]
 8003b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0203 	and.w	r2, r3, #3
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80b4 	beq.w	8003cba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	4b60      	ldr	r3, [pc, #384]	@ (8003cd8 <HAL_GPIO_Init+0x30c>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	4a5f      	ldr	r2, [pc, #380]	@ (8003cd8 <HAL_GPIO_Init+0x30c>)
 8003b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b62:	4b5d      	ldr	r3, [pc, #372]	@ (8003cd8 <HAL_GPIO_Init+0x30c>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b6e:	4a5b      	ldr	r2, [pc, #364]	@ (8003cdc <HAL_GPIO_Init+0x310>)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	3302      	adds	r3, #2
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	220f      	movs	r2, #15
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a52      	ldr	r2, [pc, #328]	@ (8003ce0 <HAL_GPIO_Init+0x314>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02b      	beq.n	8003bf2 <HAL_GPIO_Init+0x226>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a51      	ldr	r2, [pc, #324]	@ (8003ce4 <HAL_GPIO_Init+0x318>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d025      	beq.n	8003bee <HAL_GPIO_Init+0x222>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a50      	ldr	r2, [pc, #320]	@ (8003ce8 <HAL_GPIO_Init+0x31c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01f      	beq.n	8003bea <HAL_GPIO_Init+0x21e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4f      	ldr	r2, [pc, #316]	@ (8003cec <HAL_GPIO_Init+0x320>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d019      	beq.n	8003be6 <HAL_GPIO_Init+0x21a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4e      	ldr	r2, [pc, #312]	@ (8003cf0 <HAL_GPIO_Init+0x324>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <HAL_GPIO_Init+0x216>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8003cf4 <HAL_GPIO_Init+0x328>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00d      	beq.n	8003bde <HAL_GPIO_Init+0x212>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4c      	ldr	r2, [pc, #304]	@ (8003cf8 <HAL_GPIO_Init+0x32c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <HAL_GPIO_Init+0x20e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a4b      	ldr	r2, [pc, #300]	@ (8003cfc <HAL_GPIO_Init+0x330>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d101      	bne.n	8003bd6 <HAL_GPIO_Init+0x20a>
 8003bd2:	2307      	movs	r3, #7
 8003bd4:	e00e      	b.n	8003bf4 <HAL_GPIO_Init+0x228>
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	e00c      	b.n	8003bf4 <HAL_GPIO_Init+0x228>
 8003bda:	2306      	movs	r3, #6
 8003bdc:	e00a      	b.n	8003bf4 <HAL_GPIO_Init+0x228>
 8003bde:	2305      	movs	r3, #5
 8003be0:	e008      	b.n	8003bf4 <HAL_GPIO_Init+0x228>
 8003be2:	2304      	movs	r3, #4
 8003be4:	e006      	b.n	8003bf4 <HAL_GPIO_Init+0x228>
 8003be6:	2303      	movs	r3, #3
 8003be8:	e004      	b.n	8003bf4 <HAL_GPIO_Init+0x228>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e002      	b.n	8003bf4 <HAL_GPIO_Init+0x228>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_GPIO_Init+0x228>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	f002 0203 	and.w	r2, r2, #3
 8003bfa:	0092      	lsls	r2, r2, #2
 8003bfc:	4093      	lsls	r3, r2
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c04:	4935      	ldr	r1, [pc, #212]	@ (8003cdc <HAL_GPIO_Init+0x310>)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c12:	4b3b      	ldr	r3, [pc, #236]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c36:	4a32      	ldr	r2, [pc, #200]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c3c:	4b30      	ldr	r3, [pc, #192]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c60:	4a27      	ldr	r2, [pc, #156]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c66:	4b26      	ldr	r3, [pc, #152]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c90:	4b1b      	ldr	r3, [pc, #108]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cb4:	4a12      	ldr	r2, [pc, #72]	@ (8003d00 <HAL_GPIO_Init+0x334>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b0f      	cmp	r3, #15
 8003cc4:	f67f ae90 	bls.w	80039e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3724      	adds	r7, #36	@ 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	40020800 	.word	0x40020800
 8003cec:	40020c00 	.word	0x40020c00
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40021400 	.word	0x40021400
 8003cf8:	40021800 	.word	0x40021800
 8003cfc:	40021c00 	.word	0x40021c00
 8003d00:	40013c00 	.word	0x40013c00

08003d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
 8003d10:	4613      	mov	r3, r2
 8003d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d14:	787b      	ldrb	r3, [r7, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d1a:	887a      	ldrh	r2, [r7, #2]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d20:	e003      	b.n	8003d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d22:	887b      	ldrh	r3, [r7, #2]
 8003d24:	041a      	lsls	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	619a      	str	r2, [r3, #24]
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b085      	sub	sp, #20
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d48:	887a      	ldrh	r2, [r7, #2]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	041a      	lsls	r2, r3, #16
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	43d9      	mvns	r1, r3
 8003d54:	887b      	ldrh	r3, [r7, #2]
 8003d56:	400b      	ands	r3, r1
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	619a      	str	r2, [r3, #24]
}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d76:	4b08      	ldr	r3, [pc, #32]	@ (8003d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d006      	beq.n	8003d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d82:	4a05      	ldr	r2, [pc, #20]	@ (8003d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f806 	bl	8003d9c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40013c00 	.word	0x40013c00

08003d9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e267      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d075      	beq.n	8003ebe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dd2:	4b88      	ldr	r3, [pc, #544]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d00c      	beq.n	8003df8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dde:	4b85      	ldr	r3, [pc, #532]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d112      	bne.n	8003e10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dea:	4b82      	ldr	r3, [pc, #520]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003df6:	d10b      	bne.n	8003e10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d05b      	beq.n	8003ebc <HAL_RCC_OscConfig+0x108>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d157      	bne.n	8003ebc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e242      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e18:	d106      	bne.n	8003e28 <HAL_RCC_OscConfig+0x74>
 8003e1a:	4b76      	ldr	r3, [pc, #472]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a75      	ldr	r2, [pc, #468]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e01d      	b.n	8003e64 <HAL_RCC_OscConfig+0xb0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x98>
 8003e32:	4b70      	ldr	r3, [pc, #448]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6f      	ldr	r2, [pc, #444]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6c      	ldr	r2, [pc, #432]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e00b      	b.n	8003e64 <HAL_RCC_OscConfig+0xb0>
 8003e4c:	4b69      	ldr	r3, [pc, #420]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a68      	ldr	r2, [pc, #416]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b66      	ldr	r3, [pc, #408]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a65      	ldr	r2, [pc, #404]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d013      	beq.n	8003e94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7ff f86c 	bl	8002f48 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e74:	f7ff f868 	bl	8002f48 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	@ 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e207      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	4b5b      	ldr	r3, [pc, #364]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0xc0>
 8003e92:	e014      	b.n	8003ebe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7ff f858 	bl	8002f48 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7ff f854 	bl	8002f48 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	@ 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e1f3      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eae:	4b51      	ldr	r3, [pc, #324]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0xe8>
 8003eba:	e000      	b.n	8003ebe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d063      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eca:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed6:	4b47      	ldr	r3, [pc, #284]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d11c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b44      	ldr	r3, [pc, #272]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d116      	bne.n	8003f1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	4b41      	ldr	r3, [pc, #260]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCC_OscConfig+0x152>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d001      	beq.n	8003f06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e1c7      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f06:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4937      	ldr	r1, [pc, #220]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	e03a      	b.n	8003f92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f24:	4b34      	ldr	r3, [pc, #208]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7ff f80d 	bl	8002f48 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f32:	f7ff f809 	bl	8002f48 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e1a8      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4b28      	ldr	r3, [pc, #160]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4925      	ldr	r1, [pc, #148]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]
 8003f64:	e015      	b.n	8003f92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f66:	4b24      	ldr	r3, [pc, #144]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe ffec 	bl	8002f48 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f74:	f7fe ffe8 	bl	8002f48 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e187      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d036      	beq.n	800400c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa6:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <HAL_RCC_OscConfig+0x248>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fe ffcc 	bl	8002f48 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb4:	f7fe ffc8 	bl	8002f48 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e167      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x200>
 8003fd2:	e01b      	b.n	800400c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd4:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <HAL_RCC_OscConfig+0x248>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fda:	f7fe ffb5 	bl	8002f48 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe0:	e00e      	b.n	8004000 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe2:	f7fe ffb1 	bl	8002f48 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d907      	bls.n	8004000 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e150      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	42470000 	.word	0x42470000
 8003ffc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b88      	ldr	r3, [pc, #544]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 8004002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ea      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8097 	beq.w	8004148 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b81      	ldr	r3, [pc, #516]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	4b7d      	ldr	r3, [pc, #500]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	4a7c      	ldr	r2, [pc, #496]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	@ 0x40
 800403a:	4b7a      	ldr	r3, [pc, #488]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b77      	ldr	r3, [pc, #476]	@ (8004228 <HAL_RCC_OscConfig+0x474>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b74      	ldr	r3, [pc, #464]	@ (8004228 <HAL_RCC_OscConfig+0x474>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a73      	ldr	r2, [pc, #460]	@ (8004228 <HAL_RCC_OscConfig+0x474>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fe ff71 	bl	8002f48 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406a:	f7fe ff6d 	bl	8002f48 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e10c      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	4b6a      	ldr	r3, [pc, #424]	@ (8004228 <HAL_RCC_OscConfig+0x474>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x2ea>
 8004090:	4b64      	ldr	r3, [pc, #400]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004094:	4a63      	ldr	r2, [pc, #396]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6713      	str	r3, [r2, #112]	@ 0x70
 800409c:	e01c      	b.n	80040d8 <HAL_RCC_OscConfig+0x324>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x30c>
 80040a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040be:	e00b      	b.n	80040d8 <HAL_RCC_OscConfig+0x324>
 80040c0:	4b58      	ldr	r3, [pc, #352]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c4:	4a57      	ldr	r2, [pc, #348]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80040cc:	4b55      	ldr	r3, [pc, #340]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	4a54      	ldr	r2, [pc, #336]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 80040d2:	f023 0304 	bic.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d015      	beq.n	800410c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fe ff32 	bl	8002f48 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7fe ff2e 	bl	8002f48 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e0cb      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fe:	4b49      	ldr	r3, [pc, #292]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ee      	beq.n	80040e8 <HAL_RCC_OscConfig+0x334>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410c:	f7fe ff1c 	bl	8002f48 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004112:	e00a      	b.n	800412a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fe ff18 	bl	8002f48 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0b5      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412a:	4b3e      	ldr	r3, [pc, #248]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ee      	bne.n	8004114 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413c:	4b39      	ldr	r3, [pc, #228]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	4a38      	ldr	r2, [pc, #224]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 8004142:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004146:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80a1 	beq.w	8004294 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004152:	4b34      	ldr	r3, [pc, #208]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b08      	cmp	r3, #8
 800415c:	d05c      	beq.n	8004218 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d141      	bne.n	80041ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b31      	ldr	r3, [pc, #196]	@ (800422c <HAL_RCC_OscConfig+0x478>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe feec 	bl	8002f48 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004174:	f7fe fee8 	bl	8002f48 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e087      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	4b27      	ldr	r3, [pc, #156]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	019b      	lsls	r3, r3, #6
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	3b01      	subs	r3, #1
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	491b      	ldr	r1, [pc, #108]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041bc:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <HAL_RCC_OscConfig+0x478>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fe fec1 	bl	8002f48 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fe febd 	bl	8002f48 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e05c      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041dc:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x416>
 80041e8:	e054      	b.n	8004294 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ea:	4b10      	ldr	r3, [pc, #64]	@ (800422c <HAL_RCC_OscConfig+0x478>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fe feaa 	bl	8002f48 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fe fea6 	bl	8002f48 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e045      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <HAL_RCC_OscConfig+0x470>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x444>
 8004216:	e03d      	b.n	8004294 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e038      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
 8004224:	40023800 	.word	0x40023800
 8004228:	40007000 	.word	0x40007000
 800422c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004230:	4b1b      	ldr	r3, [pc, #108]	@ (80042a0 <HAL_RCC_OscConfig+0x4ec>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d028      	beq.n	8004290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d121      	bne.n	8004290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d11a      	bne.n	8004290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004260:	4013      	ands	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004266:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004268:	4293      	cmp	r3, r2
 800426a:	d111      	bne.n	8004290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	3b01      	subs	r3, #1
 800427a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d107      	bne.n	8004290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800

080042a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0cc      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042b8:	4b68      	ldr	r3, [pc, #416]	@ (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d90c      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b65      	ldr	r3, [pc, #404]	@ (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b63      	ldr	r3, [pc, #396]	@ (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0b8      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d020      	beq.n	800432e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f8:	4b59      	ldr	r3, [pc, #356]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a58      	ldr	r2, [pc, #352]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004302:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004310:	4b53      	ldr	r3, [pc, #332]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a52      	ldr	r2, [pc, #328]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800431a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800431c:	4b50      	ldr	r3, [pc, #320]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	494d      	ldr	r1, [pc, #308]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d044      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d107      	bne.n	8004352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	4b47      	ldr	r3, [pc, #284]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d119      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e07f      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d003      	beq.n	8004362 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	2b03      	cmp	r3, #3
 8004360:	d107      	bne.n	8004372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004362:	4b3f      	ldr	r3, [pc, #252]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e06f      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004372:	4b3b      	ldr	r3, [pc, #236]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e067      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004382:	4b37      	ldr	r3, [pc, #220]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f023 0203 	bic.w	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4934      	ldr	r1, [pc, #208]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	4313      	orrs	r3, r2
 8004392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004394:	f7fe fdd8 	bl	8002f48 <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	e00a      	b.n	80043b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439c:	f7fe fdd4 	bl	8002f48 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e04f      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 020c 	and.w	r2, r3, #12
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d1eb      	bne.n	800439c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043c4:	4b25      	ldr	r3, [pc, #148]	@ (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d20c      	bcs.n	80043ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b22      	ldr	r3, [pc, #136]	@ (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043da:	4b20      	ldr	r3, [pc, #128]	@ (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e032      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f8:	4b19      	ldr	r3, [pc, #100]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4916      	ldr	r1, [pc, #88]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004416:	4b12      	ldr	r3, [pc, #72]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	490e      	ldr	r1, [pc, #56]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800442a:	f000 f821 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 800442e:	4602      	mov	r2, r0
 8004430:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	490a      	ldr	r1, [pc, #40]	@ (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	5ccb      	ldrb	r3, [r1, r3]
 800443e:	fa22 f303 	lsr.w	r3, r2, r3
 8004442:	4a09      	ldr	r2, [pc, #36]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004446:	4b09      	ldr	r3, [pc, #36]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe fd38 	bl	8002ec0 <HAL_InitTick>

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40023c00 	.word	0x40023c00
 8004460:	40023800 	.word	0x40023800
 8004464:	0800a098 	.word	0x0800a098
 8004468:	20000014 	.word	0x20000014
 800446c:	20000018 	.word	0x20000018

08004470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004474:	b094      	sub	sp, #80	@ 0x50
 8004476:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004488:	4b79      	ldr	r3, [pc, #484]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x200>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b08      	cmp	r3, #8
 8004492:	d00d      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004494:	2b08      	cmp	r3, #8
 8004496:	f200 80e1 	bhi.w	800465c <HAL_RCC_GetSysClockFreq+0x1ec>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_RCC_GetSysClockFreq+0x34>
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d003      	beq.n	80044aa <HAL_RCC_GetSysClockFreq+0x3a>
 80044a2:	e0db      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a4:	4b73      	ldr	r3, [pc, #460]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x204>)
 80044a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044a8:	e0db      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044aa:	4b73      	ldr	r3, [pc, #460]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x208>)
 80044ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044ae:	e0d8      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x200>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d063      	beq.n	800458e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	099b      	lsrs	r3, r3, #6
 80044cc:	2200      	movs	r2, #0
 80044ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044da:	2300      	movs	r3, #0
 80044dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044e2:	4622      	mov	r2, r4
 80044e4:	462b      	mov	r3, r5
 80044e6:	f04f 0000 	mov.w	r0, #0
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	0159      	lsls	r1, r3, #5
 80044f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f4:	0150      	lsls	r0, r2, #5
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4621      	mov	r1, r4
 80044fc:	1a51      	subs	r1, r2, r1
 80044fe:	6139      	str	r1, [r7, #16]
 8004500:	4629      	mov	r1, r5
 8004502:	eb63 0301 	sbc.w	r3, r3, r1
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004514:	4659      	mov	r1, fp
 8004516:	018b      	lsls	r3, r1, #6
 8004518:	4651      	mov	r1, sl
 800451a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800451e:	4651      	mov	r1, sl
 8004520:	018a      	lsls	r2, r1, #6
 8004522:	4651      	mov	r1, sl
 8004524:	ebb2 0801 	subs.w	r8, r2, r1
 8004528:	4659      	mov	r1, fp
 800452a:	eb63 0901 	sbc.w	r9, r3, r1
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800453a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800453e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004542:	4690      	mov	r8, r2
 8004544:	4699      	mov	r9, r3
 8004546:	4623      	mov	r3, r4
 8004548:	eb18 0303 	adds.w	r3, r8, r3
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	462b      	mov	r3, r5
 8004550:	eb49 0303 	adc.w	r3, r9, r3
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004562:	4629      	mov	r1, r5
 8004564:	024b      	lsls	r3, r1, #9
 8004566:	4621      	mov	r1, r4
 8004568:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800456c:	4621      	mov	r1, r4
 800456e:	024a      	lsls	r2, r1, #9
 8004570:	4610      	mov	r0, r2
 8004572:	4619      	mov	r1, r3
 8004574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004576:	2200      	movs	r2, #0
 8004578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800457a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800457c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004580:	f7fc fb62 	bl	8000c48 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4613      	mov	r3, r2
 800458a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800458c:	e058      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458e:	4b38      	ldr	r3, [pc, #224]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x200>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	099b      	lsrs	r3, r3, #6
 8004594:	2200      	movs	r2, #0
 8004596:	4618      	mov	r0, r3
 8004598:	4611      	mov	r1, r2
 800459a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800459e:	623b      	str	r3, [r7, #32]
 80045a0:	2300      	movs	r3, #0
 80045a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045a8:	4642      	mov	r2, r8
 80045aa:	464b      	mov	r3, r9
 80045ac:	f04f 0000 	mov.w	r0, #0
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	0159      	lsls	r1, r3, #5
 80045b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ba:	0150      	lsls	r0, r2, #5
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4641      	mov	r1, r8
 80045c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80045c6:	4649      	mov	r1, r9
 80045c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045e0:	ebb2 040a 	subs.w	r4, r2, sl
 80045e4:	eb63 050b 	sbc.w	r5, r3, fp
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	00eb      	lsls	r3, r5, #3
 80045f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045f6:	00e2      	lsls	r2, r4, #3
 80045f8:	4614      	mov	r4, r2
 80045fa:	461d      	mov	r5, r3
 80045fc:	4643      	mov	r3, r8
 80045fe:	18e3      	adds	r3, r4, r3
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	464b      	mov	r3, r9
 8004604:	eb45 0303 	adc.w	r3, r5, r3
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004616:	4629      	mov	r1, r5
 8004618:	028b      	lsls	r3, r1, #10
 800461a:	4621      	mov	r1, r4
 800461c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004620:	4621      	mov	r1, r4
 8004622:	028a      	lsls	r2, r1, #10
 8004624:	4610      	mov	r0, r2
 8004626:	4619      	mov	r1, r3
 8004628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800462a:	2200      	movs	r2, #0
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	61fa      	str	r2, [r7, #28]
 8004630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004634:	f7fc fb08 	bl	8000c48 <__aeabi_uldivmod>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4613      	mov	r3, r2
 800463e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004640:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x200>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	3301      	adds	r3, #1
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004650:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800465a:	e002      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x204>)
 800465e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004664:	4618      	mov	r0, r3
 8004666:	3750      	adds	r7, #80	@ 0x50
 8004668:	46bd      	mov	sp, r7
 800466a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	00f42400 	.word	0x00f42400
 8004678:	007a1200 	.word	0x007a1200

0800467c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004680:	4b03      	ldr	r3, [pc, #12]	@ (8004690 <HAL_RCC_GetHCLKFreq+0x14>)
 8004682:	681b      	ldr	r3, [r3, #0]
}
 8004684:	4618      	mov	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	20000014 	.word	0x20000014

08004694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004698:	f7ff fff0 	bl	800467c <HAL_RCC_GetHCLKFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	0a9b      	lsrs	r3, r3, #10
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4903      	ldr	r1, [pc, #12]	@ (80046b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40023800 	.word	0x40023800
 80046b8:	0800a0a8 	.word	0x0800a0a8

080046bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046c0:	f7ff ffdc 	bl	800467c <HAL_RCC_GetHCLKFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	0b5b      	lsrs	r3, r3, #13
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4903      	ldr	r1, [pc, #12]	@ (80046e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d8:	4618      	mov	r0, r3
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40023800 	.word	0x40023800
 80046e0:	0800a0a8 	.word	0x0800a0a8

080046e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07b      	b.n	80047ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004706:	d009      	beq.n	800471c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	61da      	str	r2, [r3, #28]
 800470e:	e005      	b.n	800471c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fd ff22 	bl	8002580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004752:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a0:	ea42 0103 	orr.w	r1, r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	0c1b      	lsrs	r3, r3, #16
 80047ba:	f003 0104 	and.w	r1, r3, #4
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	f003 0210 	and.w	r2, r3, #16
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b088      	sub	sp, #32
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004806:	f7fe fb9f 	bl	8002f48 <HAL_GetTick>
 800480a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d001      	beq.n	8004820 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800481c:	2302      	movs	r3, #2
 800481e:	e12a      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_Transmit+0x36>
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e122      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_SPI_Transmit+0x48>
 800483a:	2302      	movs	r3, #2
 800483c:	e11b      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2203      	movs	r2, #3
 800484a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	88fa      	ldrh	r2, [r7, #6]
 800485e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488c:	d10f      	bne.n	80048ae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800489c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b8:	2b40      	cmp	r3, #64	@ 0x40
 80048ba:	d007      	beq.n	80048cc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d4:	d152      	bne.n	800497c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_SPI_Transmit+0xee>
 80048de:	8b7b      	ldrh	r3, [r7, #26]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d145      	bne.n	8004970 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	881a      	ldrh	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	1c9a      	adds	r2, r3, #2
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004908:	e032      	b.n	8004970 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b02      	cmp	r3, #2
 8004916:	d112      	bne.n	800493e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	881a      	ldrh	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	1c9a      	adds	r2, r3, #2
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800493c:	e018      	b.n	8004970 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800493e:	f7fe fb03 	bl	8002f48 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d803      	bhi.n	8004956 <HAL_SPI_Transmit+0x160>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d102      	bne.n	800495c <HAL_SPI_Transmit+0x166>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e082      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1c7      	bne.n	800490a <HAL_SPI_Transmit+0x114>
 800497a:	e053      	b.n	8004a24 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_SPI_Transmit+0x194>
 8004984:	8b7b      	ldrh	r3, [r7, #26]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d147      	bne.n	8004a1a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	7812      	ldrb	r2, [r2, #0]
 8004996:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049b0:	e033      	b.n	8004a1a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d113      	bne.n	80049e8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	330c      	adds	r3, #12
 80049ca:	7812      	ldrb	r2, [r2, #0]
 80049cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049e6:	e018      	b.n	8004a1a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e8:	f7fe faae 	bl	8002f48 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d803      	bhi.n	8004a00 <HAL_SPI_Transmit+0x20a>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d102      	bne.n	8004a06 <HAL_SPI_Transmit+0x210>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e02d      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1c6      	bne.n	80049b2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	6839      	ldr	r1, [r7, #0]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fbd9 	bl	80051e0 <SPI_EndRxTxTransaction>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b088      	sub	sp, #32
 8004a82:	af02      	add	r7, sp, #8
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d001      	beq.n	8004a9e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e104      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aa6:	d112      	bne.n	8004ace <HAL_SPI_Receive+0x50>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10e      	bne.n	8004ace <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ab8:	88fa      	ldrh	r2, [r7, #6]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f8f3 	bl	8004cb0 <HAL_SPI_TransmitReceive>
 8004aca:	4603      	mov	r3, r0
 8004acc:	e0ec      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ace:	f7fe fa3b 	bl	8002f48 <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_Receive+0x62>
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0e1      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_SPI_Receive+0x74>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e0da      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2204      	movs	r2, #4
 8004afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	88fa      	ldrh	r2, [r7, #6]
 8004b12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b40:	d10f      	bne.n	8004b62 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6c:	2b40      	cmp	r3, #64	@ 0x40
 8004b6e:	d007      	beq.n	8004b80 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d170      	bne.n	8004c6a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b88:	e035      	b.n	8004bf6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d115      	bne.n	8004bc4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f103 020c 	add.w	r2, r3, #12
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bc2:	e018      	b.n	8004bf6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc4:	f7fe f9c0 	bl	8002f48 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d803      	bhi.n	8004bdc <HAL_SPI_Receive+0x15e>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d102      	bne.n	8004be2 <HAL_SPI_Receive+0x164>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e058      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1c4      	bne.n	8004b8a <HAL_SPI_Receive+0x10c>
 8004c00:	e038      	b.n	8004c74 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d113      	bne.n	8004c38 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	1c9a      	adds	r2, r3, #2
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c36:	e018      	b.n	8004c6a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c38:	f7fe f986 	bl	8002f48 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d803      	bhi.n	8004c50 <HAL_SPI_Receive+0x1d2>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d102      	bne.n	8004c56 <HAL_SPI_Receive+0x1d8>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e01e      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1c6      	bne.n	8004c02 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fa4b 	bl	8005114 <SPI_EndRxTransaction>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08a      	sub	sp, #40	@ 0x28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cc2:	f7fe f941 	bl	8002f48 <HAL_GetTick>
 8004cc6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cce:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cda:	7ffb      	ldrb	r3, [r7, #31]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d00c      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x4a>
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ce6:	d106      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x46>
 8004cf0:	7ffb      	ldrb	r3, [r7, #31]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d001      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e17f      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x5c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x5c>
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e174      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x6e>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e16d      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d003      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2205      	movs	r2, #5
 8004d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	887a      	ldrh	r2, [r7, #2]
 8004d62:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7a:	2b40      	cmp	r3, #64	@ 0x40
 8004d7c:	d007      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d96:	d17e      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0xf6>
 8004da0:	8afb      	ldrh	r3, [r7, #22]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d16c      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	881a      	ldrh	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dca:	e059      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d11b      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x162>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d016      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x162>
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d113      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	881a      	ldrh	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d119      	bne.n	8004e54 <HAL_SPI_TransmitReceive+0x1a4>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d014      	beq.n	8004e54 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	b292      	uxth	r2, r2
 8004e36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	1c9a      	adds	r2, r3, #2
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e50:	2301      	movs	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e54:	f7fe f878 	bl	8002f48 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d80d      	bhi.n	8004e80 <HAL_SPI_TransmitReceive+0x1d0>
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d009      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0bc      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1a0      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x11c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d19b      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x11c>
 8004e94:	e082      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_TransmitReceive+0x1f4>
 8004e9e:	8afb      	ldrh	r3, [r7, #22]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d171      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330c      	adds	r3, #12
 8004eae:	7812      	ldrb	r2, [r2, #0]
 8004eb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eca:	e05d      	b.n	8004f88 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d11c      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x264>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d017      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x264>
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d114      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	7812      	ldrb	r2, [r2, #0]
 8004ef6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d119      	bne.n	8004f56 <HAL_SPI_TransmitReceive+0x2a6>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d014      	beq.n	8004f56 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f52:	2301      	movs	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f56:	f7fd fff7 	bl	8002f48 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d803      	bhi.n	8004f6e <HAL_SPI_TransmitReceive+0x2be>
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d102      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x2c4>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e038      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d19c      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x21c>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d197      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f91d 	bl	80051e0 <SPI_EndRxTxTransaction>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e01d      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3728      	adds	r7, #40	@ 0x28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005014:	f7fd ff98 	bl	8002f48 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	4413      	add	r3, r2
 8005022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005024:	f7fd ff90 	bl	8002f48 <HAL_GetTick>
 8005028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800502a:	4b39      	ldr	r3, [pc, #228]	@ (8005110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	015b      	lsls	r3, r3, #5
 8005030:	0d1b      	lsrs	r3, r3, #20
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	fb02 f303 	mul.w	r3, r2, r3
 8005038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800503a:	e054      	b.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d050      	beq.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005044:	f7fd ff80 	bl	8002f48 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	429a      	cmp	r2, r3
 8005052:	d902      	bls.n	800505a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d13d      	bne.n	80050d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005072:	d111      	bne.n	8005098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800507c:	d004      	beq.n	8005088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005086:	d107      	bne.n	8005098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a0:	d10f      	bne.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e017      	b.n	8005106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4013      	ands	r3, r2
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	bf0c      	ite	eq
 80050f6:	2301      	moveq	r3, #1
 80050f8:	2300      	movne	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	429a      	cmp	r2, r3
 8005102:	d19b      	bne.n	800503c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000014 	.word	0x20000014

08005114 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005128:	d111      	bne.n	800514e <SPI_EndRxTransaction+0x3a>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005132:	d004      	beq.n	800513e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513c:	d107      	bne.n	800514e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800514c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005156:	d12a      	bne.n	80051ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005160:	d012      	beq.n	8005188 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2200      	movs	r2, #0
 800516a:	2180      	movs	r1, #128	@ 0x80
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff ff49 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02d      	beq.n	80051d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517c:	f043 0220 	orr.w	r2, r3, #32
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e026      	b.n	80051d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	2101      	movs	r1, #1
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff ff36 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01a      	beq.n	80051d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e013      	b.n	80051d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	2101      	movs	r1, #1
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff23 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e000      	b.n	80051d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2201      	movs	r2, #1
 80051f4:	2102      	movs	r1, #2
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff ff04 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e032      	b.n	8005278 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005212:	4b1b      	ldr	r3, [pc, #108]	@ (8005280 <SPI_EndRxTxTransaction+0xa0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1b      	ldr	r2, [pc, #108]	@ (8005284 <SPI_EndRxTxTransaction+0xa4>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	0d5b      	lsrs	r3, r3, #21
 800521e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005222:	fb02 f303 	mul.w	r3, r2, r3
 8005226:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005230:	d112      	bne.n	8005258 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2200      	movs	r2, #0
 800523a:	2180      	movs	r1, #128	@ 0x80
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f7ff fee1 	bl	8005004 <SPI_WaitFlagStateUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d016      	beq.n	8005276 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524c:	f043 0220 	orr.w	r2, r3, #32
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e00f      	b.n	8005278 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	3b01      	subs	r3, #1
 8005262:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526e:	2b80      	cmp	r3, #128	@ 0x80
 8005270:	d0f2      	beq.n	8005258 <SPI_EndRxTxTransaction+0x78>
 8005272:	e000      	b.n	8005276 <SPI_EndRxTxTransaction+0x96>
        break;
 8005274:	bf00      	nop
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000014 	.word	0x20000014
 8005284:	165e9f81 	.word	0x165e9f81

08005288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e041      	b.n	800531e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fd fc92 	bl	8002bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 fe5a 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d001      	beq.n	8005340 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e046      	b.n	80053ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a23      	ldr	r2, [pc, #140]	@ (80053dc <HAL_TIM_Base_Start+0xb4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d022      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535a:	d01d      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1f      	ldr	r2, [pc, #124]	@ (80053e0 <HAL_TIM_Base_Start+0xb8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d018      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1e      	ldr	r2, [pc, #120]	@ (80053e4 <HAL_TIM_Base_Start+0xbc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <HAL_TIM_Base_Start+0xc0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00e      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1b      	ldr	r2, [pc, #108]	@ (80053ec <HAL_TIM_Base_Start+0xc4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d009      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <HAL_TIM_Base_Start+0xc8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_TIM_Base_Start+0x70>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <HAL_TIM_Base_Start+0xcc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d111      	bne.n	80053bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b06      	cmp	r3, #6
 80053a8:	d010      	beq.n	80053cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ba:	e007      	b.n	80053cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40010400 	.word	0x40010400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40001800 	.word	0x40001800

080053f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d001      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e04e      	b.n	80054ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a23      	ldr	r2, [pc, #140]	@ (80054bc <HAL_TIM_Base_Start_IT+0xc4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d022      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543a:	d01d      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1f      	ldr	r2, [pc, #124]	@ (80054c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d018      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1e      	ldr	r2, [pc, #120]	@ (80054c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1c      	ldr	r2, [pc, #112]	@ (80054c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1b      	ldr	r2, [pc, #108]	@ (80054cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a19      	ldr	r2, [pc, #100]	@ (80054d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a18      	ldr	r2, [pc, #96]	@ (80054d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d111      	bne.n	800549c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b06      	cmp	r3, #6
 8005488:	d010      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549a:	e007      	b.n	80054ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40000800 	.word	0x40000800
 80054c8:	40000c00 	.word	0x40000c00
 80054cc:	40010400 	.word	0x40010400
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40001800 	.word	0x40001800

080054d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e041      	b.n	800556e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f839 	bl	8005576 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f000 fd32 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <HAL_TIM_PWM_Start+0x24>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e022      	b.n	80055f6 <HAL_TIM_PWM_Start+0x6a>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d109      	bne.n	80055ca <HAL_TIM_PWM_Start+0x3e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	bf14      	ite	ne
 80055c2:	2301      	movne	r3, #1
 80055c4:	2300      	moveq	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	e015      	b.n	80055f6 <HAL_TIM_PWM_Start+0x6a>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d109      	bne.n	80055e4 <HAL_TIM_PWM_Start+0x58>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e008      	b.n	80055f6 <HAL_TIM_PWM_Start+0x6a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	bf14      	ite	ne
 80055f0:	2301      	movne	r3, #1
 80055f2:	2300      	moveq	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e07c      	b.n	80056f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Start+0x82>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800560c:	e013      	b.n	8005636 <HAL_TIM_PWM_Start+0xaa>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d104      	bne.n	800561e <HAL_TIM_PWM_Start+0x92>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800561c:	e00b      	b.n	8005636 <HAL_TIM_PWM_Start+0xaa>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b08      	cmp	r3, #8
 8005622:	d104      	bne.n	800562e <HAL_TIM_PWM_Start+0xa2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800562c:	e003      	b.n	8005636 <HAL_TIM_PWM_Start+0xaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f001 f935 	bl	80068ae <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2d      	ldr	r2, [pc, #180]	@ (8005700 <HAL_TIM_PWM_Start+0x174>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d004      	beq.n	8005658 <HAL_TIM_PWM_Start+0xcc>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2c      	ldr	r2, [pc, #176]	@ (8005704 <HAL_TIM_PWM_Start+0x178>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d101      	bne.n	800565c <HAL_TIM_PWM_Start+0xd0>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_TIM_PWM_Start+0xd2>
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005670:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a22      	ldr	r2, [pc, #136]	@ (8005700 <HAL_TIM_PWM_Start+0x174>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d022      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x136>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005684:	d01d      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x136>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1f      	ldr	r2, [pc, #124]	@ (8005708 <HAL_TIM_PWM_Start+0x17c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d018      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x136>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a1d      	ldr	r2, [pc, #116]	@ (800570c <HAL_TIM_PWM_Start+0x180>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x136>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1c      	ldr	r2, [pc, #112]	@ (8005710 <HAL_TIM_PWM_Start+0x184>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00e      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x136>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a16      	ldr	r2, [pc, #88]	@ (8005704 <HAL_TIM_PWM_Start+0x178>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d009      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x136>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a18      	ldr	r2, [pc, #96]	@ (8005714 <HAL_TIM_PWM_Start+0x188>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x136>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a16      	ldr	r2, [pc, #88]	@ (8005718 <HAL_TIM_PWM_Start+0x18c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d111      	bne.n	80056e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b06      	cmp	r3, #6
 80056d2:	d010      	beq.n	80056f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e4:	e007      	b.n	80056f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40010000 	.word	0x40010000
 8005704:	40010400 	.word	0x40010400
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40014000 	.word	0x40014000
 8005718:	40001800 	.word	0x40001800

0800571c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e041      	b.n	80057b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f839 	bl	80057ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3304      	adds	r3, #4
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f000 fc10 	bl	8005f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <HAL_TIM_IC_Start+0x1a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e013      	b.n	8005812 <HAL_TIM_IC_Start+0x42>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d104      	bne.n	80057fa <HAL_TIM_IC_Start+0x2a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	e00b      	b.n	8005812 <HAL_TIM_IC_Start+0x42>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d104      	bne.n	800580a <HAL_TIM_IC_Start+0x3a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005806:	b2db      	uxtb	r3, r3
 8005808:	e003      	b.n	8005812 <HAL_TIM_IC_Start+0x42>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005810:	b2db      	uxtb	r3, r3
 8005812:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <HAL_TIM_IC_Start+0x54>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005820:	b2db      	uxtb	r3, r3
 8005822:	e013      	b.n	800584c <HAL_TIM_IC_Start+0x7c>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b04      	cmp	r3, #4
 8005828:	d104      	bne.n	8005834 <HAL_TIM_IC_Start+0x64>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005830:	b2db      	uxtb	r3, r3
 8005832:	e00b      	b.n	800584c <HAL_TIM_IC_Start+0x7c>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b08      	cmp	r3, #8
 8005838:	d104      	bne.n	8005844 <HAL_TIM_IC_Start+0x74>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005840:	b2db      	uxtb	r3, r3
 8005842:	e003      	b.n	800584c <HAL_TIM_IC_Start+0x7c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800584a:	b2db      	uxtb	r3, r3
 800584c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d102      	bne.n	800585a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005854:	7bbb      	ldrb	r3, [r7, #14]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d001      	beq.n	800585e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e081      	b.n	8005962 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <HAL_TIM_IC_Start+0x9e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800586c:	e013      	b.n	8005896 <HAL_TIM_IC_Start+0xc6>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b04      	cmp	r3, #4
 8005872:	d104      	bne.n	800587e <HAL_TIM_IC_Start+0xae>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800587c:	e00b      	b.n	8005896 <HAL_TIM_IC_Start+0xc6>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d104      	bne.n	800588e <HAL_TIM_IC_Start+0xbe>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800588c:	e003      	b.n	8005896 <HAL_TIM_IC_Start+0xc6>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <HAL_TIM_IC_Start+0xd6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058a4:	e013      	b.n	80058ce <HAL_TIM_IC_Start+0xfe>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_IC_Start+0xe6>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058b4:	e00b      	b.n	80058ce <HAL_TIM_IC_Start+0xfe>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_IC_Start+0xf6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058c4:	e003      	b.n	80058ce <HAL_TIM_IC_Start+0xfe>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2201      	movs	r2, #1
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 ffe9 	bl	80068ae <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a22      	ldr	r2, [pc, #136]	@ (800596c <HAL_TIM_IC_Start+0x19c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d022      	beq.n	800592c <HAL_TIM_IC_Start+0x15c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ee:	d01d      	beq.n	800592c <HAL_TIM_IC_Start+0x15c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005970 <HAL_TIM_IC_Start+0x1a0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d018      	beq.n	800592c <HAL_TIM_IC_Start+0x15c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005974 <HAL_TIM_IC_Start+0x1a4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <HAL_TIM_IC_Start+0x15c>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1b      	ldr	r2, [pc, #108]	@ (8005978 <HAL_TIM_IC_Start+0x1a8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_TIM_IC_Start+0x15c>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1a      	ldr	r2, [pc, #104]	@ (800597c <HAL_TIM_IC_Start+0x1ac>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <HAL_TIM_IC_Start+0x15c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a18      	ldr	r2, [pc, #96]	@ (8005980 <HAL_TIM_IC_Start+0x1b0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_TIM_IC_Start+0x15c>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a17      	ldr	r2, [pc, #92]	@ (8005984 <HAL_TIM_IC_Start+0x1b4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d111      	bne.n	8005950 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b06      	cmp	r3, #6
 800593c:	d010      	beq.n	8005960 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	e007      	b.n	8005960 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40001800 	.word	0x40001800

08005988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d020      	beq.n	80059ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01b      	beq.n	80059ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0202 	mvn.w	r2, #2
 80059bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fab6 	bl	8005f44 <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 faa8 	bl	8005f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fab9 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d020      	beq.n	8005a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01b      	beq.n	8005a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0204 	mvn.w	r2, #4
 8005a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa90 	bl	8005f44 <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa82 	bl	8005f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fa93 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01b      	beq.n	8005a84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0208 	mvn.w	r2, #8
 8005a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2204      	movs	r2, #4
 8005a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa6a 	bl	8005f44 <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa5c 	bl	8005f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fa6d 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d020      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0210 	mvn.w	r2, #16
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2208      	movs	r2, #8
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fa44 	bl	8005f44 <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa36 	bl	8005f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fa47 	bl	8005f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0201 	mvn.w	r2, #1
 8005aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fc fc7e 	bl	80023f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00c      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 ff76 	bl	8006a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa18 	bl	8005f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0220 	mvn.w	r2, #32
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 ff48 	bl	80069f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e088      	b.n	8005c98 <HAL_TIM_IC_ConfigChannel+0x130>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11b      	bne.n	8005bcc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005ba4:	f000 fcda 	bl	800655c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 020c 	bic.w	r2, r2, #12
 8005bb6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6999      	ldr	r1, [r3, #24]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	619a      	str	r2, [r3, #24]
 8005bca:	e060      	b.n	8005c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d11c      	bne.n	8005c0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005be2:	f000 fd5e 	bl	80066a2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005bf4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6999      	ldr	r1, [r3, #24]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	021a      	lsls	r2, r3, #8
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	619a      	str	r2, [r3, #24]
 8005c0a:	e040      	b.n	8005c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d11b      	bne.n	8005c4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005c22:	f000 fdab 	bl	800677c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 020c 	bic.w	r2, r2, #12
 8005c34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69d9      	ldr	r1, [r3, #28]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	61da      	str	r2, [r3, #28]
 8005c48:	e021      	b.n	8005c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b0c      	cmp	r3, #12
 8005c4e:	d11c      	bne.n	8005c8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c60:	f000 fdc8 	bl	80067f4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69da      	ldr	r2, [r3, #28]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69d9      	ldr	r1, [r3, #28]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	61da      	str	r2, [r3, #28]
 8005c88:	e001      	b.n	8005c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e0ae      	b.n	8005e1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b0c      	cmp	r3, #12
 8005cca:	f200 809f 	bhi.w	8005e0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cce:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005d09 	.word	0x08005d09
 8005cd8:	08005e0d 	.word	0x08005e0d
 8005cdc:	08005e0d 	.word	0x08005e0d
 8005ce0:	08005e0d 	.word	0x08005e0d
 8005ce4:	08005d49 	.word	0x08005d49
 8005ce8:	08005e0d 	.word	0x08005e0d
 8005cec:	08005e0d 	.word	0x08005e0d
 8005cf0:	08005e0d 	.word	0x08005e0d
 8005cf4:	08005d8b 	.word	0x08005d8b
 8005cf8:	08005e0d 	.word	0x08005e0d
 8005cfc:	08005e0d 	.word	0x08005e0d
 8005d00:	08005e0d 	.word	0x08005e0d
 8005d04:	08005dcb 	.word	0x08005dcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f9e2 	bl	80060d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0208 	orr.w	r2, r2, #8
 8005d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0204 	bic.w	r2, r2, #4
 8005d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6999      	ldr	r1, [r3, #24]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	619a      	str	r2, [r3, #24]
      break;
 8005d46:	e064      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fa32 	bl	80061b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6999      	ldr	r1, [r3, #24]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	021a      	lsls	r2, r3, #8
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	619a      	str	r2, [r3, #24]
      break;
 8005d88:	e043      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fa87 	bl	80062a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0208 	orr.w	r2, r2, #8
 8005da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0204 	bic.w	r2, r2, #4
 8005db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69d9      	ldr	r1, [r3, #28]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	61da      	str	r2, [r3, #28]
      break;
 8005dc8:	e023      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fadb 	bl	800638c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69d9      	ldr	r1, [r3, #28]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	021a      	lsls	r2, r3, #8
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	61da      	str	r2, [r3, #28]
      break;
 8005e0a:	e002      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e031      	b.n	8005ea0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 faf2 	bl	8006438 <TIM_SlaveTimer_SetConfig>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e018      	b.n	8005ea0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e7c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e8c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b0c      	cmp	r3, #12
 8005eba:	d831      	bhi.n	8005f20 <HAL_TIM_ReadCapturedValue+0x78>
 8005ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005ef9 	.word	0x08005ef9
 8005ec8:	08005f21 	.word	0x08005f21
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	08005f21 	.word	0x08005f21
 8005ed4:	08005f03 	.word	0x08005f03
 8005ed8:	08005f21 	.word	0x08005f21
 8005edc:	08005f21 	.word	0x08005f21
 8005ee0:	08005f21 	.word	0x08005f21
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f21 	.word	0x08005f21
 8005eec:	08005f21 	.word	0x08005f21
 8005ef0:	08005f21 	.word	0x08005f21
 8005ef4:	08005f17 	.word	0x08005f17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efe:	60fb      	str	r3, [r7, #12]

      break;
 8005f00:	e00f      	b.n	8005f22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f08:	60fb      	str	r3, [r7, #12]

      break;
 8005f0a:	e00a      	b.n	8005f22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f12:	60fb      	str	r3, [r7, #12]

      break;
 8005f14:	e005      	b.n	8005f22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	60fb      	str	r3, [r7, #12]

      break;
 8005f1e:	e000      	b.n	8005f22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f20:	bf00      	nop
  }

  return tmpreg;
 8005f22:	68fb      	ldr	r3, [r7, #12]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a46      	ldr	r2, [pc, #280]	@ (80060ac <TIM_Base_SetConfig+0x12c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9e:	d00f      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a43      	ldr	r2, [pc, #268]	@ (80060b0 <TIM_Base_SetConfig+0x130>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00b      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a42      	ldr	r2, [pc, #264]	@ (80060b4 <TIM_Base_SetConfig+0x134>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d007      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a41      	ldr	r2, [pc, #260]	@ (80060b8 <TIM_Base_SetConfig+0x138>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d003      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a40      	ldr	r2, [pc, #256]	@ (80060bc <TIM_Base_SetConfig+0x13c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d108      	bne.n	8005fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a35      	ldr	r2, [pc, #212]	@ (80060ac <TIM_Base_SetConfig+0x12c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d02b      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe0:	d027      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a32      	ldr	r2, [pc, #200]	@ (80060b0 <TIM_Base_SetConfig+0x130>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d023      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a31      	ldr	r2, [pc, #196]	@ (80060b4 <TIM_Base_SetConfig+0x134>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d01f      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a30      	ldr	r2, [pc, #192]	@ (80060b8 <TIM_Base_SetConfig+0x138>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d01b      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80060bc <TIM_Base_SetConfig+0x13c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d017      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2e      	ldr	r2, [pc, #184]	@ (80060c0 <TIM_Base_SetConfig+0x140>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2d      	ldr	r2, [pc, #180]	@ (80060c4 <TIM_Base_SetConfig+0x144>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00f      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2c      	ldr	r2, [pc, #176]	@ (80060c8 <TIM_Base_SetConfig+0x148>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00b      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2b      	ldr	r2, [pc, #172]	@ (80060cc <TIM_Base_SetConfig+0x14c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d007      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2a      	ldr	r2, [pc, #168]	@ (80060d0 <TIM_Base_SetConfig+0x150>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a29      	ldr	r2, [pc, #164]	@ (80060d4 <TIM_Base_SetConfig+0x154>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d108      	bne.n	8006044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a10      	ldr	r2, [pc, #64]	@ (80060ac <TIM_Base_SetConfig+0x12c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_Base_SetConfig+0xf8>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a12      	ldr	r2, [pc, #72]	@ (80060bc <TIM_Base_SetConfig+0x13c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d103      	bne.n	8006080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b01      	cmp	r3, #1
 8006090:	d105      	bne.n	800609e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f023 0201 	bic.w	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	611a      	str	r2, [r3, #16]
  }
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40010000 	.word	0x40010000
 80060b0:	40000400 	.word	0x40000400
 80060b4:	40000800 	.word	0x40000800
 80060b8:	40000c00 	.word	0x40000c00
 80060bc:	40010400 	.word	0x40010400
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40014400 	.word	0x40014400
 80060c8:	40014800 	.word	0x40014800
 80060cc:	40001800 	.word	0x40001800
 80060d0:	40001c00 	.word	0x40001c00
 80060d4:	40002000 	.word	0x40002000

080060d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f023 0201 	bic.w	r2, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 0302 	bic.w	r3, r3, #2
 8006120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a20      	ldr	r2, [pc, #128]	@ (80061b0 <TIM_OC1_SetConfig+0xd8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_OC1_SetConfig+0x64>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a1f      	ldr	r2, [pc, #124]	@ (80061b4 <TIM_OC1_SetConfig+0xdc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d10c      	bne.n	8006156 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f023 0308 	bic.w	r3, r3, #8
 8006142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 0304 	bic.w	r3, r3, #4
 8006154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a15      	ldr	r2, [pc, #84]	@ (80061b0 <TIM_OC1_SetConfig+0xd8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_OC1_SetConfig+0x8e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a14      	ldr	r2, [pc, #80]	@ (80061b4 <TIM_OC1_SetConfig+0xdc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d111      	bne.n	800618a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800616c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40010400 	.word	0x40010400

080061b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f023 0210 	bic.w	r2, r3, #16
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f023 0320 	bic.w	r3, r3, #32
 8006202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a22      	ldr	r2, [pc, #136]	@ (800629c <TIM_OC2_SetConfig+0xe4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_OC2_SetConfig+0x68>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a21      	ldr	r2, [pc, #132]	@ (80062a0 <TIM_OC2_SetConfig+0xe8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d10d      	bne.n	800623c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800623a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a17      	ldr	r2, [pc, #92]	@ (800629c <TIM_OC2_SetConfig+0xe4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_OC2_SetConfig+0x94>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a16      	ldr	r2, [pc, #88]	@ (80062a0 <TIM_OC2_SetConfig+0xe8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d113      	bne.n	8006274 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800625a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40010000 	.word	0x40010000
 80062a0:	40010400 	.word	0x40010400

080062a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	021b      	lsls	r3, r3, #8
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a21      	ldr	r2, [pc, #132]	@ (8006384 <TIM_OC3_SetConfig+0xe0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d003      	beq.n	800630a <TIM_OC3_SetConfig+0x66>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a20      	ldr	r2, [pc, #128]	@ (8006388 <TIM_OC3_SetConfig+0xe4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d10d      	bne.n	8006326 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a16      	ldr	r2, [pc, #88]	@ (8006384 <TIM_OC3_SetConfig+0xe0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_OC3_SetConfig+0x92>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a15      	ldr	r2, [pc, #84]	@ (8006388 <TIM_OC3_SetConfig+0xe4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d113      	bne.n	800635e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800633c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	40010000 	.word	0x40010000
 8006388:	40010400 	.word	0x40010400

0800638c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	031b      	lsls	r3, r3, #12
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a12      	ldr	r2, [pc, #72]	@ (8006430 <TIM_OC4_SetConfig+0xa4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_OC4_SetConfig+0x68>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a11      	ldr	r2, [pc, #68]	@ (8006434 <TIM_OC4_SetConfig+0xa8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d109      	bne.n	8006408 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	019b      	lsls	r3, r3, #6
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40010000 	.word	0x40010000
 8006434:	40010400 	.word	0x40010400

08006438 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006454:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f023 0307 	bic.w	r3, r3, #7
 8006466:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b70      	cmp	r3, #112	@ 0x70
 8006480:	d01a      	beq.n	80064b8 <TIM_SlaveTimer_SetConfig+0x80>
 8006482:	2b70      	cmp	r3, #112	@ 0x70
 8006484:	d860      	bhi.n	8006548 <TIM_SlaveTimer_SetConfig+0x110>
 8006486:	2b60      	cmp	r3, #96	@ 0x60
 8006488:	d054      	beq.n	8006534 <TIM_SlaveTimer_SetConfig+0xfc>
 800648a:	2b60      	cmp	r3, #96	@ 0x60
 800648c:	d85c      	bhi.n	8006548 <TIM_SlaveTimer_SetConfig+0x110>
 800648e:	2b50      	cmp	r3, #80	@ 0x50
 8006490:	d046      	beq.n	8006520 <TIM_SlaveTimer_SetConfig+0xe8>
 8006492:	2b50      	cmp	r3, #80	@ 0x50
 8006494:	d858      	bhi.n	8006548 <TIM_SlaveTimer_SetConfig+0x110>
 8006496:	2b40      	cmp	r3, #64	@ 0x40
 8006498:	d019      	beq.n	80064ce <TIM_SlaveTimer_SetConfig+0x96>
 800649a:	2b40      	cmp	r3, #64	@ 0x40
 800649c:	d854      	bhi.n	8006548 <TIM_SlaveTimer_SetConfig+0x110>
 800649e:	2b30      	cmp	r3, #48	@ 0x30
 80064a0:	d055      	beq.n	800654e <TIM_SlaveTimer_SetConfig+0x116>
 80064a2:	2b30      	cmp	r3, #48	@ 0x30
 80064a4:	d850      	bhi.n	8006548 <TIM_SlaveTimer_SetConfig+0x110>
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d051      	beq.n	800654e <TIM_SlaveTimer_SetConfig+0x116>
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d84c      	bhi.n	8006548 <TIM_SlaveTimer_SetConfig+0x110>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d04d      	beq.n	800654e <TIM_SlaveTimer_SetConfig+0x116>
 80064b2:	2b10      	cmp	r3, #16
 80064b4:	d04b      	beq.n	800654e <TIM_SlaveTimer_SetConfig+0x116>
 80064b6:	e047      	b.n	8006548 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80064c8:	f000 f9d1 	bl	800686e <TIM_ETR_SetConfig>
      break;
 80064cc:	e040      	b.n	8006550 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b05      	cmp	r3, #5
 80064d4:	d101      	bne.n	80064da <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e03b      	b.n	8006552 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006500:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	4313      	orrs	r3, r2
 800650c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	621a      	str	r2, [r3, #32]
      break;
 800651e:	e017      	b.n	8006550 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800652c:	461a      	mov	r2, r3
 800652e:	f000 f889 	bl	8006644 <TIM_TI1_ConfigInputStage>
      break;
 8006532:	e00d      	b.n	8006550 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006540:	461a      	mov	r2, r3
 8006542:	f000 f8eb 	bl	800671c <TIM_TI2_ConfigInputStage>
      break;
 8006546:	e003      	b.n	8006550 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	75fb      	strb	r3, [r7, #23]
      break;
 800654c:	e000      	b.n	8006550 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800654e:	bf00      	nop
  }

  return status;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f023 0201 	bic.w	r2, r3, #1
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4a28      	ldr	r2, [pc, #160]	@ (8006628 <TIM_TI1_SetConfig+0xcc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01b      	beq.n	80065c2 <TIM_TI1_SetConfig+0x66>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006590:	d017      	beq.n	80065c2 <TIM_TI1_SetConfig+0x66>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4a25      	ldr	r2, [pc, #148]	@ (800662c <TIM_TI1_SetConfig+0xd0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <TIM_TI1_SetConfig+0x66>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4a24      	ldr	r2, [pc, #144]	@ (8006630 <TIM_TI1_SetConfig+0xd4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00f      	beq.n	80065c2 <TIM_TI1_SetConfig+0x66>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a23      	ldr	r2, [pc, #140]	@ (8006634 <TIM_TI1_SetConfig+0xd8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00b      	beq.n	80065c2 <TIM_TI1_SetConfig+0x66>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a22      	ldr	r2, [pc, #136]	@ (8006638 <TIM_TI1_SetConfig+0xdc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d007      	beq.n	80065c2 <TIM_TI1_SetConfig+0x66>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a21      	ldr	r2, [pc, #132]	@ (800663c <TIM_TI1_SetConfig+0xe0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_TI1_SetConfig+0x66>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4a20      	ldr	r2, [pc, #128]	@ (8006640 <TIM_TI1_SetConfig+0xe4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d101      	bne.n	80065c6 <TIM_TI1_SetConfig+0x6a>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <TIM_TI1_SetConfig+0x6c>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0303 	bic.w	r3, r3, #3
 80065d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	e003      	b.n	80065e6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f023 030a 	bic.w	r3, r3, #10
 8006600:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f003 030a 	and.w	r3, r3, #10
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40010000 	.word	0x40010000
 800662c:	40000400 	.word	0x40000400
 8006630:	40000800 	.word	0x40000800
 8006634:	40000c00 	.word	0x40000c00
 8006638:	40010400 	.word	0x40010400
 800663c:	40014000 	.word	0x40014000
 8006640:	40001800 	.word	0x40001800

08006644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800666e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 030a 	bic.w	r3, r3, #10
 8006680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b087      	sub	sp, #28
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
 80066ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0210 	bic.w	r2, r3, #16
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	031b      	lsls	r3, r3, #12
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066f4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	621a      	str	r2, [r3, #32]
}
 8006710:	bf00      	nop
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 0210 	bic.w	r2, r3, #16
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	031b      	lsls	r3, r3, #12
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006758:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	621a      	str	r2, [r3, #32]
}
 8006770:	bf00      	nop
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f023 0303 	bic.w	r3, r3, #3
 80067a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80067cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006820:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006832:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	031b      	lsls	r3, r3, #12
 8006838:	b29b      	uxth	r3, r3
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006846:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	031b      	lsls	r3, r3, #12
 800684c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800686e:	b480      	push	{r7}
 8006870:	b087      	sub	sp, #28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006888:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	021a      	lsls	r2, r3, #8
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	431a      	orrs	r2, r3
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4313      	orrs	r3, r2
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	609a      	str	r2, [r3, #8]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b087      	sub	sp, #28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2201      	movs	r2, #1
 80068c2:	fa02 f303 	lsl.w	r3, r2, r3
 80068c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1a      	ldr	r2, [r3, #32]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	43db      	mvns	r3, r3
 80068d0:	401a      	ands	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	fa01 f303 	lsl.w	r3, r1, r3
 80068e6:	431a      	orrs	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800690c:	2302      	movs	r3, #2
 800690e:	e05a      	b.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a21      	ldr	r2, [pc, #132]	@ (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d022      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800695c:	d01d      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1d      	ldr	r2, [pc, #116]	@ (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d018      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1b      	ldr	r2, [pc, #108]	@ (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1a      	ldr	r2, [pc, #104]	@ (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00e      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a18      	ldr	r2, [pc, #96]	@ (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d009      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a17      	ldr	r2, [pc, #92]	@ (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a15      	ldr	r2, [pc, #84]	@ (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10c      	bne.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40000400 	.word	0x40000400
 80069dc:	40000800 	.word	0x40000800
 80069e0:	40000c00 	.word	0x40000c00
 80069e4:	40010400 	.word	0x40010400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40001800 	.word	0x40001800

080069f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e042      	b.n	8006ab0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fc f9aa 	bl	8002d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2224      	movs	r2, #36	@ 0x24
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fa09 	bl	8006e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	695a      	ldr	r2, [r3, #20]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	@ 0x28
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	d175      	bne.n	8006bc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_UART_Transmit+0x2c>
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e06e      	b.n	8006bc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2221      	movs	r2, #33	@ 0x21
 8006af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006af6:	f7fc fa27 	bl	8002f48 <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b10:	d108      	bne.n	8006b24 <HAL_UART_Transmit+0x6c>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e003      	b.n	8006b2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b2c:	e02e      	b.n	8006b8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2200      	movs	r2, #0
 8006b36:	2180      	movs	r1, #128	@ 0x80
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f8df 	bl	8006cfc <UART_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e03a      	b.n	8006bc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10b      	bne.n	8006b6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	3302      	adds	r3, #2
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	e007      	b.n	8006b7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	781a      	ldrb	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1cb      	bne.n	8006b2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2140      	movs	r1, #64	@ 0x40
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f8ab 	bl	8006cfc <UART_WaitOnFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e006      	b.n	8006bc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08a      	sub	sp, #40	@ 0x28
 8006bd2:	af02      	add	r7, sp, #8
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	f040 8081 	bne.w	8006cf2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <HAL_UART_Receive+0x2e>
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e079      	b.n	8006cf4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2222      	movs	r2, #34	@ 0x22
 8006c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c14:	f7fc f998 	bl	8002f48 <HAL_GetTick>
 8006c18:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	88fa      	ldrh	r2, [r7, #6]
 8006c1e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	88fa      	ldrh	r2, [r7, #6]
 8006c24:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c2e:	d108      	bne.n	8006c42 <HAL_UART_Receive+0x74>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	e003      	b.n	8006c4a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006c4a:	e047      	b.n	8006cdc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2200      	movs	r2, #0
 8006c54:	2120      	movs	r1, #32
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f850 	bl	8006cfc <UART_WaitOnFlagUntilTimeout>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e042      	b.n	8006cf4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10c      	bne.n	8006c8e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	3302      	adds	r3, #2
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	e01f      	b.n	8006cce <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c96:	d007      	beq.n	8006ca8 <HAL_UART_Receive+0xda>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <HAL_UART_Receive+0xe8>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	e008      	b.n	8006cc8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1b2      	bne.n	8006c4c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e000      	b.n	8006cf4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006cf2:	2302      	movs	r3, #2
  }
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3720      	adds	r7, #32
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	603b      	str	r3, [r7, #0]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0c:	e03b      	b.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d14:	d037      	beq.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d16:	f7fc f917 	bl	8002f48 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	6a3a      	ldr	r2, [r7, #32]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d302      	bcc.n	8006d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e03a      	b.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d023      	beq.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b80      	cmp	r3, #128	@ 0x80
 8006d42:	d020      	beq.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b40      	cmp	r3, #64	@ 0x40
 8006d48:	d01d      	beq.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d116      	bne.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 f81d 	bl	8006dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2208      	movs	r2, #8
 8006d78:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e00f      	b.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	bf0c      	ite	eq
 8006d96:	2301      	moveq	r3, #1
 8006d98:	2300      	movne	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d0b4      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b095      	sub	sp, #84	@ 0x54
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	330c      	adds	r3, #12
 8006dbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dd6:	643a      	str	r2, [r7, #64]	@ 0x40
 8006dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ddc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e5      	bne.n	8006db6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3314      	adds	r3, #20
 8006df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	f023 0301 	bic.w	r3, r3, #1
 8006e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3314      	adds	r3, #20
 8006e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e5      	bne.n	8006dea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d119      	bne.n	8006e5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f023 0310 	bic.w	r3, r3, #16
 8006e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e46:	61ba      	str	r2, [r7, #24]
 8006e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6979      	ldr	r1, [r7, #20]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	613b      	str	r3, [r7, #16]
   return(result);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e68:	bf00      	nop
 8006e6a:	3754      	adds	r7, #84	@ 0x54
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e78:	b0c0      	sub	sp, #256	@ 0x100
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e90:	68d9      	ldr	r1, [r3, #12]
 8006e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	ea40 0301 	orr.w	r3, r0, r1
 8006e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ecc:	f021 010c 	bic.w	r1, r1, #12
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006eda:	430b      	orrs	r3, r1
 8006edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eee:	6999      	ldr	r1, [r3, #24]
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	ea40 0301 	orr.w	r3, r0, r1
 8006efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b8f      	ldr	r3, [pc, #572]	@ (8007140 <UART_SetConfig+0x2cc>)
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d005      	beq.n	8006f14 <UART_SetConfig+0xa0>
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b8d      	ldr	r3, [pc, #564]	@ (8007144 <UART_SetConfig+0x2d0>)
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d104      	bne.n	8006f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f14:	f7fd fbd2 	bl	80046bc <HAL_RCC_GetPCLK2Freq>
 8006f18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f1c:	e003      	b.n	8006f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f1e:	f7fd fbb9 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 8006f22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f30:	f040 810c 	bne.w	800714c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f46:	4622      	mov	r2, r4
 8006f48:	462b      	mov	r3, r5
 8006f4a:	1891      	adds	r1, r2, r2
 8006f4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f4e:	415b      	adcs	r3, r3
 8006f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f56:	4621      	mov	r1, r4
 8006f58:	eb12 0801 	adds.w	r8, r2, r1
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	eb43 0901 	adc.w	r9, r3, r1
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f76:	4690      	mov	r8, r2
 8006f78:	4699      	mov	r9, r3
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	eb18 0303 	adds.w	r3, r8, r3
 8006f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f84:	462b      	mov	r3, r5
 8006f86:	eb49 0303 	adc.w	r3, r9, r3
 8006f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	18db      	adds	r3, r3, r3
 8006fa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fa8:	4613      	mov	r3, r2
 8006faa:	eb42 0303 	adc.w	r3, r2, r3
 8006fae:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fb8:	f7f9 fe46 	bl	8000c48 <__aeabi_uldivmod>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4b61      	ldr	r3, [pc, #388]	@ (8007148 <UART_SetConfig+0x2d4>)
 8006fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	011c      	lsls	r4, r3, #4
 8006fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	1891      	adds	r1, r2, r2
 8006fe2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006fe4:	415b      	adcs	r3, r3
 8006fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006fec:	4641      	mov	r1, r8
 8006fee:	eb12 0a01 	adds.w	sl, r2, r1
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800700c:	4692      	mov	sl, r2
 800700e:	469b      	mov	fp, r3
 8007010:	4643      	mov	r3, r8
 8007012:	eb1a 0303 	adds.w	r3, sl, r3
 8007016:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800701a:	464b      	mov	r3, r9
 800701c:	eb4b 0303 	adc.w	r3, fp, r3
 8007020:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007030:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007038:	460b      	mov	r3, r1
 800703a:	18db      	adds	r3, r3, r3
 800703c:	643b      	str	r3, [r7, #64]	@ 0x40
 800703e:	4613      	mov	r3, r2
 8007040:	eb42 0303 	adc.w	r3, r2, r3
 8007044:	647b      	str	r3, [r7, #68]	@ 0x44
 8007046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800704a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800704e:	f7f9 fdfb 	bl	8000c48 <__aeabi_uldivmod>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4611      	mov	r1, r2
 8007058:	4b3b      	ldr	r3, [pc, #236]	@ (8007148 <UART_SetConfig+0x2d4>)
 800705a:	fba3 2301 	umull	r2, r3, r3, r1
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	2264      	movs	r2, #100	@ 0x64
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	1acb      	subs	r3, r1, r3
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800706e:	4b36      	ldr	r3, [pc, #216]	@ (8007148 <UART_SetConfig+0x2d4>)
 8007070:	fba3 2302 	umull	r2, r3, r3, r2
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800707c:	441c      	add	r4, r3
 800707e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007082:	2200      	movs	r2, #0
 8007084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007088:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800708c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	1891      	adds	r1, r2, r2
 8007096:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007098:	415b      	adcs	r3, r3
 800709a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800709c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070a0:	4641      	mov	r1, r8
 80070a2:	1851      	adds	r1, r2, r1
 80070a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80070a6:	4649      	mov	r1, r9
 80070a8:	414b      	adcs	r3, r1
 80070aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070b8:	4659      	mov	r1, fp
 80070ba:	00cb      	lsls	r3, r1, #3
 80070bc:	4651      	mov	r1, sl
 80070be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070c2:	4651      	mov	r1, sl
 80070c4:	00ca      	lsls	r2, r1, #3
 80070c6:	4610      	mov	r0, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	4642      	mov	r2, r8
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070d4:	464b      	mov	r3, r9
 80070d6:	460a      	mov	r2, r1
 80070d8:	eb42 0303 	adc.w	r3, r2, r3
 80070dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80070f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80070f4:	460b      	mov	r3, r1
 80070f6:	18db      	adds	r3, r3, r3
 80070f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070fa:	4613      	mov	r3, r2
 80070fc:	eb42 0303 	adc.w	r3, r2, r3
 8007100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800710a:	f7f9 fd9d 	bl	8000c48 <__aeabi_uldivmod>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4b0d      	ldr	r3, [pc, #52]	@ (8007148 <UART_SetConfig+0x2d4>)
 8007114:	fba3 1302 	umull	r1, r3, r3, r2
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	2164      	movs	r1, #100	@ 0x64
 800711c:	fb01 f303 	mul.w	r3, r1, r3
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	3332      	adds	r3, #50	@ 0x32
 8007126:	4a08      	ldr	r2, [pc, #32]	@ (8007148 <UART_SetConfig+0x2d4>)
 8007128:	fba2 2303 	umull	r2, r3, r2, r3
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	f003 0207 	and.w	r2, r3, #7
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4422      	add	r2, r4
 800713a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800713c:	e106      	b.n	800734c <UART_SetConfig+0x4d8>
 800713e:	bf00      	nop
 8007140:	40011000 	.word	0x40011000
 8007144:	40011400 	.word	0x40011400
 8007148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800714c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007150:	2200      	movs	r2, #0
 8007152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007156:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800715a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800715e:	4642      	mov	r2, r8
 8007160:	464b      	mov	r3, r9
 8007162:	1891      	adds	r1, r2, r2
 8007164:	6239      	str	r1, [r7, #32]
 8007166:	415b      	adcs	r3, r3
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
 800716a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800716e:	4641      	mov	r1, r8
 8007170:	1854      	adds	r4, r2, r1
 8007172:	4649      	mov	r1, r9
 8007174:	eb43 0501 	adc.w	r5, r3, r1
 8007178:	f04f 0200 	mov.w	r2, #0
 800717c:	f04f 0300 	mov.w	r3, #0
 8007180:	00eb      	lsls	r3, r5, #3
 8007182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007186:	00e2      	lsls	r2, r4, #3
 8007188:	4614      	mov	r4, r2
 800718a:	461d      	mov	r5, r3
 800718c:	4643      	mov	r3, r8
 800718e:	18e3      	adds	r3, r4, r3
 8007190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007194:	464b      	mov	r3, r9
 8007196:	eb45 0303 	adc.w	r3, r5, r3
 800719a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071ba:	4629      	mov	r1, r5
 80071bc:	008b      	lsls	r3, r1, #2
 80071be:	4621      	mov	r1, r4
 80071c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071c4:	4621      	mov	r1, r4
 80071c6:	008a      	lsls	r2, r1, #2
 80071c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80071cc:	f7f9 fd3c 	bl	8000c48 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4b60      	ldr	r3, [pc, #384]	@ (8007358 <UART_SetConfig+0x4e4>)
 80071d6:	fba3 2302 	umull	r2, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	011c      	lsls	r4, r3, #4
 80071de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80071ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80071f0:	4642      	mov	r2, r8
 80071f2:	464b      	mov	r3, r9
 80071f4:	1891      	adds	r1, r2, r2
 80071f6:	61b9      	str	r1, [r7, #24]
 80071f8:	415b      	adcs	r3, r3
 80071fa:	61fb      	str	r3, [r7, #28]
 80071fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007200:	4641      	mov	r1, r8
 8007202:	1851      	adds	r1, r2, r1
 8007204:	6139      	str	r1, [r7, #16]
 8007206:	4649      	mov	r1, r9
 8007208:	414b      	adcs	r3, r1
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007218:	4659      	mov	r1, fp
 800721a:	00cb      	lsls	r3, r1, #3
 800721c:	4651      	mov	r1, sl
 800721e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007222:	4651      	mov	r1, sl
 8007224:	00ca      	lsls	r2, r1, #3
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	4603      	mov	r3, r0
 800722c:	4642      	mov	r2, r8
 800722e:	189b      	adds	r3, r3, r2
 8007230:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007234:	464b      	mov	r3, r9
 8007236:	460a      	mov	r2, r1
 8007238:	eb42 0303 	adc.w	r3, r2, r3
 800723c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	67bb      	str	r3, [r7, #120]	@ 0x78
 800724a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800724c:	f04f 0200 	mov.w	r2, #0
 8007250:	f04f 0300 	mov.w	r3, #0
 8007254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007258:	4649      	mov	r1, r9
 800725a:	008b      	lsls	r3, r1, #2
 800725c:	4641      	mov	r1, r8
 800725e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007262:	4641      	mov	r1, r8
 8007264:	008a      	lsls	r2, r1, #2
 8007266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800726a:	f7f9 fced 	bl	8000c48 <__aeabi_uldivmod>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4611      	mov	r1, r2
 8007274:	4b38      	ldr	r3, [pc, #224]	@ (8007358 <UART_SetConfig+0x4e4>)
 8007276:	fba3 2301 	umull	r2, r3, r3, r1
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	2264      	movs	r2, #100	@ 0x64
 800727e:	fb02 f303 	mul.w	r3, r2, r3
 8007282:	1acb      	subs	r3, r1, r3
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	3332      	adds	r3, #50	@ 0x32
 8007288:	4a33      	ldr	r2, [pc, #204]	@ (8007358 <UART_SetConfig+0x4e4>)
 800728a:	fba2 2303 	umull	r2, r3, r2, r3
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007294:	441c      	add	r4, r3
 8007296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800729a:	2200      	movs	r2, #0
 800729c:	673b      	str	r3, [r7, #112]	@ 0x70
 800729e:	677a      	str	r2, [r7, #116]	@ 0x74
 80072a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072a4:	4642      	mov	r2, r8
 80072a6:	464b      	mov	r3, r9
 80072a8:	1891      	adds	r1, r2, r2
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	415b      	adcs	r3, r3
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072b4:	4641      	mov	r1, r8
 80072b6:	1851      	adds	r1, r2, r1
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	4649      	mov	r1, r9
 80072bc:	414b      	adcs	r3, r1
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072cc:	4659      	mov	r1, fp
 80072ce:	00cb      	lsls	r3, r1, #3
 80072d0:	4651      	mov	r1, sl
 80072d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072d6:	4651      	mov	r1, sl
 80072d8:	00ca      	lsls	r2, r1, #3
 80072da:	4610      	mov	r0, r2
 80072dc:	4619      	mov	r1, r3
 80072de:	4603      	mov	r3, r0
 80072e0:	4642      	mov	r2, r8
 80072e2:	189b      	adds	r3, r3, r2
 80072e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072e6:	464b      	mov	r3, r9
 80072e8:	460a      	mov	r2, r1
 80072ea:	eb42 0303 	adc.w	r3, r2, r3
 80072ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80072fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007308:	4649      	mov	r1, r9
 800730a:	008b      	lsls	r3, r1, #2
 800730c:	4641      	mov	r1, r8
 800730e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007312:	4641      	mov	r1, r8
 8007314:	008a      	lsls	r2, r1, #2
 8007316:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800731a:	f7f9 fc95 	bl	8000c48 <__aeabi_uldivmod>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4b0d      	ldr	r3, [pc, #52]	@ (8007358 <UART_SetConfig+0x4e4>)
 8007324:	fba3 1302 	umull	r1, r3, r3, r2
 8007328:	095b      	lsrs	r3, r3, #5
 800732a:	2164      	movs	r1, #100	@ 0x64
 800732c:	fb01 f303 	mul.w	r3, r1, r3
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	3332      	adds	r3, #50	@ 0x32
 8007336:	4a08      	ldr	r2, [pc, #32]	@ (8007358 <UART_SetConfig+0x4e4>)
 8007338:	fba2 2303 	umull	r2, r3, r2, r3
 800733c:	095b      	lsrs	r3, r3, #5
 800733e:	f003 020f 	and.w	r2, r3, #15
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4422      	add	r2, r4
 800734a:	609a      	str	r2, [r3, #8]
}
 800734c:	bf00      	nop
 800734e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007352:	46bd      	mov	sp, r7
 8007354:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007358:	51eb851f 	.word	0x51eb851f

0800735c <__cvt>:
 800735c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007360:	ec57 6b10 	vmov	r6, r7, d0
 8007364:	2f00      	cmp	r7, #0
 8007366:	460c      	mov	r4, r1
 8007368:	4619      	mov	r1, r3
 800736a:	463b      	mov	r3, r7
 800736c:	bfbb      	ittet	lt
 800736e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007372:	461f      	movlt	r7, r3
 8007374:	2300      	movge	r3, #0
 8007376:	232d      	movlt	r3, #45	@ 0x2d
 8007378:	700b      	strb	r3, [r1, #0]
 800737a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800737c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007380:	4691      	mov	r9, r2
 8007382:	f023 0820 	bic.w	r8, r3, #32
 8007386:	bfbc      	itt	lt
 8007388:	4632      	movlt	r2, r6
 800738a:	4616      	movlt	r6, r2
 800738c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007390:	d005      	beq.n	800739e <__cvt+0x42>
 8007392:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007396:	d100      	bne.n	800739a <__cvt+0x3e>
 8007398:	3401      	adds	r4, #1
 800739a:	2102      	movs	r1, #2
 800739c:	e000      	b.n	80073a0 <__cvt+0x44>
 800739e:	2103      	movs	r1, #3
 80073a0:	ab03      	add	r3, sp, #12
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	ab02      	add	r3, sp, #8
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	ec47 6b10 	vmov	d0, r6, r7
 80073ac:	4653      	mov	r3, sl
 80073ae:	4622      	mov	r2, r4
 80073b0:	f000 fe7e 	bl	80080b0 <_dtoa_r>
 80073b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80073b8:	4605      	mov	r5, r0
 80073ba:	d119      	bne.n	80073f0 <__cvt+0x94>
 80073bc:	f019 0f01 	tst.w	r9, #1
 80073c0:	d00e      	beq.n	80073e0 <__cvt+0x84>
 80073c2:	eb00 0904 	add.w	r9, r0, r4
 80073c6:	2200      	movs	r2, #0
 80073c8:	2300      	movs	r3, #0
 80073ca:	4630      	mov	r0, r6
 80073cc:	4639      	mov	r1, r7
 80073ce:	f7f9 fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80073d2:	b108      	cbz	r0, 80073d8 <__cvt+0x7c>
 80073d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80073d8:	2230      	movs	r2, #48	@ 0x30
 80073da:	9b03      	ldr	r3, [sp, #12]
 80073dc:	454b      	cmp	r3, r9
 80073de:	d31e      	bcc.n	800741e <__cvt+0xc2>
 80073e0:	9b03      	ldr	r3, [sp, #12]
 80073e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073e4:	1b5b      	subs	r3, r3, r5
 80073e6:	4628      	mov	r0, r5
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	b004      	add	sp, #16
 80073ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073f4:	eb00 0904 	add.w	r9, r0, r4
 80073f8:	d1e5      	bne.n	80073c6 <__cvt+0x6a>
 80073fa:	7803      	ldrb	r3, [r0, #0]
 80073fc:	2b30      	cmp	r3, #48	@ 0x30
 80073fe:	d10a      	bne.n	8007416 <__cvt+0xba>
 8007400:	2200      	movs	r2, #0
 8007402:	2300      	movs	r3, #0
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	f7f9 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800740c:	b918      	cbnz	r0, 8007416 <__cvt+0xba>
 800740e:	f1c4 0401 	rsb	r4, r4, #1
 8007412:	f8ca 4000 	str.w	r4, [sl]
 8007416:	f8da 3000 	ldr.w	r3, [sl]
 800741a:	4499      	add	r9, r3
 800741c:	e7d3      	b.n	80073c6 <__cvt+0x6a>
 800741e:	1c59      	adds	r1, r3, #1
 8007420:	9103      	str	r1, [sp, #12]
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e7d9      	b.n	80073da <__cvt+0x7e>

08007426 <__exponent>:
 8007426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007428:	2900      	cmp	r1, #0
 800742a:	bfba      	itte	lt
 800742c:	4249      	neglt	r1, r1
 800742e:	232d      	movlt	r3, #45	@ 0x2d
 8007430:	232b      	movge	r3, #43	@ 0x2b
 8007432:	2909      	cmp	r1, #9
 8007434:	7002      	strb	r2, [r0, #0]
 8007436:	7043      	strb	r3, [r0, #1]
 8007438:	dd29      	ble.n	800748e <__exponent+0x68>
 800743a:	f10d 0307 	add.w	r3, sp, #7
 800743e:	461d      	mov	r5, r3
 8007440:	270a      	movs	r7, #10
 8007442:	461a      	mov	r2, r3
 8007444:	fbb1 f6f7 	udiv	r6, r1, r7
 8007448:	fb07 1416 	mls	r4, r7, r6, r1
 800744c:	3430      	adds	r4, #48	@ 0x30
 800744e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007452:	460c      	mov	r4, r1
 8007454:	2c63      	cmp	r4, #99	@ 0x63
 8007456:	f103 33ff 	add.w	r3, r3, #4294967295
 800745a:	4631      	mov	r1, r6
 800745c:	dcf1      	bgt.n	8007442 <__exponent+0x1c>
 800745e:	3130      	adds	r1, #48	@ 0x30
 8007460:	1e94      	subs	r4, r2, #2
 8007462:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007466:	1c41      	adds	r1, r0, #1
 8007468:	4623      	mov	r3, r4
 800746a:	42ab      	cmp	r3, r5
 800746c:	d30a      	bcc.n	8007484 <__exponent+0x5e>
 800746e:	f10d 0309 	add.w	r3, sp, #9
 8007472:	1a9b      	subs	r3, r3, r2
 8007474:	42ac      	cmp	r4, r5
 8007476:	bf88      	it	hi
 8007478:	2300      	movhi	r3, #0
 800747a:	3302      	adds	r3, #2
 800747c:	4403      	add	r3, r0
 800747e:	1a18      	subs	r0, r3, r0
 8007480:	b003      	add	sp, #12
 8007482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007484:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007488:	f801 6f01 	strb.w	r6, [r1, #1]!
 800748c:	e7ed      	b.n	800746a <__exponent+0x44>
 800748e:	2330      	movs	r3, #48	@ 0x30
 8007490:	3130      	adds	r1, #48	@ 0x30
 8007492:	7083      	strb	r3, [r0, #2]
 8007494:	70c1      	strb	r1, [r0, #3]
 8007496:	1d03      	adds	r3, r0, #4
 8007498:	e7f1      	b.n	800747e <__exponent+0x58>
	...

0800749c <_printf_float>:
 800749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	b08d      	sub	sp, #52	@ 0x34
 80074a2:	460c      	mov	r4, r1
 80074a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80074a8:	4616      	mov	r6, r2
 80074aa:	461f      	mov	r7, r3
 80074ac:	4605      	mov	r5, r0
 80074ae:	f000 fcef 	bl	8007e90 <_localeconv_r>
 80074b2:	6803      	ldr	r3, [r0, #0]
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7f8 feda 	bl	8000270 <strlen>
 80074bc:	2300      	movs	r3, #0
 80074be:	930a      	str	r3, [sp, #40]	@ 0x28
 80074c0:	f8d8 3000 	ldr.w	r3, [r8]
 80074c4:	9005      	str	r0, [sp, #20]
 80074c6:	3307      	adds	r3, #7
 80074c8:	f023 0307 	bic.w	r3, r3, #7
 80074cc:	f103 0208 	add.w	r2, r3, #8
 80074d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80074d4:	f8d4 b000 	ldr.w	fp, [r4]
 80074d8:	f8c8 2000 	str.w	r2, [r8]
 80074dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80074e4:	9307      	str	r3, [sp, #28]
 80074e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80074ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80074ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074f2:	4b9c      	ldr	r3, [pc, #624]	@ (8007764 <_printf_float+0x2c8>)
 80074f4:	f04f 32ff 	mov.w	r2, #4294967295
 80074f8:	f7f9 fb18 	bl	8000b2c <__aeabi_dcmpun>
 80074fc:	bb70      	cbnz	r0, 800755c <_printf_float+0xc0>
 80074fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007502:	4b98      	ldr	r3, [pc, #608]	@ (8007764 <_printf_float+0x2c8>)
 8007504:	f04f 32ff 	mov.w	r2, #4294967295
 8007508:	f7f9 faf2 	bl	8000af0 <__aeabi_dcmple>
 800750c:	bb30      	cbnz	r0, 800755c <_printf_float+0xc0>
 800750e:	2200      	movs	r2, #0
 8007510:	2300      	movs	r3, #0
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	f7f9 fae1 	bl	8000adc <__aeabi_dcmplt>
 800751a:	b110      	cbz	r0, 8007522 <_printf_float+0x86>
 800751c:	232d      	movs	r3, #45	@ 0x2d
 800751e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007522:	4a91      	ldr	r2, [pc, #580]	@ (8007768 <_printf_float+0x2cc>)
 8007524:	4b91      	ldr	r3, [pc, #580]	@ (800776c <_printf_float+0x2d0>)
 8007526:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800752a:	bf94      	ite	ls
 800752c:	4690      	movls	r8, r2
 800752e:	4698      	movhi	r8, r3
 8007530:	2303      	movs	r3, #3
 8007532:	6123      	str	r3, [r4, #16]
 8007534:	f02b 0304 	bic.w	r3, fp, #4
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	f04f 0900 	mov.w	r9, #0
 800753e:	9700      	str	r7, [sp, #0]
 8007540:	4633      	mov	r3, r6
 8007542:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007544:	4621      	mov	r1, r4
 8007546:	4628      	mov	r0, r5
 8007548:	f000 f9d2 	bl	80078f0 <_printf_common>
 800754c:	3001      	adds	r0, #1
 800754e:	f040 808d 	bne.w	800766c <_printf_float+0x1d0>
 8007552:	f04f 30ff 	mov.w	r0, #4294967295
 8007556:	b00d      	add	sp, #52	@ 0x34
 8007558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755c:	4642      	mov	r2, r8
 800755e:	464b      	mov	r3, r9
 8007560:	4640      	mov	r0, r8
 8007562:	4649      	mov	r1, r9
 8007564:	f7f9 fae2 	bl	8000b2c <__aeabi_dcmpun>
 8007568:	b140      	cbz	r0, 800757c <_printf_float+0xe0>
 800756a:	464b      	mov	r3, r9
 800756c:	2b00      	cmp	r3, #0
 800756e:	bfbc      	itt	lt
 8007570:	232d      	movlt	r3, #45	@ 0x2d
 8007572:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007576:	4a7e      	ldr	r2, [pc, #504]	@ (8007770 <_printf_float+0x2d4>)
 8007578:	4b7e      	ldr	r3, [pc, #504]	@ (8007774 <_printf_float+0x2d8>)
 800757a:	e7d4      	b.n	8007526 <_printf_float+0x8a>
 800757c:	6863      	ldr	r3, [r4, #4]
 800757e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007582:	9206      	str	r2, [sp, #24]
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	d13b      	bne.n	8007600 <_printf_float+0x164>
 8007588:	2306      	movs	r3, #6
 800758a:	6063      	str	r3, [r4, #4]
 800758c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007590:	2300      	movs	r3, #0
 8007592:	6022      	str	r2, [r4, #0]
 8007594:	9303      	str	r3, [sp, #12]
 8007596:	ab0a      	add	r3, sp, #40	@ 0x28
 8007598:	e9cd a301 	strd	sl, r3, [sp, #4]
 800759c:	ab09      	add	r3, sp, #36	@ 0x24
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	6861      	ldr	r1, [r4, #4]
 80075a2:	ec49 8b10 	vmov	d0, r8, r9
 80075a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80075aa:	4628      	mov	r0, r5
 80075ac:	f7ff fed6 	bl	800735c <__cvt>
 80075b0:	9b06      	ldr	r3, [sp, #24]
 80075b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075b4:	2b47      	cmp	r3, #71	@ 0x47
 80075b6:	4680      	mov	r8, r0
 80075b8:	d129      	bne.n	800760e <_printf_float+0x172>
 80075ba:	1cc8      	adds	r0, r1, #3
 80075bc:	db02      	blt.n	80075c4 <_printf_float+0x128>
 80075be:	6863      	ldr	r3, [r4, #4]
 80075c0:	4299      	cmp	r1, r3
 80075c2:	dd41      	ble.n	8007648 <_printf_float+0x1ac>
 80075c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80075c8:	fa5f fa8a 	uxtb.w	sl, sl
 80075cc:	3901      	subs	r1, #1
 80075ce:	4652      	mov	r2, sl
 80075d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80075d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80075d6:	f7ff ff26 	bl	8007426 <__exponent>
 80075da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075dc:	1813      	adds	r3, r2, r0
 80075de:	2a01      	cmp	r2, #1
 80075e0:	4681      	mov	r9, r0
 80075e2:	6123      	str	r3, [r4, #16]
 80075e4:	dc02      	bgt.n	80075ec <_printf_float+0x150>
 80075e6:	6822      	ldr	r2, [r4, #0]
 80075e8:	07d2      	lsls	r2, r2, #31
 80075ea:	d501      	bpl.n	80075f0 <_printf_float+0x154>
 80075ec:	3301      	adds	r3, #1
 80075ee:	6123      	str	r3, [r4, #16]
 80075f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0a2      	beq.n	800753e <_printf_float+0xa2>
 80075f8:	232d      	movs	r3, #45	@ 0x2d
 80075fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075fe:	e79e      	b.n	800753e <_printf_float+0xa2>
 8007600:	9a06      	ldr	r2, [sp, #24]
 8007602:	2a47      	cmp	r2, #71	@ 0x47
 8007604:	d1c2      	bne.n	800758c <_printf_float+0xf0>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1c0      	bne.n	800758c <_printf_float+0xf0>
 800760a:	2301      	movs	r3, #1
 800760c:	e7bd      	b.n	800758a <_printf_float+0xee>
 800760e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007612:	d9db      	bls.n	80075cc <_printf_float+0x130>
 8007614:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007618:	d118      	bne.n	800764c <_printf_float+0x1b0>
 800761a:	2900      	cmp	r1, #0
 800761c:	6863      	ldr	r3, [r4, #4]
 800761e:	dd0b      	ble.n	8007638 <_printf_float+0x19c>
 8007620:	6121      	str	r1, [r4, #16]
 8007622:	b913      	cbnz	r3, 800762a <_printf_float+0x18e>
 8007624:	6822      	ldr	r2, [r4, #0]
 8007626:	07d0      	lsls	r0, r2, #31
 8007628:	d502      	bpl.n	8007630 <_printf_float+0x194>
 800762a:	3301      	adds	r3, #1
 800762c:	440b      	add	r3, r1
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007632:	f04f 0900 	mov.w	r9, #0
 8007636:	e7db      	b.n	80075f0 <_printf_float+0x154>
 8007638:	b913      	cbnz	r3, 8007640 <_printf_float+0x1a4>
 800763a:	6822      	ldr	r2, [r4, #0]
 800763c:	07d2      	lsls	r2, r2, #31
 800763e:	d501      	bpl.n	8007644 <_printf_float+0x1a8>
 8007640:	3302      	adds	r3, #2
 8007642:	e7f4      	b.n	800762e <_printf_float+0x192>
 8007644:	2301      	movs	r3, #1
 8007646:	e7f2      	b.n	800762e <_printf_float+0x192>
 8007648:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800764c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800764e:	4299      	cmp	r1, r3
 8007650:	db05      	blt.n	800765e <_printf_float+0x1c2>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	6121      	str	r1, [r4, #16]
 8007656:	07d8      	lsls	r0, r3, #31
 8007658:	d5ea      	bpl.n	8007630 <_printf_float+0x194>
 800765a:	1c4b      	adds	r3, r1, #1
 800765c:	e7e7      	b.n	800762e <_printf_float+0x192>
 800765e:	2900      	cmp	r1, #0
 8007660:	bfd4      	ite	le
 8007662:	f1c1 0202 	rsble	r2, r1, #2
 8007666:	2201      	movgt	r2, #1
 8007668:	4413      	add	r3, r2
 800766a:	e7e0      	b.n	800762e <_printf_float+0x192>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	055a      	lsls	r2, r3, #21
 8007670:	d407      	bmi.n	8007682 <_printf_float+0x1e6>
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	4642      	mov	r2, r8
 8007676:	4631      	mov	r1, r6
 8007678:	4628      	mov	r0, r5
 800767a:	47b8      	blx	r7
 800767c:	3001      	adds	r0, #1
 800767e:	d12b      	bne.n	80076d8 <_printf_float+0x23c>
 8007680:	e767      	b.n	8007552 <_printf_float+0xb6>
 8007682:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007686:	f240 80dd 	bls.w	8007844 <_printf_float+0x3a8>
 800768a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800768e:	2200      	movs	r2, #0
 8007690:	2300      	movs	r3, #0
 8007692:	f7f9 fa19 	bl	8000ac8 <__aeabi_dcmpeq>
 8007696:	2800      	cmp	r0, #0
 8007698:	d033      	beq.n	8007702 <_printf_float+0x266>
 800769a:	4a37      	ldr	r2, [pc, #220]	@ (8007778 <_printf_float+0x2dc>)
 800769c:	2301      	movs	r3, #1
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	f43f af54 	beq.w	8007552 <_printf_float+0xb6>
 80076aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80076ae:	4543      	cmp	r3, r8
 80076b0:	db02      	blt.n	80076b8 <_printf_float+0x21c>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	07d8      	lsls	r0, r3, #31
 80076b6:	d50f      	bpl.n	80076d8 <_printf_float+0x23c>
 80076b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f af45 	beq.w	8007552 <_printf_float+0xb6>
 80076c8:	f04f 0900 	mov.w	r9, #0
 80076cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80076d0:	f104 0a1a 	add.w	sl, r4, #26
 80076d4:	45c8      	cmp	r8, r9
 80076d6:	dc09      	bgt.n	80076ec <_printf_float+0x250>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	079b      	lsls	r3, r3, #30
 80076dc:	f100 8103 	bmi.w	80078e6 <_printf_float+0x44a>
 80076e0:	68e0      	ldr	r0, [r4, #12]
 80076e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076e4:	4298      	cmp	r0, r3
 80076e6:	bfb8      	it	lt
 80076e8:	4618      	movlt	r0, r3
 80076ea:	e734      	b.n	8007556 <_printf_float+0xba>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4652      	mov	r2, sl
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	f43f af2b 	beq.w	8007552 <_printf_float+0xb6>
 80076fc:	f109 0901 	add.w	r9, r9, #1
 8007700:	e7e8      	b.n	80076d4 <_printf_float+0x238>
 8007702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	dc39      	bgt.n	800777c <_printf_float+0x2e0>
 8007708:	4a1b      	ldr	r2, [pc, #108]	@ (8007778 <_printf_float+0x2dc>)
 800770a:	2301      	movs	r3, #1
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	f43f af1d 	beq.w	8007552 <_printf_float+0xb6>
 8007718:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800771c:	ea59 0303 	orrs.w	r3, r9, r3
 8007720:	d102      	bne.n	8007728 <_printf_float+0x28c>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	07d9      	lsls	r1, r3, #31
 8007726:	d5d7      	bpl.n	80076d8 <_printf_float+0x23c>
 8007728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	47b8      	blx	r7
 8007732:	3001      	adds	r0, #1
 8007734:	f43f af0d 	beq.w	8007552 <_printf_float+0xb6>
 8007738:	f04f 0a00 	mov.w	sl, #0
 800773c:	f104 0b1a 	add.w	fp, r4, #26
 8007740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007742:	425b      	negs	r3, r3
 8007744:	4553      	cmp	r3, sl
 8007746:	dc01      	bgt.n	800774c <_printf_float+0x2b0>
 8007748:	464b      	mov	r3, r9
 800774a:	e793      	b.n	8007674 <_printf_float+0x1d8>
 800774c:	2301      	movs	r3, #1
 800774e:	465a      	mov	r2, fp
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	f43f aefb 	beq.w	8007552 <_printf_float+0xb6>
 800775c:	f10a 0a01 	add.w	sl, sl, #1
 8007760:	e7ee      	b.n	8007740 <_printf_float+0x2a4>
 8007762:	bf00      	nop
 8007764:	7fefffff 	.word	0x7fefffff
 8007768:	0800a0b0 	.word	0x0800a0b0
 800776c:	0800a0b4 	.word	0x0800a0b4
 8007770:	0800a0b8 	.word	0x0800a0b8
 8007774:	0800a0bc 	.word	0x0800a0bc
 8007778:	0800a0c0 	.word	0x0800a0c0
 800777c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800777e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007782:	4553      	cmp	r3, sl
 8007784:	bfa8      	it	ge
 8007786:	4653      	movge	r3, sl
 8007788:	2b00      	cmp	r3, #0
 800778a:	4699      	mov	r9, r3
 800778c:	dc36      	bgt.n	80077fc <_printf_float+0x360>
 800778e:	f04f 0b00 	mov.w	fp, #0
 8007792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007796:	f104 021a 	add.w	r2, r4, #26
 800779a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800779c:	9306      	str	r3, [sp, #24]
 800779e:	eba3 0309 	sub.w	r3, r3, r9
 80077a2:	455b      	cmp	r3, fp
 80077a4:	dc31      	bgt.n	800780a <_printf_float+0x36e>
 80077a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a8:	459a      	cmp	sl, r3
 80077aa:	dc3a      	bgt.n	8007822 <_printf_float+0x386>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	07da      	lsls	r2, r3, #31
 80077b0:	d437      	bmi.n	8007822 <_printf_float+0x386>
 80077b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b4:	ebaa 0903 	sub.w	r9, sl, r3
 80077b8:	9b06      	ldr	r3, [sp, #24]
 80077ba:	ebaa 0303 	sub.w	r3, sl, r3
 80077be:	4599      	cmp	r9, r3
 80077c0:	bfa8      	it	ge
 80077c2:	4699      	movge	r9, r3
 80077c4:	f1b9 0f00 	cmp.w	r9, #0
 80077c8:	dc33      	bgt.n	8007832 <_printf_float+0x396>
 80077ca:	f04f 0800 	mov.w	r8, #0
 80077ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077d2:	f104 0b1a 	add.w	fp, r4, #26
 80077d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d8:	ebaa 0303 	sub.w	r3, sl, r3
 80077dc:	eba3 0309 	sub.w	r3, r3, r9
 80077e0:	4543      	cmp	r3, r8
 80077e2:	f77f af79 	ble.w	80076d8 <_printf_float+0x23c>
 80077e6:	2301      	movs	r3, #1
 80077e8:	465a      	mov	r2, fp
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	f43f aeae 	beq.w	8007552 <_printf_float+0xb6>
 80077f6:	f108 0801 	add.w	r8, r8, #1
 80077fa:	e7ec      	b.n	80077d6 <_printf_float+0x33a>
 80077fc:	4642      	mov	r2, r8
 80077fe:	4631      	mov	r1, r6
 8007800:	4628      	mov	r0, r5
 8007802:	47b8      	blx	r7
 8007804:	3001      	adds	r0, #1
 8007806:	d1c2      	bne.n	800778e <_printf_float+0x2f2>
 8007808:	e6a3      	b.n	8007552 <_printf_float+0xb6>
 800780a:	2301      	movs	r3, #1
 800780c:	4631      	mov	r1, r6
 800780e:	4628      	mov	r0, r5
 8007810:	9206      	str	r2, [sp, #24]
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	f43f ae9c 	beq.w	8007552 <_printf_float+0xb6>
 800781a:	9a06      	ldr	r2, [sp, #24]
 800781c:	f10b 0b01 	add.w	fp, fp, #1
 8007820:	e7bb      	b.n	800779a <_printf_float+0x2fe>
 8007822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	d1c0      	bne.n	80077b2 <_printf_float+0x316>
 8007830:	e68f      	b.n	8007552 <_printf_float+0xb6>
 8007832:	9a06      	ldr	r2, [sp, #24]
 8007834:	464b      	mov	r3, r9
 8007836:	4442      	add	r2, r8
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	d1c3      	bne.n	80077ca <_printf_float+0x32e>
 8007842:	e686      	b.n	8007552 <_printf_float+0xb6>
 8007844:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007848:	f1ba 0f01 	cmp.w	sl, #1
 800784c:	dc01      	bgt.n	8007852 <_printf_float+0x3b6>
 800784e:	07db      	lsls	r3, r3, #31
 8007850:	d536      	bpl.n	80078c0 <_printf_float+0x424>
 8007852:	2301      	movs	r3, #1
 8007854:	4642      	mov	r2, r8
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	f43f ae78 	beq.w	8007552 <_printf_float+0xb6>
 8007862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	f43f ae70 	beq.w	8007552 <_printf_float+0xb6>
 8007872:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007876:	2200      	movs	r2, #0
 8007878:	2300      	movs	r3, #0
 800787a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800787e:	f7f9 f923 	bl	8000ac8 <__aeabi_dcmpeq>
 8007882:	b9c0      	cbnz	r0, 80078b6 <_printf_float+0x41a>
 8007884:	4653      	mov	r3, sl
 8007886:	f108 0201 	add.w	r2, r8, #1
 800788a:	4631      	mov	r1, r6
 800788c:	4628      	mov	r0, r5
 800788e:	47b8      	blx	r7
 8007890:	3001      	adds	r0, #1
 8007892:	d10c      	bne.n	80078ae <_printf_float+0x412>
 8007894:	e65d      	b.n	8007552 <_printf_float+0xb6>
 8007896:	2301      	movs	r3, #1
 8007898:	465a      	mov	r2, fp
 800789a:	4631      	mov	r1, r6
 800789c:	4628      	mov	r0, r5
 800789e:	47b8      	blx	r7
 80078a0:	3001      	adds	r0, #1
 80078a2:	f43f ae56 	beq.w	8007552 <_printf_float+0xb6>
 80078a6:	f108 0801 	add.w	r8, r8, #1
 80078aa:	45d0      	cmp	r8, sl
 80078ac:	dbf3      	blt.n	8007896 <_printf_float+0x3fa>
 80078ae:	464b      	mov	r3, r9
 80078b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80078b4:	e6df      	b.n	8007676 <_printf_float+0x1da>
 80078b6:	f04f 0800 	mov.w	r8, #0
 80078ba:	f104 0b1a 	add.w	fp, r4, #26
 80078be:	e7f4      	b.n	80078aa <_printf_float+0x40e>
 80078c0:	2301      	movs	r3, #1
 80078c2:	4642      	mov	r2, r8
 80078c4:	e7e1      	b.n	800788a <_printf_float+0x3ee>
 80078c6:	2301      	movs	r3, #1
 80078c8:	464a      	mov	r2, r9
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b8      	blx	r7
 80078d0:	3001      	adds	r0, #1
 80078d2:	f43f ae3e 	beq.w	8007552 <_printf_float+0xb6>
 80078d6:	f108 0801 	add.w	r8, r8, #1
 80078da:	68e3      	ldr	r3, [r4, #12]
 80078dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078de:	1a5b      	subs	r3, r3, r1
 80078e0:	4543      	cmp	r3, r8
 80078e2:	dcf0      	bgt.n	80078c6 <_printf_float+0x42a>
 80078e4:	e6fc      	b.n	80076e0 <_printf_float+0x244>
 80078e6:	f04f 0800 	mov.w	r8, #0
 80078ea:	f104 0919 	add.w	r9, r4, #25
 80078ee:	e7f4      	b.n	80078da <_printf_float+0x43e>

080078f0 <_printf_common>:
 80078f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f4:	4616      	mov	r6, r2
 80078f6:	4698      	mov	r8, r3
 80078f8:	688a      	ldr	r2, [r1, #8]
 80078fa:	690b      	ldr	r3, [r1, #16]
 80078fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007900:	4293      	cmp	r3, r2
 8007902:	bfb8      	it	lt
 8007904:	4613      	movlt	r3, r2
 8007906:	6033      	str	r3, [r6, #0]
 8007908:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800790c:	4607      	mov	r7, r0
 800790e:	460c      	mov	r4, r1
 8007910:	b10a      	cbz	r2, 8007916 <_printf_common+0x26>
 8007912:	3301      	adds	r3, #1
 8007914:	6033      	str	r3, [r6, #0]
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	0699      	lsls	r1, r3, #26
 800791a:	bf42      	ittt	mi
 800791c:	6833      	ldrmi	r3, [r6, #0]
 800791e:	3302      	addmi	r3, #2
 8007920:	6033      	strmi	r3, [r6, #0]
 8007922:	6825      	ldr	r5, [r4, #0]
 8007924:	f015 0506 	ands.w	r5, r5, #6
 8007928:	d106      	bne.n	8007938 <_printf_common+0x48>
 800792a:	f104 0a19 	add.w	sl, r4, #25
 800792e:	68e3      	ldr	r3, [r4, #12]
 8007930:	6832      	ldr	r2, [r6, #0]
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	42ab      	cmp	r3, r5
 8007936:	dc26      	bgt.n	8007986 <_printf_common+0x96>
 8007938:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800793c:	6822      	ldr	r2, [r4, #0]
 800793e:	3b00      	subs	r3, #0
 8007940:	bf18      	it	ne
 8007942:	2301      	movne	r3, #1
 8007944:	0692      	lsls	r2, r2, #26
 8007946:	d42b      	bmi.n	80079a0 <_printf_common+0xb0>
 8007948:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800794c:	4641      	mov	r1, r8
 800794e:	4638      	mov	r0, r7
 8007950:	47c8      	blx	r9
 8007952:	3001      	adds	r0, #1
 8007954:	d01e      	beq.n	8007994 <_printf_common+0xa4>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	6922      	ldr	r2, [r4, #16]
 800795a:	f003 0306 	and.w	r3, r3, #6
 800795e:	2b04      	cmp	r3, #4
 8007960:	bf02      	ittt	eq
 8007962:	68e5      	ldreq	r5, [r4, #12]
 8007964:	6833      	ldreq	r3, [r6, #0]
 8007966:	1aed      	subeq	r5, r5, r3
 8007968:	68a3      	ldr	r3, [r4, #8]
 800796a:	bf0c      	ite	eq
 800796c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007970:	2500      	movne	r5, #0
 8007972:	4293      	cmp	r3, r2
 8007974:	bfc4      	itt	gt
 8007976:	1a9b      	subgt	r3, r3, r2
 8007978:	18ed      	addgt	r5, r5, r3
 800797a:	2600      	movs	r6, #0
 800797c:	341a      	adds	r4, #26
 800797e:	42b5      	cmp	r5, r6
 8007980:	d11a      	bne.n	80079b8 <_printf_common+0xc8>
 8007982:	2000      	movs	r0, #0
 8007984:	e008      	b.n	8007998 <_printf_common+0xa8>
 8007986:	2301      	movs	r3, #1
 8007988:	4652      	mov	r2, sl
 800798a:	4641      	mov	r1, r8
 800798c:	4638      	mov	r0, r7
 800798e:	47c8      	blx	r9
 8007990:	3001      	adds	r0, #1
 8007992:	d103      	bne.n	800799c <_printf_common+0xac>
 8007994:	f04f 30ff 	mov.w	r0, #4294967295
 8007998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799c:	3501      	adds	r5, #1
 800799e:	e7c6      	b.n	800792e <_printf_common+0x3e>
 80079a0:	18e1      	adds	r1, r4, r3
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	2030      	movs	r0, #48	@ 0x30
 80079a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079aa:	4422      	add	r2, r4
 80079ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079b4:	3302      	adds	r3, #2
 80079b6:	e7c7      	b.n	8007948 <_printf_common+0x58>
 80079b8:	2301      	movs	r3, #1
 80079ba:	4622      	mov	r2, r4
 80079bc:	4641      	mov	r1, r8
 80079be:	4638      	mov	r0, r7
 80079c0:	47c8      	blx	r9
 80079c2:	3001      	adds	r0, #1
 80079c4:	d0e6      	beq.n	8007994 <_printf_common+0xa4>
 80079c6:	3601      	adds	r6, #1
 80079c8:	e7d9      	b.n	800797e <_printf_common+0x8e>
	...

080079cc <_printf_i>:
 80079cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	7e0f      	ldrb	r7, [r1, #24]
 80079d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079d4:	2f78      	cmp	r7, #120	@ 0x78
 80079d6:	4691      	mov	r9, r2
 80079d8:	4680      	mov	r8, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	469a      	mov	sl, r3
 80079de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079e2:	d807      	bhi.n	80079f4 <_printf_i+0x28>
 80079e4:	2f62      	cmp	r7, #98	@ 0x62
 80079e6:	d80a      	bhi.n	80079fe <_printf_i+0x32>
 80079e8:	2f00      	cmp	r7, #0
 80079ea:	f000 80d2 	beq.w	8007b92 <_printf_i+0x1c6>
 80079ee:	2f58      	cmp	r7, #88	@ 0x58
 80079f0:	f000 80b9 	beq.w	8007b66 <_printf_i+0x19a>
 80079f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079fc:	e03a      	b.n	8007a74 <_printf_i+0xa8>
 80079fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a02:	2b15      	cmp	r3, #21
 8007a04:	d8f6      	bhi.n	80079f4 <_printf_i+0x28>
 8007a06:	a101      	add	r1, pc, #4	@ (adr r1, 8007a0c <_printf_i+0x40>)
 8007a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a0c:	08007a65 	.word	0x08007a65
 8007a10:	08007a79 	.word	0x08007a79
 8007a14:	080079f5 	.word	0x080079f5
 8007a18:	080079f5 	.word	0x080079f5
 8007a1c:	080079f5 	.word	0x080079f5
 8007a20:	080079f5 	.word	0x080079f5
 8007a24:	08007a79 	.word	0x08007a79
 8007a28:	080079f5 	.word	0x080079f5
 8007a2c:	080079f5 	.word	0x080079f5
 8007a30:	080079f5 	.word	0x080079f5
 8007a34:	080079f5 	.word	0x080079f5
 8007a38:	08007b79 	.word	0x08007b79
 8007a3c:	08007aa3 	.word	0x08007aa3
 8007a40:	08007b33 	.word	0x08007b33
 8007a44:	080079f5 	.word	0x080079f5
 8007a48:	080079f5 	.word	0x080079f5
 8007a4c:	08007b9b 	.word	0x08007b9b
 8007a50:	080079f5 	.word	0x080079f5
 8007a54:	08007aa3 	.word	0x08007aa3
 8007a58:	080079f5 	.word	0x080079f5
 8007a5c:	080079f5 	.word	0x080079f5
 8007a60:	08007b3b 	.word	0x08007b3b
 8007a64:	6833      	ldr	r3, [r6, #0]
 8007a66:	1d1a      	adds	r2, r3, #4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6032      	str	r2, [r6, #0]
 8007a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a74:	2301      	movs	r3, #1
 8007a76:	e09d      	b.n	8007bb4 <_printf_i+0x1e8>
 8007a78:	6833      	ldr	r3, [r6, #0]
 8007a7a:	6820      	ldr	r0, [r4, #0]
 8007a7c:	1d19      	adds	r1, r3, #4
 8007a7e:	6031      	str	r1, [r6, #0]
 8007a80:	0606      	lsls	r6, r0, #24
 8007a82:	d501      	bpl.n	8007a88 <_printf_i+0xbc>
 8007a84:	681d      	ldr	r5, [r3, #0]
 8007a86:	e003      	b.n	8007a90 <_printf_i+0xc4>
 8007a88:	0645      	lsls	r5, r0, #25
 8007a8a:	d5fb      	bpl.n	8007a84 <_printf_i+0xb8>
 8007a8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a90:	2d00      	cmp	r5, #0
 8007a92:	da03      	bge.n	8007a9c <_printf_i+0xd0>
 8007a94:	232d      	movs	r3, #45	@ 0x2d
 8007a96:	426d      	negs	r5, r5
 8007a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a9c:	4859      	ldr	r0, [pc, #356]	@ (8007c04 <_printf_i+0x238>)
 8007a9e:	230a      	movs	r3, #10
 8007aa0:	e011      	b.n	8007ac6 <_printf_i+0xfa>
 8007aa2:	6821      	ldr	r1, [r4, #0]
 8007aa4:	6833      	ldr	r3, [r6, #0]
 8007aa6:	0608      	lsls	r0, r1, #24
 8007aa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007aac:	d402      	bmi.n	8007ab4 <_printf_i+0xe8>
 8007aae:	0649      	lsls	r1, r1, #25
 8007ab0:	bf48      	it	mi
 8007ab2:	b2ad      	uxthmi	r5, r5
 8007ab4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ab6:	4853      	ldr	r0, [pc, #332]	@ (8007c04 <_printf_i+0x238>)
 8007ab8:	6033      	str	r3, [r6, #0]
 8007aba:	bf14      	ite	ne
 8007abc:	230a      	movne	r3, #10
 8007abe:	2308      	moveq	r3, #8
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ac6:	6866      	ldr	r6, [r4, #4]
 8007ac8:	60a6      	str	r6, [r4, #8]
 8007aca:	2e00      	cmp	r6, #0
 8007acc:	bfa2      	ittt	ge
 8007ace:	6821      	ldrge	r1, [r4, #0]
 8007ad0:	f021 0104 	bicge.w	r1, r1, #4
 8007ad4:	6021      	strge	r1, [r4, #0]
 8007ad6:	b90d      	cbnz	r5, 8007adc <_printf_i+0x110>
 8007ad8:	2e00      	cmp	r6, #0
 8007ada:	d04b      	beq.n	8007b74 <_printf_i+0x1a8>
 8007adc:	4616      	mov	r6, r2
 8007ade:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ae2:	fb03 5711 	mls	r7, r3, r1, r5
 8007ae6:	5dc7      	ldrb	r7, [r0, r7]
 8007ae8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007aec:	462f      	mov	r7, r5
 8007aee:	42bb      	cmp	r3, r7
 8007af0:	460d      	mov	r5, r1
 8007af2:	d9f4      	bls.n	8007ade <_printf_i+0x112>
 8007af4:	2b08      	cmp	r3, #8
 8007af6:	d10b      	bne.n	8007b10 <_printf_i+0x144>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	07df      	lsls	r7, r3, #31
 8007afc:	d508      	bpl.n	8007b10 <_printf_i+0x144>
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	6861      	ldr	r1, [r4, #4]
 8007b02:	4299      	cmp	r1, r3
 8007b04:	bfde      	ittt	le
 8007b06:	2330      	movle	r3, #48	@ 0x30
 8007b08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b10:	1b92      	subs	r2, r2, r6
 8007b12:	6122      	str	r2, [r4, #16]
 8007b14:	f8cd a000 	str.w	sl, [sp]
 8007b18:	464b      	mov	r3, r9
 8007b1a:	aa03      	add	r2, sp, #12
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	4640      	mov	r0, r8
 8007b20:	f7ff fee6 	bl	80078f0 <_printf_common>
 8007b24:	3001      	adds	r0, #1
 8007b26:	d14a      	bne.n	8007bbe <_printf_i+0x1f2>
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	b004      	add	sp, #16
 8007b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	f043 0320 	orr.w	r3, r3, #32
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	4833      	ldr	r0, [pc, #204]	@ (8007c08 <_printf_i+0x23c>)
 8007b3c:	2778      	movs	r7, #120	@ 0x78
 8007b3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	6831      	ldr	r1, [r6, #0]
 8007b46:	061f      	lsls	r7, r3, #24
 8007b48:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b4c:	d402      	bmi.n	8007b54 <_printf_i+0x188>
 8007b4e:	065f      	lsls	r7, r3, #25
 8007b50:	bf48      	it	mi
 8007b52:	b2ad      	uxthmi	r5, r5
 8007b54:	6031      	str	r1, [r6, #0]
 8007b56:	07d9      	lsls	r1, r3, #31
 8007b58:	bf44      	itt	mi
 8007b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b5e:	6023      	strmi	r3, [r4, #0]
 8007b60:	b11d      	cbz	r5, 8007b6a <_printf_i+0x19e>
 8007b62:	2310      	movs	r3, #16
 8007b64:	e7ac      	b.n	8007ac0 <_printf_i+0xf4>
 8007b66:	4827      	ldr	r0, [pc, #156]	@ (8007c04 <_printf_i+0x238>)
 8007b68:	e7e9      	b.n	8007b3e <_printf_i+0x172>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	f023 0320 	bic.w	r3, r3, #32
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	e7f6      	b.n	8007b62 <_printf_i+0x196>
 8007b74:	4616      	mov	r6, r2
 8007b76:	e7bd      	b.n	8007af4 <_printf_i+0x128>
 8007b78:	6833      	ldr	r3, [r6, #0]
 8007b7a:	6825      	ldr	r5, [r4, #0]
 8007b7c:	6961      	ldr	r1, [r4, #20]
 8007b7e:	1d18      	adds	r0, r3, #4
 8007b80:	6030      	str	r0, [r6, #0]
 8007b82:	062e      	lsls	r6, r5, #24
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	d501      	bpl.n	8007b8c <_printf_i+0x1c0>
 8007b88:	6019      	str	r1, [r3, #0]
 8007b8a:	e002      	b.n	8007b92 <_printf_i+0x1c6>
 8007b8c:	0668      	lsls	r0, r5, #25
 8007b8e:	d5fb      	bpl.n	8007b88 <_printf_i+0x1bc>
 8007b90:	8019      	strh	r1, [r3, #0]
 8007b92:	2300      	movs	r3, #0
 8007b94:	6123      	str	r3, [r4, #16]
 8007b96:	4616      	mov	r6, r2
 8007b98:	e7bc      	b.n	8007b14 <_printf_i+0x148>
 8007b9a:	6833      	ldr	r3, [r6, #0]
 8007b9c:	1d1a      	adds	r2, r3, #4
 8007b9e:	6032      	str	r2, [r6, #0]
 8007ba0:	681e      	ldr	r6, [r3, #0]
 8007ba2:	6862      	ldr	r2, [r4, #4]
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f7f8 fb12 	bl	80001d0 <memchr>
 8007bac:	b108      	cbz	r0, 8007bb2 <_printf_i+0x1e6>
 8007bae:	1b80      	subs	r0, r0, r6
 8007bb0:	6060      	str	r0, [r4, #4]
 8007bb2:	6863      	ldr	r3, [r4, #4]
 8007bb4:	6123      	str	r3, [r4, #16]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bbc:	e7aa      	b.n	8007b14 <_printf_i+0x148>
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	4632      	mov	r2, r6
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	47d0      	blx	sl
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d0ad      	beq.n	8007b28 <_printf_i+0x15c>
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	079b      	lsls	r3, r3, #30
 8007bd0:	d413      	bmi.n	8007bfa <_printf_i+0x22e>
 8007bd2:	68e0      	ldr	r0, [r4, #12]
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	4298      	cmp	r0, r3
 8007bd8:	bfb8      	it	lt
 8007bda:	4618      	movlt	r0, r3
 8007bdc:	e7a6      	b.n	8007b2c <_printf_i+0x160>
 8007bde:	2301      	movs	r3, #1
 8007be0:	4632      	mov	r2, r6
 8007be2:	4649      	mov	r1, r9
 8007be4:	4640      	mov	r0, r8
 8007be6:	47d0      	blx	sl
 8007be8:	3001      	adds	r0, #1
 8007bea:	d09d      	beq.n	8007b28 <_printf_i+0x15c>
 8007bec:	3501      	adds	r5, #1
 8007bee:	68e3      	ldr	r3, [r4, #12]
 8007bf0:	9903      	ldr	r1, [sp, #12]
 8007bf2:	1a5b      	subs	r3, r3, r1
 8007bf4:	42ab      	cmp	r3, r5
 8007bf6:	dcf2      	bgt.n	8007bde <_printf_i+0x212>
 8007bf8:	e7eb      	b.n	8007bd2 <_printf_i+0x206>
 8007bfa:	2500      	movs	r5, #0
 8007bfc:	f104 0619 	add.w	r6, r4, #25
 8007c00:	e7f5      	b.n	8007bee <_printf_i+0x222>
 8007c02:	bf00      	nop
 8007c04:	0800a0c2 	.word	0x0800a0c2
 8007c08:	0800a0d3 	.word	0x0800a0d3

08007c0c <std>:
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	b510      	push	{r4, lr}
 8007c10:	4604      	mov	r4, r0
 8007c12:	e9c0 3300 	strd	r3, r3, [r0]
 8007c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c1a:	6083      	str	r3, [r0, #8]
 8007c1c:	8181      	strh	r1, [r0, #12]
 8007c1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c20:	81c2      	strh	r2, [r0, #14]
 8007c22:	6183      	str	r3, [r0, #24]
 8007c24:	4619      	mov	r1, r3
 8007c26:	2208      	movs	r2, #8
 8007c28:	305c      	adds	r0, #92	@ 0x5c
 8007c2a:	f000 f928 	bl	8007e7e <memset>
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c64 <std+0x58>)
 8007c30:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c32:	4b0d      	ldr	r3, [pc, #52]	@ (8007c68 <std+0x5c>)
 8007c34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c36:	4b0d      	ldr	r3, [pc, #52]	@ (8007c6c <std+0x60>)
 8007c38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c70 <std+0x64>)
 8007c3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <std+0x68>)
 8007c40:	6224      	str	r4, [r4, #32]
 8007c42:	429c      	cmp	r4, r3
 8007c44:	d006      	beq.n	8007c54 <std+0x48>
 8007c46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c4a:	4294      	cmp	r4, r2
 8007c4c:	d002      	beq.n	8007c54 <std+0x48>
 8007c4e:	33d0      	adds	r3, #208	@ 0xd0
 8007c50:	429c      	cmp	r4, r3
 8007c52:	d105      	bne.n	8007c60 <std+0x54>
 8007c54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c5c:	f000 b98c 	b.w	8007f78 <__retarget_lock_init_recursive>
 8007c60:	bd10      	pop	{r4, pc}
 8007c62:	bf00      	nop
 8007c64:	08007df9 	.word	0x08007df9
 8007c68:	08007e1b 	.word	0x08007e1b
 8007c6c:	08007e53 	.word	0x08007e53
 8007c70:	08007e77 	.word	0x08007e77
 8007c74:	2000059c 	.word	0x2000059c

08007c78 <stdio_exit_handler>:
 8007c78:	4a02      	ldr	r2, [pc, #8]	@ (8007c84 <stdio_exit_handler+0xc>)
 8007c7a:	4903      	ldr	r1, [pc, #12]	@ (8007c88 <stdio_exit_handler+0x10>)
 8007c7c:	4803      	ldr	r0, [pc, #12]	@ (8007c8c <stdio_exit_handler+0x14>)
 8007c7e:	f000 b869 	b.w	8007d54 <_fwalk_sglue>
 8007c82:	bf00      	nop
 8007c84:	20000020 	.word	0x20000020
 8007c88:	080098f5 	.word	0x080098f5
 8007c8c:	20000030 	.word	0x20000030

08007c90 <cleanup_stdio>:
 8007c90:	6841      	ldr	r1, [r0, #4]
 8007c92:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc4 <cleanup_stdio+0x34>)
 8007c94:	4299      	cmp	r1, r3
 8007c96:	b510      	push	{r4, lr}
 8007c98:	4604      	mov	r4, r0
 8007c9a:	d001      	beq.n	8007ca0 <cleanup_stdio+0x10>
 8007c9c:	f001 fe2a 	bl	80098f4 <_fflush_r>
 8007ca0:	68a1      	ldr	r1, [r4, #8]
 8007ca2:	4b09      	ldr	r3, [pc, #36]	@ (8007cc8 <cleanup_stdio+0x38>)
 8007ca4:	4299      	cmp	r1, r3
 8007ca6:	d002      	beq.n	8007cae <cleanup_stdio+0x1e>
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f001 fe23 	bl	80098f4 <_fflush_r>
 8007cae:	68e1      	ldr	r1, [r4, #12]
 8007cb0:	4b06      	ldr	r3, [pc, #24]	@ (8007ccc <cleanup_stdio+0x3c>)
 8007cb2:	4299      	cmp	r1, r3
 8007cb4:	d004      	beq.n	8007cc0 <cleanup_stdio+0x30>
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cbc:	f001 be1a 	b.w	80098f4 <_fflush_r>
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	bf00      	nop
 8007cc4:	2000059c 	.word	0x2000059c
 8007cc8:	20000604 	.word	0x20000604
 8007ccc:	2000066c 	.word	0x2000066c

08007cd0 <global_stdio_init.part.0>:
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007d00 <global_stdio_init.part.0+0x30>)
 8007cd4:	4c0b      	ldr	r4, [pc, #44]	@ (8007d04 <global_stdio_init.part.0+0x34>)
 8007cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8007d08 <global_stdio_init.part.0+0x38>)
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2104      	movs	r1, #4
 8007ce0:	f7ff ff94 	bl	8007c0c <std>
 8007ce4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ce8:	2201      	movs	r2, #1
 8007cea:	2109      	movs	r1, #9
 8007cec:	f7ff ff8e 	bl	8007c0c <std>
 8007cf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cfa:	2112      	movs	r1, #18
 8007cfc:	f7ff bf86 	b.w	8007c0c <std>
 8007d00:	200006d4 	.word	0x200006d4
 8007d04:	2000059c 	.word	0x2000059c
 8007d08:	08007c79 	.word	0x08007c79

08007d0c <__sfp_lock_acquire>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	@ (8007d14 <__sfp_lock_acquire+0x8>)
 8007d0e:	f000 b934 	b.w	8007f7a <__retarget_lock_acquire_recursive>
 8007d12:	bf00      	nop
 8007d14:	200006dd 	.word	0x200006dd

08007d18 <__sfp_lock_release>:
 8007d18:	4801      	ldr	r0, [pc, #4]	@ (8007d20 <__sfp_lock_release+0x8>)
 8007d1a:	f000 b92f 	b.w	8007f7c <__retarget_lock_release_recursive>
 8007d1e:	bf00      	nop
 8007d20:	200006dd 	.word	0x200006dd

08007d24 <__sinit>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	4604      	mov	r4, r0
 8007d28:	f7ff fff0 	bl	8007d0c <__sfp_lock_acquire>
 8007d2c:	6a23      	ldr	r3, [r4, #32]
 8007d2e:	b11b      	cbz	r3, 8007d38 <__sinit+0x14>
 8007d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d34:	f7ff bff0 	b.w	8007d18 <__sfp_lock_release>
 8007d38:	4b04      	ldr	r3, [pc, #16]	@ (8007d4c <__sinit+0x28>)
 8007d3a:	6223      	str	r3, [r4, #32]
 8007d3c:	4b04      	ldr	r3, [pc, #16]	@ (8007d50 <__sinit+0x2c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f5      	bne.n	8007d30 <__sinit+0xc>
 8007d44:	f7ff ffc4 	bl	8007cd0 <global_stdio_init.part.0>
 8007d48:	e7f2      	b.n	8007d30 <__sinit+0xc>
 8007d4a:	bf00      	nop
 8007d4c:	08007c91 	.word	0x08007c91
 8007d50:	200006d4 	.word	0x200006d4

08007d54 <_fwalk_sglue>:
 8007d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d58:	4607      	mov	r7, r0
 8007d5a:	4688      	mov	r8, r1
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	2600      	movs	r6, #0
 8007d60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d64:	f1b9 0901 	subs.w	r9, r9, #1
 8007d68:	d505      	bpl.n	8007d76 <_fwalk_sglue+0x22>
 8007d6a:	6824      	ldr	r4, [r4, #0]
 8007d6c:	2c00      	cmp	r4, #0
 8007d6e:	d1f7      	bne.n	8007d60 <_fwalk_sglue+0xc>
 8007d70:	4630      	mov	r0, r6
 8007d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d907      	bls.n	8007d8c <_fwalk_sglue+0x38>
 8007d7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d80:	3301      	adds	r3, #1
 8007d82:	d003      	beq.n	8007d8c <_fwalk_sglue+0x38>
 8007d84:	4629      	mov	r1, r5
 8007d86:	4638      	mov	r0, r7
 8007d88:	47c0      	blx	r8
 8007d8a:	4306      	orrs	r6, r0
 8007d8c:	3568      	adds	r5, #104	@ 0x68
 8007d8e:	e7e9      	b.n	8007d64 <_fwalk_sglue+0x10>

08007d90 <sniprintf>:
 8007d90:	b40c      	push	{r2, r3}
 8007d92:	b530      	push	{r4, r5, lr}
 8007d94:	4b17      	ldr	r3, [pc, #92]	@ (8007df4 <sniprintf+0x64>)
 8007d96:	1e0c      	subs	r4, r1, #0
 8007d98:	681d      	ldr	r5, [r3, #0]
 8007d9a:	b09d      	sub	sp, #116	@ 0x74
 8007d9c:	da08      	bge.n	8007db0 <sniprintf+0x20>
 8007d9e:	238b      	movs	r3, #139	@ 0x8b
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	b01d      	add	sp, #116	@ 0x74
 8007da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dac:	b002      	add	sp, #8
 8007dae:	4770      	bx	lr
 8007db0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007db4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007db8:	bf14      	ite	ne
 8007dba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007dbe:	4623      	moveq	r3, r4
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	9307      	str	r3, [sp, #28]
 8007dc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007dc8:	9002      	str	r0, [sp, #8]
 8007dca:	9006      	str	r0, [sp, #24]
 8007dcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007dd2:	ab21      	add	r3, sp, #132	@ 0x84
 8007dd4:	a902      	add	r1, sp, #8
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	f001 fc0b 	bl	80095f4 <_svfiprintf_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	bfbc      	itt	lt
 8007de2:	238b      	movlt	r3, #139	@ 0x8b
 8007de4:	602b      	strlt	r3, [r5, #0]
 8007de6:	2c00      	cmp	r4, #0
 8007de8:	d0dd      	beq.n	8007da6 <sniprintf+0x16>
 8007dea:	9b02      	ldr	r3, [sp, #8]
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
 8007df0:	e7d9      	b.n	8007da6 <sniprintf+0x16>
 8007df2:	bf00      	nop
 8007df4:	2000002c 	.word	0x2000002c

08007df8 <__sread>:
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e00:	f000 f86c 	bl	8007edc <_read_r>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	bfab      	itete	ge
 8007e08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e0c:	181b      	addge	r3, r3, r0
 8007e0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e12:	bfac      	ite	ge
 8007e14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e16:	81a3      	strhlt	r3, [r4, #12]
 8007e18:	bd10      	pop	{r4, pc}

08007e1a <__swrite>:
 8007e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1e:	461f      	mov	r7, r3
 8007e20:	898b      	ldrh	r3, [r1, #12]
 8007e22:	05db      	lsls	r3, r3, #23
 8007e24:	4605      	mov	r5, r0
 8007e26:	460c      	mov	r4, r1
 8007e28:	4616      	mov	r6, r2
 8007e2a:	d505      	bpl.n	8007e38 <__swrite+0x1e>
 8007e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e30:	2302      	movs	r3, #2
 8007e32:	2200      	movs	r2, #0
 8007e34:	f000 f840 	bl	8007eb8 <_lseek_r>
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e42:	81a3      	strh	r3, [r4, #12]
 8007e44:	4632      	mov	r2, r6
 8007e46:	463b      	mov	r3, r7
 8007e48:	4628      	mov	r0, r5
 8007e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4e:	f000 b857 	b.w	8007f00 <_write_r>

08007e52 <__sseek>:
 8007e52:	b510      	push	{r4, lr}
 8007e54:	460c      	mov	r4, r1
 8007e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e5a:	f000 f82d 	bl	8007eb8 <_lseek_r>
 8007e5e:	1c43      	adds	r3, r0, #1
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	bf15      	itete	ne
 8007e64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e6e:	81a3      	strheq	r3, [r4, #12]
 8007e70:	bf18      	it	ne
 8007e72:	81a3      	strhne	r3, [r4, #12]
 8007e74:	bd10      	pop	{r4, pc}

08007e76 <__sclose>:
 8007e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e7a:	f000 b80d 	b.w	8007e98 <_close_r>

08007e7e <memset>:
 8007e7e:	4402      	add	r2, r0
 8007e80:	4603      	mov	r3, r0
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d100      	bne.n	8007e88 <memset+0xa>
 8007e86:	4770      	bx	lr
 8007e88:	f803 1b01 	strb.w	r1, [r3], #1
 8007e8c:	e7f9      	b.n	8007e82 <memset+0x4>
	...

08007e90 <_localeconv_r>:
 8007e90:	4800      	ldr	r0, [pc, #0]	@ (8007e94 <_localeconv_r+0x4>)
 8007e92:	4770      	bx	lr
 8007e94:	2000016c 	.word	0x2000016c

08007e98 <_close_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4d06      	ldr	r5, [pc, #24]	@ (8007eb4 <_close_r+0x1c>)
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	4608      	mov	r0, r1
 8007ea2:	602b      	str	r3, [r5, #0]
 8007ea4:	f7fa fd14 	bl	80028d0 <_close>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d102      	bne.n	8007eb2 <_close_r+0x1a>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	b103      	cbz	r3, 8007eb2 <_close_r+0x1a>
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	200006d8 	.word	0x200006d8

08007eb8 <_lseek_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d07      	ldr	r5, [pc, #28]	@ (8007ed8 <_lseek_r+0x20>)
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	602a      	str	r2, [r5, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f7fa fd29 	bl	800291e <_lseek>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_lseek_r+0x1e>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_lseek_r+0x1e>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	200006d8 	.word	0x200006d8

08007edc <_read_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	@ (8007efc <_read_r+0x20>)
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	602a      	str	r2, [r5, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f7fa fcb7 	bl	800285e <_read>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_read_r+0x1e>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_read_r+0x1e>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	200006d8 	.word	0x200006d8

08007f00 <_write_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d07      	ldr	r5, [pc, #28]	@ (8007f20 <_write_r+0x20>)
 8007f04:	4604      	mov	r4, r0
 8007f06:	4608      	mov	r0, r1
 8007f08:	4611      	mov	r1, r2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	602a      	str	r2, [r5, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f7fa fcc2 	bl	8002898 <_write>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_write_r+0x1e>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_write_r+0x1e>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	200006d8 	.word	0x200006d8

08007f24 <__errno>:
 8007f24:	4b01      	ldr	r3, [pc, #4]	@ (8007f2c <__errno+0x8>)
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	2000002c 	.word	0x2000002c

08007f30 <__libc_init_array>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	4d0d      	ldr	r5, [pc, #52]	@ (8007f68 <__libc_init_array+0x38>)
 8007f34:	4c0d      	ldr	r4, [pc, #52]	@ (8007f6c <__libc_init_array+0x3c>)
 8007f36:	1b64      	subs	r4, r4, r5
 8007f38:	10a4      	asrs	r4, r4, #2
 8007f3a:	2600      	movs	r6, #0
 8007f3c:	42a6      	cmp	r6, r4
 8007f3e:	d109      	bne.n	8007f54 <__libc_init_array+0x24>
 8007f40:	4d0b      	ldr	r5, [pc, #44]	@ (8007f70 <__libc_init_array+0x40>)
 8007f42:	4c0c      	ldr	r4, [pc, #48]	@ (8007f74 <__libc_init_array+0x44>)
 8007f44:	f002 f888 	bl	800a058 <_init>
 8007f48:	1b64      	subs	r4, r4, r5
 8007f4a:	10a4      	asrs	r4, r4, #2
 8007f4c:	2600      	movs	r6, #0
 8007f4e:	42a6      	cmp	r6, r4
 8007f50:	d105      	bne.n	8007f5e <__libc_init_array+0x2e>
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f58:	4798      	blx	r3
 8007f5a:	3601      	adds	r6, #1
 8007f5c:	e7ee      	b.n	8007f3c <__libc_init_array+0xc>
 8007f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f62:	4798      	blx	r3
 8007f64:	3601      	adds	r6, #1
 8007f66:	e7f2      	b.n	8007f4e <__libc_init_array+0x1e>
 8007f68:	0800a428 	.word	0x0800a428
 8007f6c:	0800a428 	.word	0x0800a428
 8007f70:	0800a428 	.word	0x0800a428
 8007f74:	0800a42c 	.word	0x0800a42c

08007f78 <__retarget_lock_init_recursive>:
 8007f78:	4770      	bx	lr

08007f7a <__retarget_lock_acquire_recursive>:
 8007f7a:	4770      	bx	lr

08007f7c <__retarget_lock_release_recursive>:
 8007f7c:	4770      	bx	lr

08007f7e <memcpy>:
 8007f7e:	440a      	add	r2, r1
 8007f80:	4291      	cmp	r1, r2
 8007f82:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f86:	d100      	bne.n	8007f8a <memcpy+0xc>
 8007f88:	4770      	bx	lr
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f94:	4291      	cmp	r1, r2
 8007f96:	d1f9      	bne.n	8007f8c <memcpy+0xe>
 8007f98:	bd10      	pop	{r4, pc}

08007f9a <quorem>:
 8007f9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9e:	6903      	ldr	r3, [r0, #16]
 8007fa0:	690c      	ldr	r4, [r1, #16]
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	db7e      	blt.n	80080a6 <quorem+0x10c>
 8007fa8:	3c01      	subs	r4, #1
 8007faa:	f101 0814 	add.w	r8, r1, #20
 8007fae:	00a3      	lsls	r3, r4, #2
 8007fb0:	f100 0514 	add.w	r5, r0, #20
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fd0:	d32e      	bcc.n	8008030 <quorem+0x96>
 8007fd2:	f04f 0a00 	mov.w	sl, #0
 8007fd6:	46c4      	mov	ip, r8
 8007fd8:	46ae      	mov	lr, r5
 8007fda:	46d3      	mov	fp, sl
 8007fdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fe0:	b298      	uxth	r0, r3
 8007fe2:	fb06 a000 	mla	r0, r6, r0, sl
 8007fe6:	0c02      	lsrs	r2, r0, #16
 8007fe8:	0c1b      	lsrs	r3, r3, #16
 8007fea:	fb06 2303 	mla	r3, r6, r3, r2
 8007fee:	f8de 2000 	ldr.w	r2, [lr]
 8007ff2:	b280      	uxth	r0, r0
 8007ff4:	b292      	uxth	r2, r2
 8007ff6:	1a12      	subs	r2, r2, r0
 8007ff8:	445a      	add	r2, fp
 8007ffa:	f8de 0000 	ldr.w	r0, [lr]
 8007ffe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008002:	b29b      	uxth	r3, r3
 8008004:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008008:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800800c:	b292      	uxth	r2, r2
 800800e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008012:	45e1      	cmp	r9, ip
 8008014:	f84e 2b04 	str.w	r2, [lr], #4
 8008018:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800801c:	d2de      	bcs.n	8007fdc <quorem+0x42>
 800801e:	9b00      	ldr	r3, [sp, #0]
 8008020:	58eb      	ldr	r3, [r5, r3]
 8008022:	b92b      	cbnz	r3, 8008030 <quorem+0x96>
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	3b04      	subs	r3, #4
 8008028:	429d      	cmp	r5, r3
 800802a:	461a      	mov	r2, r3
 800802c:	d32f      	bcc.n	800808e <quorem+0xf4>
 800802e:	613c      	str	r4, [r7, #16]
 8008030:	4638      	mov	r0, r7
 8008032:	f001 f97b 	bl	800932c <__mcmp>
 8008036:	2800      	cmp	r0, #0
 8008038:	db25      	blt.n	8008086 <quorem+0xec>
 800803a:	4629      	mov	r1, r5
 800803c:	2000      	movs	r0, #0
 800803e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008042:	f8d1 c000 	ldr.w	ip, [r1]
 8008046:	fa1f fe82 	uxth.w	lr, r2
 800804a:	fa1f f38c 	uxth.w	r3, ip
 800804e:	eba3 030e 	sub.w	r3, r3, lr
 8008052:	4403      	add	r3, r0
 8008054:	0c12      	lsrs	r2, r2, #16
 8008056:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800805a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800805e:	b29b      	uxth	r3, r3
 8008060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008064:	45c1      	cmp	r9, r8
 8008066:	f841 3b04 	str.w	r3, [r1], #4
 800806a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800806e:	d2e6      	bcs.n	800803e <quorem+0xa4>
 8008070:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008074:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008078:	b922      	cbnz	r2, 8008084 <quorem+0xea>
 800807a:	3b04      	subs	r3, #4
 800807c:	429d      	cmp	r5, r3
 800807e:	461a      	mov	r2, r3
 8008080:	d30b      	bcc.n	800809a <quorem+0x100>
 8008082:	613c      	str	r4, [r7, #16]
 8008084:	3601      	adds	r6, #1
 8008086:	4630      	mov	r0, r6
 8008088:	b003      	add	sp, #12
 800808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808e:	6812      	ldr	r2, [r2, #0]
 8008090:	3b04      	subs	r3, #4
 8008092:	2a00      	cmp	r2, #0
 8008094:	d1cb      	bne.n	800802e <quorem+0x94>
 8008096:	3c01      	subs	r4, #1
 8008098:	e7c6      	b.n	8008028 <quorem+0x8e>
 800809a:	6812      	ldr	r2, [r2, #0]
 800809c:	3b04      	subs	r3, #4
 800809e:	2a00      	cmp	r2, #0
 80080a0:	d1ef      	bne.n	8008082 <quorem+0xe8>
 80080a2:	3c01      	subs	r4, #1
 80080a4:	e7ea      	b.n	800807c <quorem+0xe2>
 80080a6:	2000      	movs	r0, #0
 80080a8:	e7ee      	b.n	8008088 <quorem+0xee>
 80080aa:	0000      	movs	r0, r0
 80080ac:	0000      	movs	r0, r0
	...

080080b0 <_dtoa_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	69c7      	ldr	r7, [r0, #28]
 80080b6:	b099      	sub	sp, #100	@ 0x64
 80080b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080bc:	ec55 4b10 	vmov	r4, r5, d0
 80080c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80080c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80080c4:	4683      	mov	fp, r0
 80080c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80080c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080ca:	b97f      	cbnz	r7, 80080ec <_dtoa_r+0x3c>
 80080cc:	2010      	movs	r0, #16
 80080ce:	f000 fdfd 	bl	8008ccc <malloc>
 80080d2:	4602      	mov	r2, r0
 80080d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80080d8:	b920      	cbnz	r0, 80080e4 <_dtoa_r+0x34>
 80080da:	4ba7      	ldr	r3, [pc, #668]	@ (8008378 <_dtoa_r+0x2c8>)
 80080dc:	21ef      	movs	r1, #239	@ 0xef
 80080de:	48a7      	ldr	r0, [pc, #668]	@ (800837c <_dtoa_r+0x2cc>)
 80080e0:	f001 fc5a 	bl	8009998 <__assert_func>
 80080e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80080e8:	6007      	str	r7, [r0, #0]
 80080ea:	60c7      	str	r7, [r0, #12]
 80080ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080f0:	6819      	ldr	r1, [r3, #0]
 80080f2:	b159      	cbz	r1, 800810c <_dtoa_r+0x5c>
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	604a      	str	r2, [r1, #4]
 80080f8:	2301      	movs	r3, #1
 80080fa:	4093      	lsls	r3, r2
 80080fc:	608b      	str	r3, [r1, #8]
 80080fe:	4658      	mov	r0, fp
 8008100:	f000 feda 	bl	8008eb8 <_Bfree>
 8008104:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	1e2b      	subs	r3, r5, #0
 800810e:	bfb9      	ittee	lt
 8008110:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008114:	9303      	strlt	r3, [sp, #12]
 8008116:	2300      	movge	r3, #0
 8008118:	6033      	strge	r3, [r6, #0]
 800811a:	9f03      	ldr	r7, [sp, #12]
 800811c:	4b98      	ldr	r3, [pc, #608]	@ (8008380 <_dtoa_r+0x2d0>)
 800811e:	bfbc      	itt	lt
 8008120:	2201      	movlt	r2, #1
 8008122:	6032      	strlt	r2, [r6, #0]
 8008124:	43bb      	bics	r3, r7
 8008126:	d112      	bne.n	800814e <_dtoa_r+0x9e>
 8008128:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800812a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008134:	4323      	orrs	r3, r4
 8008136:	f000 854d 	beq.w	8008bd4 <_dtoa_r+0xb24>
 800813a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800813c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008394 <_dtoa_r+0x2e4>
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 854f 	beq.w	8008be4 <_dtoa_r+0xb34>
 8008146:	f10a 0303 	add.w	r3, sl, #3
 800814a:	f000 bd49 	b.w	8008be0 <_dtoa_r+0xb30>
 800814e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008152:	2200      	movs	r2, #0
 8008154:	ec51 0b17 	vmov	r0, r1, d7
 8008158:	2300      	movs	r3, #0
 800815a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800815e:	f7f8 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008162:	4680      	mov	r8, r0
 8008164:	b158      	cbz	r0, 800817e <_dtoa_r+0xce>
 8008166:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008168:	2301      	movs	r3, #1
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800816e:	b113      	cbz	r3, 8008176 <_dtoa_r+0xc6>
 8008170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008172:	4b84      	ldr	r3, [pc, #528]	@ (8008384 <_dtoa_r+0x2d4>)
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008398 <_dtoa_r+0x2e8>
 800817a:	f000 bd33 	b.w	8008be4 <_dtoa_r+0xb34>
 800817e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008182:	aa16      	add	r2, sp, #88	@ 0x58
 8008184:	a917      	add	r1, sp, #92	@ 0x5c
 8008186:	4658      	mov	r0, fp
 8008188:	f001 f980 	bl	800948c <__d2b>
 800818c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008190:	4681      	mov	r9, r0
 8008192:	2e00      	cmp	r6, #0
 8008194:	d077      	beq.n	8008286 <_dtoa_r+0x1d6>
 8008196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008198:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800819c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80081a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80081ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80081b0:	4619      	mov	r1, r3
 80081b2:	2200      	movs	r2, #0
 80081b4:	4b74      	ldr	r3, [pc, #464]	@ (8008388 <_dtoa_r+0x2d8>)
 80081b6:	f7f8 f867 	bl	8000288 <__aeabi_dsub>
 80081ba:	a369      	add	r3, pc, #420	@ (adr r3, 8008360 <_dtoa_r+0x2b0>)
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f7f8 fa1a 	bl	80005f8 <__aeabi_dmul>
 80081c4:	a368      	add	r3, pc, #416	@ (adr r3, 8008368 <_dtoa_r+0x2b8>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	f7f8 f85f 	bl	800028c <__adddf3>
 80081ce:	4604      	mov	r4, r0
 80081d0:	4630      	mov	r0, r6
 80081d2:	460d      	mov	r5, r1
 80081d4:	f7f8 f9a6 	bl	8000524 <__aeabi_i2d>
 80081d8:	a365      	add	r3, pc, #404	@ (adr r3, 8008370 <_dtoa_r+0x2c0>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	f7f8 fa0b 	bl	80005f8 <__aeabi_dmul>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7f8 f84f 	bl	800028c <__adddf3>
 80081ee:	4604      	mov	r4, r0
 80081f0:	460d      	mov	r5, r1
 80081f2:	f7f8 fcb1 	bl	8000b58 <__aeabi_d2iz>
 80081f6:	2200      	movs	r2, #0
 80081f8:	4607      	mov	r7, r0
 80081fa:	2300      	movs	r3, #0
 80081fc:	4620      	mov	r0, r4
 80081fe:	4629      	mov	r1, r5
 8008200:	f7f8 fc6c 	bl	8000adc <__aeabi_dcmplt>
 8008204:	b140      	cbz	r0, 8008218 <_dtoa_r+0x168>
 8008206:	4638      	mov	r0, r7
 8008208:	f7f8 f98c 	bl	8000524 <__aeabi_i2d>
 800820c:	4622      	mov	r2, r4
 800820e:	462b      	mov	r3, r5
 8008210:	f7f8 fc5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008214:	b900      	cbnz	r0, 8008218 <_dtoa_r+0x168>
 8008216:	3f01      	subs	r7, #1
 8008218:	2f16      	cmp	r7, #22
 800821a:	d851      	bhi.n	80082c0 <_dtoa_r+0x210>
 800821c:	4b5b      	ldr	r3, [pc, #364]	@ (800838c <_dtoa_r+0x2dc>)
 800821e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800822a:	f7f8 fc57 	bl	8000adc <__aeabi_dcmplt>
 800822e:	2800      	cmp	r0, #0
 8008230:	d048      	beq.n	80082c4 <_dtoa_r+0x214>
 8008232:	3f01      	subs	r7, #1
 8008234:	2300      	movs	r3, #0
 8008236:	9312      	str	r3, [sp, #72]	@ 0x48
 8008238:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800823a:	1b9b      	subs	r3, r3, r6
 800823c:	1e5a      	subs	r2, r3, #1
 800823e:	bf44      	itt	mi
 8008240:	f1c3 0801 	rsbmi	r8, r3, #1
 8008244:	2300      	movmi	r3, #0
 8008246:	9208      	str	r2, [sp, #32]
 8008248:	bf54      	ite	pl
 800824a:	f04f 0800 	movpl.w	r8, #0
 800824e:	9308      	strmi	r3, [sp, #32]
 8008250:	2f00      	cmp	r7, #0
 8008252:	db39      	blt.n	80082c8 <_dtoa_r+0x218>
 8008254:	9b08      	ldr	r3, [sp, #32]
 8008256:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008258:	443b      	add	r3, r7
 800825a:	9308      	str	r3, [sp, #32]
 800825c:	2300      	movs	r3, #0
 800825e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008262:	2b09      	cmp	r3, #9
 8008264:	d864      	bhi.n	8008330 <_dtoa_r+0x280>
 8008266:	2b05      	cmp	r3, #5
 8008268:	bfc4      	itt	gt
 800826a:	3b04      	subgt	r3, #4
 800826c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800826e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008270:	f1a3 0302 	sub.w	r3, r3, #2
 8008274:	bfcc      	ite	gt
 8008276:	2400      	movgt	r4, #0
 8008278:	2401      	movle	r4, #1
 800827a:	2b03      	cmp	r3, #3
 800827c:	d863      	bhi.n	8008346 <_dtoa_r+0x296>
 800827e:	e8df f003 	tbb	[pc, r3]
 8008282:	372a      	.short	0x372a
 8008284:	5535      	.short	0x5535
 8008286:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800828a:	441e      	add	r6, r3
 800828c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008290:	2b20      	cmp	r3, #32
 8008292:	bfc1      	itttt	gt
 8008294:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008298:	409f      	lslgt	r7, r3
 800829a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800829e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80082a2:	bfd6      	itet	le
 80082a4:	f1c3 0320 	rsble	r3, r3, #32
 80082a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80082ac:	fa04 f003 	lslle.w	r0, r4, r3
 80082b0:	f7f8 f928 	bl	8000504 <__aeabi_ui2d>
 80082b4:	2201      	movs	r2, #1
 80082b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80082ba:	3e01      	subs	r6, #1
 80082bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80082be:	e777      	b.n	80081b0 <_dtoa_r+0x100>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e7b8      	b.n	8008236 <_dtoa_r+0x186>
 80082c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80082c6:	e7b7      	b.n	8008238 <_dtoa_r+0x188>
 80082c8:	427b      	negs	r3, r7
 80082ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80082cc:	2300      	movs	r3, #0
 80082ce:	eba8 0807 	sub.w	r8, r8, r7
 80082d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082d4:	e7c4      	b.n	8008260 <_dtoa_r+0x1b0>
 80082d6:	2300      	movs	r3, #0
 80082d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dc35      	bgt.n	800834c <_dtoa_r+0x29c>
 80082e0:	2301      	movs	r3, #1
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	9307      	str	r3, [sp, #28]
 80082e6:	461a      	mov	r2, r3
 80082e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80082ea:	e00b      	b.n	8008304 <_dtoa_r+0x254>
 80082ec:	2301      	movs	r3, #1
 80082ee:	e7f3      	b.n	80082d8 <_dtoa_r+0x228>
 80082f0:	2300      	movs	r3, #0
 80082f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082f6:	18fb      	adds	r3, r7, r3
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	3301      	adds	r3, #1
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	9307      	str	r3, [sp, #28]
 8008300:	bfb8      	it	lt
 8008302:	2301      	movlt	r3, #1
 8008304:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008308:	2100      	movs	r1, #0
 800830a:	2204      	movs	r2, #4
 800830c:	f102 0514 	add.w	r5, r2, #20
 8008310:	429d      	cmp	r5, r3
 8008312:	d91f      	bls.n	8008354 <_dtoa_r+0x2a4>
 8008314:	6041      	str	r1, [r0, #4]
 8008316:	4658      	mov	r0, fp
 8008318:	f000 fd8e 	bl	8008e38 <_Balloc>
 800831c:	4682      	mov	sl, r0
 800831e:	2800      	cmp	r0, #0
 8008320:	d13c      	bne.n	800839c <_dtoa_r+0x2ec>
 8008322:	4b1b      	ldr	r3, [pc, #108]	@ (8008390 <_dtoa_r+0x2e0>)
 8008324:	4602      	mov	r2, r0
 8008326:	f240 11af 	movw	r1, #431	@ 0x1af
 800832a:	e6d8      	b.n	80080de <_dtoa_r+0x2e>
 800832c:	2301      	movs	r3, #1
 800832e:	e7e0      	b.n	80082f2 <_dtoa_r+0x242>
 8008330:	2401      	movs	r4, #1
 8008332:	2300      	movs	r3, #0
 8008334:	9309      	str	r3, [sp, #36]	@ 0x24
 8008336:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008338:	f04f 33ff 	mov.w	r3, #4294967295
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	9307      	str	r3, [sp, #28]
 8008340:	2200      	movs	r2, #0
 8008342:	2312      	movs	r3, #18
 8008344:	e7d0      	b.n	80082e8 <_dtoa_r+0x238>
 8008346:	2301      	movs	r3, #1
 8008348:	930b      	str	r3, [sp, #44]	@ 0x2c
 800834a:	e7f5      	b.n	8008338 <_dtoa_r+0x288>
 800834c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	9307      	str	r3, [sp, #28]
 8008352:	e7d7      	b.n	8008304 <_dtoa_r+0x254>
 8008354:	3101      	adds	r1, #1
 8008356:	0052      	lsls	r2, r2, #1
 8008358:	e7d8      	b.n	800830c <_dtoa_r+0x25c>
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w
 8008360:	636f4361 	.word	0x636f4361
 8008364:	3fd287a7 	.word	0x3fd287a7
 8008368:	8b60c8b3 	.word	0x8b60c8b3
 800836c:	3fc68a28 	.word	0x3fc68a28
 8008370:	509f79fb 	.word	0x509f79fb
 8008374:	3fd34413 	.word	0x3fd34413
 8008378:	0800a0f1 	.word	0x0800a0f1
 800837c:	0800a108 	.word	0x0800a108
 8008380:	7ff00000 	.word	0x7ff00000
 8008384:	0800a0c1 	.word	0x0800a0c1
 8008388:	3ff80000 	.word	0x3ff80000
 800838c:	0800a200 	.word	0x0800a200
 8008390:	0800a160 	.word	0x0800a160
 8008394:	0800a0ed 	.word	0x0800a0ed
 8008398:	0800a0c0 	.word	0x0800a0c0
 800839c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083a0:	6018      	str	r0, [r3, #0]
 80083a2:	9b07      	ldr	r3, [sp, #28]
 80083a4:	2b0e      	cmp	r3, #14
 80083a6:	f200 80a4 	bhi.w	80084f2 <_dtoa_r+0x442>
 80083aa:	2c00      	cmp	r4, #0
 80083ac:	f000 80a1 	beq.w	80084f2 <_dtoa_r+0x442>
 80083b0:	2f00      	cmp	r7, #0
 80083b2:	dd33      	ble.n	800841c <_dtoa_r+0x36c>
 80083b4:	4bad      	ldr	r3, [pc, #692]	@ (800866c <_dtoa_r+0x5bc>)
 80083b6:	f007 020f 	and.w	r2, r7, #15
 80083ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083be:	ed93 7b00 	vldr	d7, [r3]
 80083c2:	05f8      	lsls	r0, r7, #23
 80083c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80083c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80083cc:	d516      	bpl.n	80083fc <_dtoa_r+0x34c>
 80083ce:	4ba8      	ldr	r3, [pc, #672]	@ (8008670 <_dtoa_r+0x5c0>)
 80083d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083d8:	f7f8 fa38 	bl	800084c <__aeabi_ddiv>
 80083dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083e0:	f004 040f 	and.w	r4, r4, #15
 80083e4:	2603      	movs	r6, #3
 80083e6:	4da2      	ldr	r5, [pc, #648]	@ (8008670 <_dtoa_r+0x5c0>)
 80083e8:	b954      	cbnz	r4, 8008400 <_dtoa_r+0x350>
 80083ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083f2:	f7f8 fa2b 	bl	800084c <__aeabi_ddiv>
 80083f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083fa:	e028      	b.n	800844e <_dtoa_r+0x39e>
 80083fc:	2602      	movs	r6, #2
 80083fe:	e7f2      	b.n	80083e6 <_dtoa_r+0x336>
 8008400:	07e1      	lsls	r1, r4, #31
 8008402:	d508      	bpl.n	8008416 <_dtoa_r+0x366>
 8008404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008408:	e9d5 2300 	ldrd	r2, r3, [r5]
 800840c:	f7f8 f8f4 	bl	80005f8 <__aeabi_dmul>
 8008410:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008414:	3601      	adds	r6, #1
 8008416:	1064      	asrs	r4, r4, #1
 8008418:	3508      	adds	r5, #8
 800841a:	e7e5      	b.n	80083e8 <_dtoa_r+0x338>
 800841c:	f000 80d2 	beq.w	80085c4 <_dtoa_r+0x514>
 8008420:	427c      	negs	r4, r7
 8008422:	4b92      	ldr	r3, [pc, #584]	@ (800866c <_dtoa_r+0x5bc>)
 8008424:	4d92      	ldr	r5, [pc, #584]	@ (8008670 <_dtoa_r+0x5c0>)
 8008426:	f004 020f 	and.w	r2, r4, #15
 800842a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008436:	f7f8 f8df 	bl	80005f8 <__aeabi_dmul>
 800843a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800843e:	1124      	asrs	r4, r4, #4
 8008440:	2300      	movs	r3, #0
 8008442:	2602      	movs	r6, #2
 8008444:	2c00      	cmp	r4, #0
 8008446:	f040 80b2 	bne.w	80085ae <_dtoa_r+0x4fe>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1d3      	bne.n	80083f6 <_dtoa_r+0x346>
 800844e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008450:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 80b7 	beq.w	80085c8 <_dtoa_r+0x518>
 800845a:	4b86      	ldr	r3, [pc, #536]	@ (8008674 <_dtoa_r+0x5c4>)
 800845c:	2200      	movs	r2, #0
 800845e:	4620      	mov	r0, r4
 8008460:	4629      	mov	r1, r5
 8008462:	f7f8 fb3b 	bl	8000adc <__aeabi_dcmplt>
 8008466:	2800      	cmp	r0, #0
 8008468:	f000 80ae 	beq.w	80085c8 <_dtoa_r+0x518>
 800846c:	9b07      	ldr	r3, [sp, #28]
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 80aa 	beq.w	80085c8 <_dtoa_r+0x518>
 8008474:	9b00      	ldr	r3, [sp, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	dd37      	ble.n	80084ea <_dtoa_r+0x43a>
 800847a:	1e7b      	subs	r3, r7, #1
 800847c:	9304      	str	r3, [sp, #16]
 800847e:	4620      	mov	r0, r4
 8008480:	4b7d      	ldr	r3, [pc, #500]	@ (8008678 <_dtoa_r+0x5c8>)
 8008482:	2200      	movs	r2, #0
 8008484:	4629      	mov	r1, r5
 8008486:	f7f8 f8b7 	bl	80005f8 <__aeabi_dmul>
 800848a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800848e:	9c00      	ldr	r4, [sp, #0]
 8008490:	3601      	adds	r6, #1
 8008492:	4630      	mov	r0, r6
 8008494:	f7f8 f846 	bl	8000524 <__aeabi_i2d>
 8008498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800849c:	f7f8 f8ac 	bl	80005f8 <__aeabi_dmul>
 80084a0:	4b76      	ldr	r3, [pc, #472]	@ (800867c <_dtoa_r+0x5cc>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	f7f7 fef2 	bl	800028c <__adddf3>
 80084a8:	4605      	mov	r5, r0
 80084aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80084ae:	2c00      	cmp	r4, #0
 80084b0:	f040 808d 	bne.w	80085ce <_dtoa_r+0x51e>
 80084b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084b8:	4b71      	ldr	r3, [pc, #452]	@ (8008680 <_dtoa_r+0x5d0>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	f7f7 fee4 	bl	8000288 <__aeabi_dsub>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084c8:	462a      	mov	r2, r5
 80084ca:	4633      	mov	r3, r6
 80084cc:	f7f8 fb24 	bl	8000b18 <__aeabi_dcmpgt>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	f040 828b 	bne.w	80089ec <_dtoa_r+0x93c>
 80084d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084da:	462a      	mov	r2, r5
 80084dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80084e0:	f7f8 fafc 	bl	8000adc <__aeabi_dcmplt>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	f040 8128 	bne.w	800873a <_dtoa_r+0x68a>
 80084ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80084ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80084f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f2c0 815a 	blt.w	80087ae <_dtoa_r+0x6fe>
 80084fa:	2f0e      	cmp	r7, #14
 80084fc:	f300 8157 	bgt.w	80087ae <_dtoa_r+0x6fe>
 8008500:	4b5a      	ldr	r3, [pc, #360]	@ (800866c <_dtoa_r+0x5bc>)
 8008502:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008506:	ed93 7b00 	vldr	d7, [r3]
 800850a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800850c:	2b00      	cmp	r3, #0
 800850e:	ed8d 7b00 	vstr	d7, [sp]
 8008512:	da03      	bge.n	800851c <_dtoa_r+0x46c>
 8008514:	9b07      	ldr	r3, [sp, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f340 8101 	ble.w	800871e <_dtoa_r+0x66e>
 800851c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008520:	4656      	mov	r6, sl
 8008522:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008526:	4620      	mov	r0, r4
 8008528:	4629      	mov	r1, r5
 800852a:	f7f8 f98f 	bl	800084c <__aeabi_ddiv>
 800852e:	f7f8 fb13 	bl	8000b58 <__aeabi_d2iz>
 8008532:	4680      	mov	r8, r0
 8008534:	f7f7 fff6 	bl	8000524 <__aeabi_i2d>
 8008538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800853c:	f7f8 f85c 	bl	80005f8 <__aeabi_dmul>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4620      	mov	r0, r4
 8008546:	4629      	mov	r1, r5
 8008548:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800854c:	f7f7 fe9c 	bl	8000288 <__aeabi_dsub>
 8008550:	f806 4b01 	strb.w	r4, [r6], #1
 8008554:	9d07      	ldr	r5, [sp, #28]
 8008556:	eba6 040a 	sub.w	r4, r6, sl
 800855a:	42a5      	cmp	r5, r4
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	f040 8117 	bne.w	8008792 <_dtoa_r+0x6e2>
 8008564:	f7f7 fe92 	bl	800028c <__adddf3>
 8008568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800856c:	4604      	mov	r4, r0
 800856e:	460d      	mov	r5, r1
 8008570:	f7f8 fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8008574:	2800      	cmp	r0, #0
 8008576:	f040 80f9 	bne.w	800876c <_dtoa_r+0x6bc>
 800857a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800857e:	4620      	mov	r0, r4
 8008580:	4629      	mov	r1, r5
 8008582:	f7f8 faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008586:	b118      	cbz	r0, 8008590 <_dtoa_r+0x4e0>
 8008588:	f018 0f01 	tst.w	r8, #1
 800858c:	f040 80ee 	bne.w	800876c <_dtoa_r+0x6bc>
 8008590:	4649      	mov	r1, r9
 8008592:	4658      	mov	r0, fp
 8008594:	f000 fc90 	bl	8008eb8 <_Bfree>
 8008598:	2300      	movs	r3, #0
 800859a:	7033      	strb	r3, [r6, #0]
 800859c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800859e:	3701      	adds	r7, #1
 80085a0:	601f      	str	r7, [r3, #0]
 80085a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 831d 	beq.w	8008be4 <_dtoa_r+0xb34>
 80085aa:	601e      	str	r6, [r3, #0]
 80085ac:	e31a      	b.n	8008be4 <_dtoa_r+0xb34>
 80085ae:	07e2      	lsls	r2, r4, #31
 80085b0:	d505      	bpl.n	80085be <_dtoa_r+0x50e>
 80085b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085b6:	f7f8 f81f 	bl	80005f8 <__aeabi_dmul>
 80085ba:	3601      	adds	r6, #1
 80085bc:	2301      	movs	r3, #1
 80085be:	1064      	asrs	r4, r4, #1
 80085c0:	3508      	adds	r5, #8
 80085c2:	e73f      	b.n	8008444 <_dtoa_r+0x394>
 80085c4:	2602      	movs	r6, #2
 80085c6:	e742      	b.n	800844e <_dtoa_r+0x39e>
 80085c8:	9c07      	ldr	r4, [sp, #28]
 80085ca:	9704      	str	r7, [sp, #16]
 80085cc:	e761      	b.n	8008492 <_dtoa_r+0x3e2>
 80085ce:	4b27      	ldr	r3, [pc, #156]	@ (800866c <_dtoa_r+0x5bc>)
 80085d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085da:	4454      	add	r4, sl
 80085dc:	2900      	cmp	r1, #0
 80085de:	d053      	beq.n	8008688 <_dtoa_r+0x5d8>
 80085e0:	4928      	ldr	r1, [pc, #160]	@ (8008684 <_dtoa_r+0x5d4>)
 80085e2:	2000      	movs	r0, #0
 80085e4:	f7f8 f932 	bl	800084c <__aeabi_ddiv>
 80085e8:	4633      	mov	r3, r6
 80085ea:	462a      	mov	r2, r5
 80085ec:	f7f7 fe4c 	bl	8000288 <__aeabi_dsub>
 80085f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085f4:	4656      	mov	r6, sl
 80085f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085fa:	f7f8 faad 	bl	8000b58 <__aeabi_d2iz>
 80085fe:	4605      	mov	r5, r0
 8008600:	f7f7 ff90 	bl	8000524 <__aeabi_i2d>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800860c:	f7f7 fe3c 	bl	8000288 <__aeabi_dsub>
 8008610:	3530      	adds	r5, #48	@ 0x30
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800861a:	f806 5b01 	strb.w	r5, [r6], #1
 800861e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008622:	f7f8 fa5b 	bl	8000adc <__aeabi_dcmplt>
 8008626:	2800      	cmp	r0, #0
 8008628:	d171      	bne.n	800870e <_dtoa_r+0x65e>
 800862a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800862e:	4911      	ldr	r1, [pc, #68]	@ (8008674 <_dtoa_r+0x5c4>)
 8008630:	2000      	movs	r0, #0
 8008632:	f7f7 fe29 	bl	8000288 <__aeabi_dsub>
 8008636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800863a:	f7f8 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800863e:	2800      	cmp	r0, #0
 8008640:	f040 8095 	bne.w	800876e <_dtoa_r+0x6be>
 8008644:	42a6      	cmp	r6, r4
 8008646:	f43f af50 	beq.w	80084ea <_dtoa_r+0x43a>
 800864a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800864e:	4b0a      	ldr	r3, [pc, #40]	@ (8008678 <_dtoa_r+0x5c8>)
 8008650:	2200      	movs	r2, #0
 8008652:	f7f7 ffd1 	bl	80005f8 <__aeabi_dmul>
 8008656:	4b08      	ldr	r3, [pc, #32]	@ (8008678 <_dtoa_r+0x5c8>)
 8008658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800865c:	2200      	movs	r2, #0
 800865e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008662:	f7f7 ffc9 	bl	80005f8 <__aeabi_dmul>
 8008666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800866a:	e7c4      	b.n	80085f6 <_dtoa_r+0x546>
 800866c:	0800a200 	.word	0x0800a200
 8008670:	0800a1d8 	.word	0x0800a1d8
 8008674:	3ff00000 	.word	0x3ff00000
 8008678:	40240000 	.word	0x40240000
 800867c:	401c0000 	.word	0x401c0000
 8008680:	40140000 	.word	0x40140000
 8008684:	3fe00000 	.word	0x3fe00000
 8008688:	4631      	mov	r1, r6
 800868a:	4628      	mov	r0, r5
 800868c:	f7f7 ffb4 	bl	80005f8 <__aeabi_dmul>
 8008690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008694:	9415      	str	r4, [sp, #84]	@ 0x54
 8008696:	4656      	mov	r6, sl
 8008698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800869c:	f7f8 fa5c 	bl	8000b58 <__aeabi_d2iz>
 80086a0:	4605      	mov	r5, r0
 80086a2:	f7f7 ff3f 	bl	8000524 <__aeabi_i2d>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ae:	f7f7 fdeb 	bl	8000288 <__aeabi_dsub>
 80086b2:	3530      	adds	r5, #48	@ 0x30
 80086b4:	f806 5b01 	strb.w	r5, [r6], #1
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	42a6      	cmp	r6, r4
 80086be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086c2:	f04f 0200 	mov.w	r2, #0
 80086c6:	d124      	bne.n	8008712 <_dtoa_r+0x662>
 80086c8:	4bac      	ldr	r3, [pc, #688]	@ (800897c <_dtoa_r+0x8cc>)
 80086ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80086ce:	f7f7 fddd 	bl	800028c <__adddf3>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086da:	f7f8 fa1d 	bl	8000b18 <__aeabi_dcmpgt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d145      	bne.n	800876e <_dtoa_r+0x6be>
 80086e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086e6:	49a5      	ldr	r1, [pc, #660]	@ (800897c <_dtoa_r+0x8cc>)
 80086e8:	2000      	movs	r0, #0
 80086ea:	f7f7 fdcd 	bl	8000288 <__aeabi_dsub>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f6:	f7f8 f9f1 	bl	8000adc <__aeabi_dcmplt>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	f43f aef5 	beq.w	80084ea <_dtoa_r+0x43a>
 8008700:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008702:	1e73      	subs	r3, r6, #1
 8008704:	9315      	str	r3, [sp, #84]	@ 0x54
 8008706:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800870a:	2b30      	cmp	r3, #48	@ 0x30
 800870c:	d0f8      	beq.n	8008700 <_dtoa_r+0x650>
 800870e:	9f04      	ldr	r7, [sp, #16]
 8008710:	e73e      	b.n	8008590 <_dtoa_r+0x4e0>
 8008712:	4b9b      	ldr	r3, [pc, #620]	@ (8008980 <_dtoa_r+0x8d0>)
 8008714:	f7f7 ff70 	bl	80005f8 <__aeabi_dmul>
 8008718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800871c:	e7bc      	b.n	8008698 <_dtoa_r+0x5e8>
 800871e:	d10c      	bne.n	800873a <_dtoa_r+0x68a>
 8008720:	4b98      	ldr	r3, [pc, #608]	@ (8008984 <_dtoa_r+0x8d4>)
 8008722:	2200      	movs	r2, #0
 8008724:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008728:	f7f7 ff66 	bl	80005f8 <__aeabi_dmul>
 800872c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008730:	f7f8 f9e8 	bl	8000b04 <__aeabi_dcmpge>
 8008734:	2800      	cmp	r0, #0
 8008736:	f000 8157 	beq.w	80089e8 <_dtoa_r+0x938>
 800873a:	2400      	movs	r4, #0
 800873c:	4625      	mov	r5, r4
 800873e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008740:	43db      	mvns	r3, r3
 8008742:	9304      	str	r3, [sp, #16]
 8008744:	4656      	mov	r6, sl
 8008746:	2700      	movs	r7, #0
 8008748:	4621      	mov	r1, r4
 800874a:	4658      	mov	r0, fp
 800874c:	f000 fbb4 	bl	8008eb8 <_Bfree>
 8008750:	2d00      	cmp	r5, #0
 8008752:	d0dc      	beq.n	800870e <_dtoa_r+0x65e>
 8008754:	b12f      	cbz	r7, 8008762 <_dtoa_r+0x6b2>
 8008756:	42af      	cmp	r7, r5
 8008758:	d003      	beq.n	8008762 <_dtoa_r+0x6b2>
 800875a:	4639      	mov	r1, r7
 800875c:	4658      	mov	r0, fp
 800875e:	f000 fbab 	bl	8008eb8 <_Bfree>
 8008762:	4629      	mov	r1, r5
 8008764:	4658      	mov	r0, fp
 8008766:	f000 fba7 	bl	8008eb8 <_Bfree>
 800876a:	e7d0      	b.n	800870e <_dtoa_r+0x65e>
 800876c:	9704      	str	r7, [sp, #16]
 800876e:	4633      	mov	r3, r6
 8008770:	461e      	mov	r6, r3
 8008772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008776:	2a39      	cmp	r2, #57	@ 0x39
 8008778:	d107      	bne.n	800878a <_dtoa_r+0x6da>
 800877a:	459a      	cmp	sl, r3
 800877c:	d1f8      	bne.n	8008770 <_dtoa_r+0x6c0>
 800877e:	9a04      	ldr	r2, [sp, #16]
 8008780:	3201      	adds	r2, #1
 8008782:	9204      	str	r2, [sp, #16]
 8008784:	2230      	movs	r2, #48	@ 0x30
 8008786:	f88a 2000 	strb.w	r2, [sl]
 800878a:	781a      	ldrb	r2, [r3, #0]
 800878c:	3201      	adds	r2, #1
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	e7bd      	b.n	800870e <_dtoa_r+0x65e>
 8008792:	4b7b      	ldr	r3, [pc, #492]	@ (8008980 <_dtoa_r+0x8d0>)
 8008794:	2200      	movs	r2, #0
 8008796:	f7f7 ff2f 	bl	80005f8 <__aeabi_dmul>
 800879a:	2200      	movs	r2, #0
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	460d      	mov	r5, r1
 80087a2:	f7f8 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f43f aebb 	beq.w	8008522 <_dtoa_r+0x472>
 80087ac:	e6f0      	b.n	8008590 <_dtoa_r+0x4e0>
 80087ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80087b0:	2a00      	cmp	r2, #0
 80087b2:	f000 80db 	beq.w	800896c <_dtoa_r+0x8bc>
 80087b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087b8:	2a01      	cmp	r2, #1
 80087ba:	f300 80bf 	bgt.w	800893c <_dtoa_r+0x88c>
 80087be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	f000 80b7 	beq.w	8008934 <_dtoa_r+0x884>
 80087c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80087ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80087cc:	4646      	mov	r6, r8
 80087ce:	9a08      	ldr	r2, [sp, #32]
 80087d0:	2101      	movs	r1, #1
 80087d2:	441a      	add	r2, r3
 80087d4:	4658      	mov	r0, fp
 80087d6:	4498      	add	r8, r3
 80087d8:	9208      	str	r2, [sp, #32]
 80087da:	f000 fc21 	bl	8009020 <__i2b>
 80087de:	4605      	mov	r5, r0
 80087e0:	b15e      	cbz	r6, 80087fa <_dtoa_r+0x74a>
 80087e2:	9b08      	ldr	r3, [sp, #32]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	dd08      	ble.n	80087fa <_dtoa_r+0x74a>
 80087e8:	42b3      	cmp	r3, r6
 80087ea:	9a08      	ldr	r2, [sp, #32]
 80087ec:	bfa8      	it	ge
 80087ee:	4633      	movge	r3, r6
 80087f0:	eba8 0803 	sub.w	r8, r8, r3
 80087f4:	1af6      	subs	r6, r6, r3
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	9308      	str	r3, [sp, #32]
 80087fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087fc:	b1f3      	cbz	r3, 800883c <_dtoa_r+0x78c>
 80087fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 80b7 	beq.w	8008974 <_dtoa_r+0x8c4>
 8008806:	b18c      	cbz	r4, 800882c <_dtoa_r+0x77c>
 8008808:	4629      	mov	r1, r5
 800880a:	4622      	mov	r2, r4
 800880c:	4658      	mov	r0, fp
 800880e:	f000 fcc7 	bl	80091a0 <__pow5mult>
 8008812:	464a      	mov	r2, r9
 8008814:	4601      	mov	r1, r0
 8008816:	4605      	mov	r5, r0
 8008818:	4658      	mov	r0, fp
 800881a:	f000 fc17 	bl	800904c <__multiply>
 800881e:	4649      	mov	r1, r9
 8008820:	9004      	str	r0, [sp, #16]
 8008822:	4658      	mov	r0, fp
 8008824:	f000 fb48 	bl	8008eb8 <_Bfree>
 8008828:	9b04      	ldr	r3, [sp, #16]
 800882a:	4699      	mov	r9, r3
 800882c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800882e:	1b1a      	subs	r2, r3, r4
 8008830:	d004      	beq.n	800883c <_dtoa_r+0x78c>
 8008832:	4649      	mov	r1, r9
 8008834:	4658      	mov	r0, fp
 8008836:	f000 fcb3 	bl	80091a0 <__pow5mult>
 800883a:	4681      	mov	r9, r0
 800883c:	2101      	movs	r1, #1
 800883e:	4658      	mov	r0, fp
 8008840:	f000 fbee 	bl	8009020 <__i2b>
 8008844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008846:	4604      	mov	r4, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	f000 81cf 	beq.w	8008bec <_dtoa_r+0xb3c>
 800884e:	461a      	mov	r2, r3
 8008850:	4601      	mov	r1, r0
 8008852:	4658      	mov	r0, fp
 8008854:	f000 fca4 	bl	80091a0 <__pow5mult>
 8008858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885a:	2b01      	cmp	r3, #1
 800885c:	4604      	mov	r4, r0
 800885e:	f300 8095 	bgt.w	800898c <_dtoa_r+0x8dc>
 8008862:	9b02      	ldr	r3, [sp, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f040 8087 	bne.w	8008978 <_dtoa_r+0x8c8>
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008870:	2b00      	cmp	r3, #0
 8008872:	f040 8089 	bne.w	8008988 <_dtoa_r+0x8d8>
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800887c:	0d1b      	lsrs	r3, r3, #20
 800887e:	051b      	lsls	r3, r3, #20
 8008880:	b12b      	cbz	r3, 800888e <_dtoa_r+0x7de>
 8008882:	9b08      	ldr	r3, [sp, #32]
 8008884:	3301      	adds	r3, #1
 8008886:	9308      	str	r3, [sp, #32]
 8008888:	f108 0801 	add.w	r8, r8, #1
 800888c:	2301      	movs	r3, #1
 800888e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 81b0 	beq.w	8008bf8 <_dtoa_r+0xb48>
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800889e:	6918      	ldr	r0, [r3, #16]
 80088a0:	f000 fb72 	bl	8008f88 <__hi0bits>
 80088a4:	f1c0 0020 	rsb	r0, r0, #32
 80088a8:	9b08      	ldr	r3, [sp, #32]
 80088aa:	4418      	add	r0, r3
 80088ac:	f010 001f 	ands.w	r0, r0, #31
 80088b0:	d077      	beq.n	80089a2 <_dtoa_r+0x8f2>
 80088b2:	f1c0 0320 	rsb	r3, r0, #32
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	dd6b      	ble.n	8008992 <_dtoa_r+0x8e2>
 80088ba:	9b08      	ldr	r3, [sp, #32]
 80088bc:	f1c0 001c 	rsb	r0, r0, #28
 80088c0:	4403      	add	r3, r0
 80088c2:	4480      	add	r8, r0
 80088c4:	4406      	add	r6, r0
 80088c6:	9308      	str	r3, [sp, #32]
 80088c8:	f1b8 0f00 	cmp.w	r8, #0
 80088cc:	dd05      	ble.n	80088da <_dtoa_r+0x82a>
 80088ce:	4649      	mov	r1, r9
 80088d0:	4642      	mov	r2, r8
 80088d2:	4658      	mov	r0, fp
 80088d4:	f000 fcbe 	bl	8009254 <__lshift>
 80088d8:	4681      	mov	r9, r0
 80088da:	9b08      	ldr	r3, [sp, #32]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dd05      	ble.n	80088ec <_dtoa_r+0x83c>
 80088e0:	4621      	mov	r1, r4
 80088e2:	461a      	mov	r2, r3
 80088e4:	4658      	mov	r0, fp
 80088e6:	f000 fcb5 	bl	8009254 <__lshift>
 80088ea:	4604      	mov	r4, r0
 80088ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d059      	beq.n	80089a6 <_dtoa_r+0x8f6>
 80088f2:	4621      	mov	r1, r4
 80088f4:	4648      	mov	r0, r9
 80088f6:	f000 fd19 	bl	800932c <__mcmp>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	da53      	bge.n	80089a6 <_dtoa_r+0x8f6>
 80088fe:	1e7b      	subs	r3, r7, #1
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	4649      	mov	r1, r9
 8008904:	2300      	movs	r3, #0
 8008906:	220a      	movs	r2, #10
 8008908:	4658      	mov	r0, fp
 800890a:	f000 faf7 	bl	8008efc <__multadd>
 800890e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008910:	4681      	mov	r9, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 8172 	beq.w	8008bfc <_dtoa_r+0xb4c>
 8008918:	2300      	movs	r3, #0
 800891a:	4629      	mov	r1, r5
 800891c:	220a      	movs	r2, #10
 800891e:	4658      	mov	r0, fp
 8008920:	f000 faec 	bl	8008efc <__multadd>
 8008924:	9b00      	ldr	r3, [sp, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	4605      	mov	r5, r0
 800892a:	dc67      	bgt.n	80089fc <_dtoa_r+0x94c>
 800892c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800892e:	2b02      	cmp	r3, #2
 8008930:	dc41      	bgt.n	80089b6 <_dtoa_r+0x906>
 8008932:	e063      	b.n	80089fc <_dtoa_r+0x94c>
 8008934:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008936:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800893a:	e746      	b.n	80087ca <_dtoa_r+0x71a>
 800893c:	9b07      	ldr	r3, [sp, #28]
 800893e:	1e5c      	subs	r4, r3, #1
 8008940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008942:	42a3      	cmp	r3, r4
 8008944:	bfbf      	itttt	lt
 8008946:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008948:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800894a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800894c:	1ae3      	sublt	r3, r4, r3
 800894e:	bfb4      	ite	lt
 8008950:	18d2      	addlt	r2, r2, r3
 8008952:	1b1c      	subge	r4, r3, r4
 8008954:	9b07      	ldr	r3, [sp, #28]
 8008956:	bfbc      	itt	lt
 8008958:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800895a:	2400      	movlt	r4, #0
 800895c:	2b00      	cmp	r3, #0
 800895e:	bfb5      	itete	lt
 8008960:	eba8 0603 	sublt.w	r6, r8, r3
 8008964:	9b07      	ldrge	r3, [sp, #28]
 8008966:	2300      	movlt	r3, #0
 8008968:	4646      	movge	r6, r8
 800896a:	e730      	b.n	80087ce <_dtoa_r+0x71e>
 800896c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800896e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008970:	4646      	mov	r6, r8
 8008972:	e735      	b.n	80087e0 <_dtoa_r+0x730>
 8008974:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008976:	e75c      	b.n	8008832 <_dtoa_r+0x782>
 8008978:	2300      	movs	r3, #0
 800897a:	e788      	b.n	800888e <_dtoa_r+0x7de>
 800897c:	3fe00000 	.word	0x3fe00000
 8008980:	40240000 	.word	0x40240000
 8008984:	40140000 	.word	0x40140000
 8008988:	9b02      	ldr	r3, [sp, #8]
 800898a:	e780      	b.n	800888e <_dtoa_r+0x7de>
 800898c:	2300      	movs	r3, #0
 800898e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008990:	e782      	b.n	8008898 <_dtoa_r+0x7e8>
 8008992:	d099      	beq.n	80088c8 <_dtoa_r+0x818>
 8008994:	9a08      	ldr	r2, [sp, #32]
 8008996:	331c      	adds	r3, #28
 8008998:	441a      	add	r2, r3
 800899a:	4498      	add	r8, r3
 800899c:	441e      	add	r6, r3
 800899e:	9208      	str	r2, [sp, #32]
 80089a0:	e792      	b.n	80088c8 <_dtoa_r+0x818>
 80089a2:	4603      	mov	r3, r0
 80089a4:	e7f6      	b.n	8008994 <_dtoa_r+0x8e4>
 80089a6:	9b07      	ldr	r3, [sp, #28]
 80089a8:	9704      	str	r7, [sp, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	dc20      	bgt.n	80089f0 <_dtoa_r+0x940>
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	dd1e      	ble.n	80089f4 <_dtoa_r+0x944>
 80089b6:	9b00      	ldr	r3, [sp, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f47f aec0 	bne.w	800873e <_dtoa_r+0x68e>
 80089be:	4621      	mov	r1, r4
 80089c0:	2205      	movs	r2, #5
 80089c2:	4658      	mov	r0, fp
 80089c4:	f000 fa9a 	bl	8008efc <__multadd>
 80089c8:	4601      	mov	r1, r0
 80089ca:	4604      	mov	r4, r0
 80089cc:	4648      	mov	r0, r9
 80089ce:	f000 fcad 	bl	800932c <__mcmp>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f77f aeb3 	ble.w	800873e <_dtoa_r+0x68e>
 80089d8:	4656      	mov	r6, sl
 80089da:	2331      	movs	r3, #49	@ 0x31
 80089dc:	f806 3b01 	strb.w	r3, [r6], #1
 80089e0:	9b04      	ldr	r3, [sp, #16]
 80089e2:	3301      	adds	r3, #1
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	e6ae      	b.n	8008746 <_dtoa_r+0x696>
 80089e8:	9c07      	ldr	r4, [sp, #28]
 80089ea:	9704      	str	r7, [sp, #16]
 80089ec:	4625      	mov	r5, r4
 80089ee:	e7f3      	b.n	80089d8 <_dtoa_r+0x928>
 80089f0:	9b07      	ldr	r3, [sp, #28]
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 8104 	beq.w	8008c04 <_dtoa_r+0xb54>
 80089fc:	2e00      	cmp	r6, #0
 80089fe:	dd05      	ble.n	8008a0c <_dtoa_r+0x95c>
 8008a00:	4629      	mov	r1, r5
 8008a02:	4632      	mov	r2, r6
 8008a04:	4658      	mov	r0, fp
 8008a06:	f000 fc25 	bl	8009254 <__lshift>
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d05a      	beq.n	8008ac8 <_dtoa_r+0xa18>
 8008a12:	6869      	ldr	r1, [r5, #4]
 8008a14:	4658      	mov	r0, fp
 8008a16:	f000 fa0f 	bl	8008e38 <_Balloc>
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	b928      	cbnz	r0, 8008a2a <_dtoa_r+0x97a>
 8008a1e:	4b84      	ldr	r3, [pc, #528]	@ (8008c30 <_dtoa_r+0xb80>)
 8008a20:	4602      	mov	r2, r0
 8008a22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a26:	f7ff bb5a 	b.w	80080de <_dtoa_r+0x2e>
 8008a2a:	692a      	ldr	r2, [r5, #16]
 8008a2c:	3202      	adds	r2, #2
 8008a2e:	0092      	lsls	r2, r2, #2
 8008a30:	f105 010c 	add.w	r1, r5, #12
 8008a34:	300c      	adds	r0, #12
 8008a36:	f7ff faa2 	bl	8007f7e <memcpy>
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4658      	mov	r0, fp
 8008a40:	f000 fc08 	bl	8009254 <__lshift>
 8008a44:	f10a 0301 	add.w	r3, sl, #1
 8008a48:	9307      	str	r3, [sp, #28]
 8008a4a:	9b00      	ldr	r3, [sp, #0]
 8008a4c:	4453      	add	r3, sl
 8008a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a50:	9b02      	ldr	r3, [sp, #8]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	462f      	mov	r7, r5
 8008a58:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	4621      	mov	r1, r4
 8008a60:	3b01      	subs	r3, #1
 8008a62:	4648      	mov	r0, r9
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	f7ff fa98 	bl	8007f9a <quorem>
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	9002      	str	r0, [sp, #8]
 8008a6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a72:	4648      	mov	r0, r9
 8008a74:	f000 fc5a 	bl	800932c <__mcmp>
 8008a78:	462a      	mov	r2, r5
 8008a7a:	9008      	str	r0, [sp, #32]
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4658      	mov	r0, fp
 8008a80:	f000 fc70 	bl	8009364 <__mdiff>
 8008a84:	68c2      	ldr	r2, [r0, #12]
 8008a86:	4606      	mov	r6, r0
 8008a88:	bb02      	cbnz	r2, 8008acc <_dtoa_r+0xa1c>
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	4648      	mov	r0, r9
 8008a8e:	f000 fc4d 	bl	800932c <__mcmp>
 8008a92:	4602      	mov	r2, r0
 8008a94:	4631      	mov	r1, r6
 8008a96:	4658      	mov	r0, fp
 8008a98:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a9a:	f000 fa0d 	bl	8008eb8 <_Bfree>
 8008a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008aa2:	9e07      	ldr	r6, [sp, #28]
 8008aa4:	ea43 0102 	orr.w	r1, r3, r2
 8008aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aaa:	4319      	orrs	r1, r3
 8008aac:	d110      	bne.n	8008ad0 <_dtoa_r+0xa20>
 8008aae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ab2:	d029      	beq.n	8008b08 <_dtoa_r+0xa58>
 8008ab4:	9b08      	ldr	r3, [sp, #32]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	dd02      	ble.n	8008ac0 <_dtoa_r+0xa10>
 8008aba:	9b02      	ldr	r3, [sp, #8]
 8008abc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ac0:	9b00      	ldr	r3, [sp, #0]
 8008ac2:	f883 8000 	strb.w	r8, [r3]
 8008ac6:	e63f      	b.n	8008748 <_dtoa_r+0x698>
 8008ac8:	4628      	mov	r0, r5
 8008aca:	e7bb      	b.n	8008a44 <_dtoa_r+0x994>
 8008acc:	2201      	movs	r2, #1
 8008ace:	e7e1      	b.n	8008a94 <_dtoa_r+0x9e4>
 8008ad0:	9b08      	ldr	r3, [sp, #32]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	db04      	blt.n	8008ae0 <_dtoa_r+0xa30>
 8008ad6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ad8:	430b      	orrs	r3, r1
 8008ada:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008adc:	430b      	orrs	r3, r1
 8008ade:	d120      	bne.n	8008b22 <_dtoa_r+0xa72>
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	dded      	ble.n	8008ac0 <_dtoa_r+0xa10>
 8008ae4:	4649      	mov	r1, r9
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	4658      	mov	r0, fp
 8008aea:	f000 fbb3 	bl	8009254 <__lshift>
 8008aee:	4621      	mov	r1, r4
 8008af0:	4681      	mov	r9, r0
 8008af2:	f000 fc1b 	bl	800932c <__mcmp>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	dc03      	bgt.n	8008b02 <_dtoa_r+0xa52>
 8008afa:	d1e1      	bne.n	8008ac0 <_dtoa_r+0xa10>
 8008afc:	f018 0f01 	tst.w	r8, #1
 8008b00:	d0de      	beq.n	8008ac0 <_dtoa_r+0xa10>
 8008b02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b06:	d1d8      	bne.n	8008aba <_dtoa_r+0xa0a>
 8008b08:	9a00      	ldr	r2, [sp, #0]
 8008b0a:	2339      	movs	r3, #57	@ 0x39
 8008b0c:	7013      	strb	r3, [r2, #0]
 8008b0e:	4633      	mov	r3, r6
 8008b10:	461e      	mov	r6, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b18:	2a39      	cmp	r2, #57	@ 0x39
 8008b1a:	d052      	beq.n	8008bc2 <_dtoa_r+0xb12>
 8008b1c:	3201      	adds	r2, #1
 8008b1e:	701a      	strb	r2, [r3, #0]
 8008b20:	e612      	b.n	8008748 <_dtoa_r+0x698>
 8008b22:	2a00      	cmp	r2, #0
 8008b24:	dd07      	ble.n	8008b36 <_dtoa_r+0xa86>
 8008b26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b2a:	d0ed      	beq.n	8008b08 <_dtoa_r+0xa58>
 8008b2c:	9a00      	ldr	r2, [sp, #0]
 8008b2e:	f108 0301 	add.w	r3, r8, #1
 8008b32:	7013      	strb	r3, [r2, #0]
 8008b34:	e608      	b.n	8008748 <_dtoa_r+0x698>
 8008b36:	9b07      	ldr	r3, [sp, #28]
 8008b38:	9a07      	ldr	r2, [sp, #28]
 8008b3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d028      	beq.n	8008b96 <_dtoa_r+0xae6>
 8008b44:	4649      	mov	r1, r9
 8008b46:	2300      	movs	r3, #0
 8008b48:	220a      	movs	r2, #10
 8008b4a:	4658      	mov	r0, fp
 8008b4c:	f000 f9d6 	bl	8008efc <__multadd>
 8008b50:	42af      	cmp	r7, r5
 8008b52:	4681      	mov	r9, r0
 8008b54:	f04f 0300 	mov.w	r3, #0
 8008b58:	f04f 020a 	mov.w	r2, #10
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	4658      	mov	r0, fp
 8008b60:	d107      	bne.n	8008b72 <_dtoa_r+0xac2>
 8008b62:	f000 f9cb 	bl	8008efc <__multadd>
 8008b66:	4607      	mov	r7, r0
 8008b68:	4605      	mov	r5, r0
 8008b6a:	9b07      	ldr	r3, [sp, #28]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	9307      	str	r3, [sp, #28]
 8008b70:	e774      	b.n	8008a5c <_dtoa_r+0x9ac>
 8008b72:	f000 f9c3 	bl	8008efc <__multadd>
 8008b76:	4629      	mov	r1, r5
 8008b78:	4607      	mov	r7, r0
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	220a      	movs	r2, #10
 8008b7e:	4658      	mov	r0, fp
 8008b80:	f000 f9bc 	bl	8008efc <__multadd>
 8008b84:	4605      	mov	r5, r0
 8008b86:	e7f0      	b.n	8008b6a <_dtoa_r+0xaba>
 8008b88:	9b00      	ldr	r3, [sp, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bfcc      	ite	gt
 8008b8e:	461e      	movgt	r6, r3
 8008b90:	2601      	movle	r6, #1
 8008b92:	4456      	add	r6, sl
 8008b94:	2700      	movs	r7, #0
 8008b96:	4649      	mov	r1, r9
 8008b98:	2201      	movs	r2, #1
 8008b9a:	4658      	mov	r0, fp
 8008b9c:	f000 fb5a 	bl	8009254 <__lshift>
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4681      	mov	r9, r0
 8008ba4:	f000 fbc2 	bl	800932c <__mcmp>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	dcb0      	bgt.n	8008b0e <_dtoa_r+0xa5e>
 8008bac:	d102      	bne.n	8008bb4 <_dtoa_r+0xb04>
 8008bae:	f018 0f01 	tst.w	r8, #1
 8008bb2:	d1ac      	bne.n	8008b0e <_dtoa_r+0xa5e>
 8008bb4:	4633      	mov	r3, r6
 8008bb6:	461e      	mov	r6, r3
 8008bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bbc:	2a30      	cmp	r2, #48	@ 0x30
 8008bbe:	d0fa      	beq.n	8008bb6 <_dtoa_r+0xb06>
 8008bc0:	e5c2      	b.n	8008748 <_dtoa_r+0x698>
 8008bc2:	459a      	cmp	sl, r3
 8008bc4:	d1a4      	bne.n	8008b10 <_dtoa_r+0xa60>
 8008bc6:	9b04      	ldr	r3, [sp, #16]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	9304      	str	r3, [sp, #16]
 8008bcc:	2331      	movs	r3, #49	@ 0x31
 8008bce:	f88a 3000 	strb.w	r3, [sl]
 8008bd2:	e5b9      	b.n	8008748 <_dtoa_r+0x698>
 8008bd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008c34 <_dtoa_r+0xb84>
 8008bda:	b11b      	cbz	r3, 8008be4 <_dtoa_r+0xb34>
 8008bdc:	f10a 0308 	add.w	r3, sl, #8
 8008be0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	4650      	mov	r0, sl
 8008be6:	b019      	add	sp, #100	@ 0x64
 8008be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	f77f ae37 	ble.w	8008862 <_dtoa_r+0x7b2>
 8008bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bf8:	2001      	movs	r0, #1
 8008bfa:	e655      	b.n	80088a8 <_dtoa_r+0x7f8>
 8008bfc:	9b00      	ldr	r3, [sp, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f77f aed6 	ble.w	80089b0 <_dtoa_r+0x900>
 8008c04:	4656      	mov	r6, sl
 8008c06:	4621      	mov	r1, r4
 8008c08:	4648      	mov	r0, r9
 8008c0a:	f7ff f9c6 	bl	8007f9a <quorem>
 8008c0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c12:	f806 8b01 	strb.w	r8, [r6], #1
 8008c16:	9b00      	ldr	r3, [sp, #0]
 8008c18:	eba6 020a 	sub.w	r2, r6, sl
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	ddb3      	ble.n	8008b88 <_dtoa_r+0xad8>
 8008c20:	4649      	mov	r1, r9
 8008c22:	2300      	movs	r3, #0
 8008c24:	220a      	movs	r2, #10
 8008c26:	4658      	mov	r0, fp
 8008c28:	f000 f968 	bl	8008efc <__multadd>
 8008c2c:	4681      	mov	r9, r0
 8008c2e:	e7ea      	b.n	8008c06 <_dtoa_r+0xb56>
 8008c30:	0800a160 	.word	0x0800a160
 8008c34:	0800a0e4 	.word	0x0800a0e4

08008c38 <_free_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	d041      	beq.n	8008cc4 <_free_r+0x8c>
 8008c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c44:	1f0c      	subs	r4, r1, #4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bfb8      	it	lt
 8008c4a:	18e4      	addlt	r4, r4, r3
 8008c4c:	f000 f8e8 	bl	8008e20 <__malloc_lock>
 8008c50:	4a1d      	ldr	r2, [pc, #116]	@ (8008cc8 <_free_r+0x90>)
 8008c52:	6813      	ldr	r3, [r2, #0]
 8008c54:	b933      	cbnz	r3, 8008c64 <_free_r+0x2c>
 8008c56:	6063      	str	r3, [r4, #4]
 8008c58:	6014      	str	r4, [r2, #0]
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c60:	f000 b8e4 	b.w	8008e2c <__malloc_unlock>
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d908      	bls.n	8008c7a <_free_r+0x42>
 8008c68:	6820      	ldr	r0, [r4, #0]
 8008c6a:	1821      	adds	r1, r4, r0
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	bf01      	itttt	eq
 8008c70:	6819      	ldreq	r1, [r3, #0]
 8008c72:	685b      	ldreq	r3, [r3, #4]
 8008c74:	1809      	addeq	r1, r1, r0
 8008c76:	6021      	streq	r1, [r4, #0]
 8008c78:	e7ed      	b.n	8008c56 <_free_r+0x1e>
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	b10b      	cbz	r3, 8008c84 <_free_r+0x4c>
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	d9fa      	bls.n	8008c7a <_free_r+0x42>
 8008c84:	6811      	ldr	r1, [r2, #0]
 8008c86:	1850      	adds	r0, r2, r1
 8008c88:	42a0      	cmp	r0, r4
 8008c8a:	d10b      	bne.n	8008ca4 <_free_r+0x6c>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	4401      	add	r1, r0
 8008c90:	1850      	adds	r0, r2, r1
 8008c92:	4283      	cmp	r3, r0
 8008c94:	6011      	str	r1, [r2, #0]
 8008c96:	d1e0      	bne.n	8008c5a <_free_r+0x22>
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	6053      	str	r3, [r2, #4]
 8008c9e:	4408      	add	r0, r1
 8008ca0:	6010      	str	r0, [r2, #0]
 8008ca2:	e7da      	b.n	8008c5a <_free_r+0x22>
 8008ca4:	d902      	bls.n	8008cac <_free_r+0x74>
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	602b      	str	r3, [r5, #0]
 8008caa:	e7d6      	b.n	8008c5a <_free_r+0x22>
 8008cac:	6820      	ldr	r0, [r4, #0]
 8008cae:	1821      	adds	r1, r4, r0
 8008cb0:	428b      	cmp	r3, r1
 8008cb2:	bf04      	itt	eq
 8008cb4:	6819      	ldreq	r1, [r3, #0]
 8008cb6:	685b      	ldreq	r3, [r3, #4]
 8008cb8:	6063      	str	r3, [r4, #4]
 8008cba:	bf04      	itt	eq
 8008cbc:	1809      	addeq	r1, r1, r0
 8008cbe:	6021      	streq	r1, [r4, #0]
 8008cc0:	6054      	str	r4, [r2, #4]
 8008cc2:	e7ca      	b.n	8008c5a <_free_r+0x22>
 8008cc4:	bd38      	pop	{r3, r4, r5, pc}
 8008cc6:	bf00      	nop
 8008cc8:	200006e4 	.word	0x200006e4

08008ccc <malloc>:
 8008ccc:	4b02      	ldr	r3, [pc, #8]	@ (8008cd8 <malloc+0xc>)
 8008cce:	4601      	mov	r1, r0
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f000 b825 	b.w	8008d20 <_malloc_r>
 8008cd6:	bf00      	nop
 8008cd8:	2000002c 	.word	0x2000002c

08008cdc <sbrk_aligned>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	4e0f      	ldr	r6, [pc, #60]	@ (8008d1c <sbrk_aligned+0x40>)
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	6831      	ldr	r1, [r6, #0]
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	b911      	cbnz	r1, 8008cee <sbrk_aligned+0x12>
 8008ce8:	f000 fe46 	bl	8009978 <_sbrk_r>
 8008cec:	6030      	str	r0, [r6, #0]
 8008cee:	4621      	mov	r1, r4
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f000 fe41 	bl	8009978 <_sbrk_r>
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	d103      	bne.n	8008d02 <sbrk_aligned+0x26>
 8008cfa:	f04f 34ff 	mov.w	r4, #4294967295
 8008cfe:	4620      	mov	r0, r4
 8008d00:	bd70      	pop	{r4, r5, r6, pc}
 8008d02:	1cc4      	adds	r4, r0, #3
 8008d04:	f024 0403 	bic.w	r4, r4, #3
 8008d08:	42a0      	cmp	r0, r4
 8008d0a:	d0f8      	beq.n	8008cfe <sbrk_aligned+0x22>
 8008d0c:	1a21      	subs	r1, r4, r0
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f000 fe32 	bl	8009978 <_sbrk_r>
 8008d14:	3001      	adds	r0, #1
 8008d16:	d1f2      	bne.n	8008cfe <sbrk_aligned+0x22>
 8008d18:	e7ef      	b.n	8008cfa <sbrk_aligned+0x1e>
 8008d1a:	bf00      	nop
 8008d1c:	200006e0 	.word	0x200006e0

08008d20 <_malloc_r>:
 8008d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d24:	1ccd      	adds	r5, r1, #3
 8008d26:	f025 0503 	bic.w	r5, r5, #3
 8008d2a:	3508      	adds	r5, #8
 8008d2c:	2d0c      	cmp	r5, #12
 8008d2e:	bf38      	it	cc
 8008d30:	250c      	movcc	r5, #12
 8008d32:	2d00      	cmp	r5, #0
 8008d34:	4606      	mov	r6, r0
 8008d36:	db01      	blt.n	8008d3c <_malloc_r+0x1c>
 8008d38:	42a9      	cmp	r1, r5
 8008d3a:	d904      	bls.n	8008d46 <_malloc_r+0x26>
 8008d3c:	230c      	movs	r3, #12
 8008d3e:	6033      	str	r3, [r6, #0]
 8008d40:	2000      	movs	r0, #0
 8008d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e1c <_malloc_r+0xfc>
 8008d4a:	f000 f869 	bl	8008e20 <__malloc_lock>
 8008d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d52:	461c      	mov	r4, r3
 8008d54:	bb44      	cbnz	r4, 8008da8 <_malloc_r+0x88>
 8008d56:	4629      	mov	r1, r5
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f7ff ffbf 	bl	8008cdc <sbrk_aligned>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	4604      	mov	r4, r0
 8008d62:	d158      	bne.n	8008e16 <_malloc_r+0xf6>
 8008d64:	f8d8 4000 	ldr.w	r4, [r8]
 8008d68:	4627      	mov	r7, r4
 8008d6a:	2f00      	cmp	r7, #0
 8008d6c:	d143      	bne.n	8008df6 <_malloc_r+0xd6>
 8008d6e:	2c00      	cmp	r4, #0
 8008d70:	d04b      	beq.n	8008e0a <_malloc_r+0xea>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	4639      	mov	r1, r7
 8008d76:	4630      	mov	r0, r6
 8008d78:	eb04 0903 	add.w	r9, r4, r3
 8008d7c:	f000 fdfc 	bl	8009978 <_sbrk_r>
 8008d80:	4581      	cmp	r9, r0
 8008d82:	d142      	bne.n	8008e0a <_malloc_r+0xea>
 8008d84:	6821      	ldr	r1, [r4, #0]
 8008d86:	1a6d      	subs	r5, r5, r1
 8008d88:	4629      	mov	r1, r5
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f7ff ffa6 	bl	8008cdc <sbrk_aligned>
 8008d90:	3001      	adds	r0, #1
 8008d92:	d03a      	beq.n	8008e0a <_malloc_r+0xea>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	442b      	add	r3, r5
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	bb62      	cbnz	r2, 8008dfc <_malloc_r+0xdc>
 8008da2:	f8c8 7000 	str.w	r7, [r8]
 8008da6:	e00f      	b.n	8008dc8 <_malloc_r+0xa8>
 8008da8:	6822      	ldr	r2, [r4, #0]
 8008daa:	1b52      	subs	r2, r2, r5
 8008dac:	d420      	bmi.n	8008df0 <_malloc_r+0xd0>
 8008dae:	2a0b      	cmp	r2, #11
 8008db0:	d917      	bls.n	8008de2 <_malloc_r+0xc2>
 8008db2:	1961      	adds	r1, r4, r5
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	6025      	str	r5, [r4, #0]
 8008db8:	bf18      	it	ne
 8008dba:	6059      	strne	r1, [r3, #4]
 8008dbc:	6863      	ldr	r3, [r4, #4]
 8008dbe:	bf08      	it	eq
 8008dc0:	f8c8 1000 	streq.w	r1, [r8]
 8008dc4:	5162      	str	r2, [r4, r5]
 8008dc6:	604b      	str	r3, [r1, #4]
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f000 f82f 	bl	8008e2c <__malloc_unlock>
 8008dce:	f104 000b 	add.w	r0, r4, #11
 8008dd2:	1d23      	adds	r3, r4, #4
 8008dd4:	f020 0007 	bic.w	r0, r0, #7
 8008dd8:	1ac2      	subs	r2, r0, r3
 8008dda:	bf1c      	itt	ne
 8008ddc:	1a1b      	subne	r3, r3, r0
 8008dde:	50a3      	strne	r3, [r4, r2]
 8008de0:	e7af      	b.n	8008d42 <_malloc_r+0x22>
 8008de2:	6862      	ldr	r2, [r4, #4]
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	bf0c      	ite	eq
 8008de8:	f8c8 2000 	streq.w	r2, [r8]
 8008dec:	605a      	strne	r2, [r3, #4]
 8008dee:	e7eb      	b.n	8008dc8 <_malloc_r+0xa8>
 8008df0:	4623      	mov	r3, r4
 8008df2:	6864      	ldr	r4, [r4, #4]
 8008df4:	e7ae      	b.n	8008d54 <_malloc_r+0x34>
 8008df6:	463c      	mov	r4, r7
 8008df8:	687f      	ldr	r7, [r7, #4]
 8008dfa:	e7b6      	b.n	8008d6a <_malloc_r+0x4a>
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	42a3      	cmp	r3, r4
 8008e02:	d1fb      	bne.n	8008dfc <_malloc_r+0xdc>
 8008e04:	2300      	movs	r3, #0
 8008e06:	6053      	str	r3, [r2, #4]
 8008e08:	e7de      	b.n	8008dc8 <_malloc_r+0xa8>
 8008e0a:	230c      	movs	r3, #12
 8008e0c:	6033      	str	r3, [r6, #0]
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f000 f80c 	bl	8008e2c <__malloc_unlock>
 8008e14:	e794      	b.n	8008d40 <_malloc_r+0x20>
 8008e16:	6005      	str	r5, [r0, #0]
 8008e18:	e7d6      	b.n	8008dc8 <_malloc_r+0xa8>
 8008e1a:	bf00      	nop
 8008e1c:	200006e4 	.word	0x200006e4

08008e20 <__malloc_lock>:
 8008e20:	4801      	ldr	r0, [pc, #4]	@ (8008e28 <__malloc_lock+0x8>)
 8008e22:	f7ff b8aa 	b.w	8007f7a <__retarget_lock_acquire_recursive>
 8008e26:	bf00      	nop
 8008e28:	200006dc 	.word	0x200006dc

08008e2c <__malloc_unlock>:
 8008e2c:	4801      	ldr	r0, [pc, #4]	@ (8008e34 <__malloc_unlock+0x8>)
 8008e2e:	f7ff b8a5 	b.w	8007f7c <__retarget_lock_release_recursive>
 8008e32:	bf00      	nop
 8008e34:	200006dc 	.word	0x200006dc

08008e38 <_Balloc>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	69c6      	ldr	r6, [r0, #28]
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	460d      	mov	r5, r1
 8008e40:	b976      	cbnz	r6, 8008e60 <_Balloc+0x28>
 8008e42:	2010      	movs	r0, #16
 8008e44:	f7ff ff42 	bl	8008ccc <malloc>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	61e0      	str	r0, [r4, #28]
 8008e4c:	b920      	cbnz	r0, 8008e58 <_Balloc+0x20>
 8008e4e:	4b18      	ldr	r3, [pc, #96]	@ (8008eb0 <_Balloc+0x78>)
 8008e50:	4818      	ldr	r0, [pc, #96]	@ (8008eb4 <_Balloc+0x7c>)
 8008e52:	216b      	movs	r1, #107	@ 0x6b
 8008e54:	f000 fda0 	bl	8009998 <__assert_func>
 8008e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e5c:	6006      	str	r6, [r0, #0]
 8008e5e:	60c6      	str	r6, [r0, #12]
 8008e60:	69e6      	ldr	r6, [r4, #28]
 8008e62:	68f3      	ldr	r3, [r6, #12]
 8008e64:	b183      	cbz	r3, 8008e88 <_Balloc+0x50>
 8008e66:	69e3      	ldr	r3, [r4, #28]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e6e:	b9b8      	cbnz	r0, 8008ea0 <_Balloc+0x68>
 8008e70:	2101      	movs	r1, #1
 8008e72:	fa01 f605 	lsl.w	r6, r1, r5
 8008e76:	1d72      	adds	r2, r6, #5
 8008e78:	0092      	lsls	r2, r2, #2
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 fdaa 	bl	80099d4 <_calloc_r>
 8008e80:	b160      	cbz	r0, 8008e9c <_Balloc+0x64>
 8008e82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e86:	e00e      	b.n	8008ea6 <_Balloc+0x6e>
 8008e88:	2221      	movs	r2, #33	@ 0x21
 8008e8a:	2104      	movs	r1, #4
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 fda1 	bl	80099d4 <_calloc_r>
 8008e92:	69e3      	ldr	r3, [r4, #28]
 8008e94:	60f0      	str	r0, [r6, #12]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1e4      	bne.n	8008e66 <_Balloc+0x2e>
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	6802      	ldr	r2, [r0, #0]
 8008ea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008eac:	e7f7      	b.n	8008e9e <_Balloc+0x66>
 8008eae:	bf00      	nop
 8008eb0:	0800a0f1 	.word	0x0800a0f1
 8008eb4:	0800a171 	.word	0x0800a171

08008eb8 <_Bfree>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	69c6      	ldr	r6, [r0, #28]
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	b976      	cbnz	r6, 8008ee0 <_Bfree+0x28>
 8008ec2:	2010      	movs	r0, #16
 8008ec4:	f7ff ff02 	bl	8008ccc <malloc>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	61e8      	str	r0, [r5, #28]
 8008ecc:	b920      	cbnz	r0, 8008ed8 <_Bfree+0x20>
 8008ece:	4b09      	ldr	r3, [pc, #36]	@ (8008ef4 <_Bfree+0x3c>)
 8008ed0:	4809      	ldr	r0, [pc, #36]	@ (8008ef8 <_Bfree+0x40>)
 8008ed2:	218f      	movs	r1, #143	@ 0x8f
 8008ed4:	f000 fd60 	bl	8009998 <__assert_func>
 8008ed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008edc:	6006      	str	r6, [r0, #0]
 8008ede:	60c6      	str	r6, [r0, #12]
 8008ee0:	b13c      	cbz	r4, 8008ef2 <_Bfree+0x3a>
 8008ee2:	69eb      	ldr	r3, [r5, #28]
 8008ee4:	6862      	ldr	r2, [r4, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008eec:	6021      	str	r1, [r4, #0]
 8008eee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	0800a0f1 	.word	0x0800a0f1
 8008ef8:	0800a171 	.word	0x0800a171

08008efc <__multadd>:
 8008efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f00:	690d      	ldr	r5, [r1, #16]
 8008f02:	4607      	mov	r7, r0
 8008f04:	460c      	mov	r4, r1
 8008f06:	461e      	mov	r6, r3
 8008f08:	f101 0c14 	add.w	ip, r1, #20
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	f8dc 3000 	ldr.w	r3, [ip]
 8008f12:	b299      	uxth	r1, r3
 8008f14:	fb02 6101 	mla	r1, r2, r1, r6
 8008f18:	0c1e      	lsrs	r6, r3, #16
 8008f1a:	0c0b      	lsrs	r3, r1, #16
 8008f1c:	fb02 3306 	mla	r3, r2, r6, r3
 8008f20:	b289      	uxth	r1, r1
 8008f22:	3001      	adds	r0, #1
 8008f24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f28:	4285      	cmp	r5, r0
 8008f2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008f2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f32:	dcec      	bgt.n	8008f0e <__multadd+0x12>
 8008f34:	b30e      	cbz	r6, 8008f7a <__multadd+0x7e>
 8008f36:	68a3      	ldr	r3, [r4, #8]
 8008f38:	42ab      	cmp	r3, r5
 8008f3a:	dc19      	bgt.n	8008f70 <__multadd+0x74>
 8008f3c:	6861      	ldr	r1, [r4, #4]
 8008f3e:	4638      	mov	r0, r7
 8008f40:	3101      	adds	r1, #1
 8008f42:	f7ff ff79 	bl	8008e38 <_Balloc>
 8008f46:	4680      	mov	r8, r0
 8008f48:	b928      	cbnz	r0, 8008f56 <__multadd+0x5a>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f80 <__multadd+0x84>)
 8008f4e:	480d      	ldr	r0, [pc, #52]	@ (8008f84 <__multadd+0x88>)
 8008f50:	21ba      	movs	r1, #186	@ 0xba
 8008f52:	f000 fd21 	bl	8009998 <__assert_func>
 8008f56:	6922      	ldr	r2, [r4, #16]
 8008f58:	3202      	adds	r2, #2
 8008f5a:	f104 010c 	add.w	r1, r4, #12
 8008f5e:	0092      	lsls	r2, r2, #2
 8008f60:	300c      	adds	r0, #12
 8008f62:	f7ff f80c 	bl	8007f7e <memcpy>
 8008f66:	4621      	mov	r1, r4
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f7ff ffa5 	bl	8008eb8 <_Bfree>
 8008f6e:	4644      	mov	r4, r8
 8008f70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f74:	3501      	adds	r5, #1
 8008f76:	615e      	str	r6, [r3, #20]
 8008f78:	6125      	str	r5, [r4, #16]
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f80:	0800a160 	.word	0x0800a160
 8008f84:	0800a171 	.word	0x0800a171

08008f88 <__hi0bits>:
 8008f88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	bf36      	itet	cc
 8008f90:	0403      	lslcc	r3, r0, #16
 8008f92:	2000      	movcs	r0, #0
 8008f94:	2010      	movcc	r0, #16
 8008f96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f9a:	bf3c      	itt	cc
 8008f9c:	021b      	lslcc	r3, r3, #8
 8008f9e:	3008      	addcc	r0, #8
 8008fa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fa4:	bf3c      	itt	cc
 8008fa6:	011b      	lslcc	r3, r3, #4
 8008fa8:	3004      	addcc	r0, #4
 8008faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fae:	bf3c      	itt	cc
 8008fb0:	009b      	lslcc	r3, r3, #2
 8008fb2:	3002      	addcc	r0, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	db05      	blt.n	8008fc4 <__hi0bits+0x3c>
 8008fb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008fbc:	f100 0001 	add.w	r0, r0, #1
 8008fc0:	bf08      	it	eq
 8008fc2:	2020      	moveq	r0, #32
 8008fc4:	4770      	bx	lr

08008fc6 <__lo0bits>:
 8008fc6:	6803      	ldr	r3, [r0, #0]
 8008fc8:	4602      	mov	r2, r0
 8008fca:	f013 0007 	ands.w	r0, r3, #7
 8008fce:	d00b      	beq.n	8008fe8 <__lo0bits+0x22>
 8008fd0:	07d9      	lsls	r1, r3, #31
 8008fd2:	d421      	bmi.n	8009018 <__lo0bits+0x52>
 8008fd4:	0798      	lsls	r0, r3, #30
 8008fd6:	bf49      	itett	mi
 8008fd8:	085b      	lsrmi	r3, r3, #1
 8008fda:	089b      	lsrpl	r3, r3, #2
 8008fdc:	2001      	movmi	r0, #1
 8008fde:	6013      	strmi	r3, [r2, #0]
 8008fe0:	bf5c      	itt	pl
 8008fe2:	6013      	strpl	r3, [r2, #0]
 8008fe4:	2002      	movpl	r0, #2
 8008fe6:	4770      	bx	lr
 8008fe8:	b299      	uxth	r1, r3
 8008fea:	b909      	cbnz	r1, 8008ff0 <__lo0bits+0x2a>
 8008fec:	0c1b      	lsrs	r3, r3, #16
 8008fee:	2010      	movs	r0, #16
 8008ff0:	b2d9      	uxtb	r1, r3
 8008ff2:	b909      	cbnz	r1, 8008ff8 <__lo0bits+0x32>
 8008ff4:	3008      	adds	r0, #8
 8008ff6:	0a1b      	lsrs	r3, r3, #8
 8008ff8:	0719      	lsls	r1, r3, #28
 8008ffa:	bf04      	itt	eq
 8008ffc:	091b      	lsreq	r3, r3, #4
 8008ffe:	3004      	addeq	r0, #4
 8009000:	0799      	lsls	r1, r3, #30
 8009002:	bf04      	itt	eq
 8009004:	089b      	lsreq	r3, r3, #2
 8009006:	3002      	addeq	r0, #2
 8009008:	07d9      	lsls	r1, r3, #31
 800900a:	d403      	bmi.n	8009014 <__lo0bits+0x4e>
 800900c:	085b      	lsrs	r3, r3, #1
 800900e:	f100 0001 	add.w	r0, r0, #1
 8009012:	d003      	beq.n	800901c <__lo0bits+0x56>
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	4770      	bx	lr
 8009018:	2000      	movs	r0, #0
 800901a:	4770      	bx	lr
 800901c:	2020      	movs	r0, #32
 800901e:	4770      	bx	lr

08009020 <__i2b>:
 8009020:	b510      	push	{r4, lr}
 8009022:	460c      	mov	r4, r1
 8009024:	2101      	movs	r1, #1
 8009026:	f7ff ff07 	bl	8008e38 <_Balloc>
 800902a:	4602      	mov	r2, r0
 800902c:	b928      	cbnz	r0, 800903a <__i2b+0x1a>
 800902e:	4b05      	ldr	r3, [pc, #20]	@ (8009044 <__i2b+0x24>)
 8009030:	4805      	ldr	r0, [pc, #20]	@ (8009048 <__i2b+0x28>)
 8009032:	f240 1145 	movw	r1, #325	@ 0x145
 8009036:	f000 fcaf 	bl	8009998 <__assert_func>
 800903a:	2301      	movs	r3, #1
 800903c:	6144      	str	r4, [r0, #20]
 800903e:	6103      	str	r3, [r0, #16]
 8009040:	bd10      	pop	{r4, pc}
 8009042:	bf00      	nop
 8009044:	0800a160 	.word	0x0800a160
 8009048:	0800a171 	.word	0x0800a171

0800904c <__multiply>:
 800904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009050:	4614      	mov	r4, r2
 8009052:	690a      	ldr	r2, [r1, #16]
 8009054:	6923      	ldr	r3, [r4, #16]
 8009056:	429a      	cmp	r2, r3
 8009058:	bfa8      	it	ge
 800905a:	4623      	movge	r3, r4
 800905c:	460f      	mov	r7, r1
 800905e:	bfa4      	itt	ge
 8009060:	460c      	movge	r4, r1
 8009062:	461f      	movge	r7, r3
 8009064:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009068:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800906c:	68a3      	ldr	r3, [r4, #8]
 800906e:	6861      	ldr	r1, [r4, #4]
 8009070:	eb0a 0609 	add.w	r6, sl, r9
 8009074:	42b3      	cmp	r3, r6
 8009076:	b085      	sub	sp, #20
 8009078:	bfb8      	it	lt
 800907a:	3101      	addlt	r1, #1
 800907c:	f7ff fedc 	bl	8008e38 <_Balloc>
 8009080:	b930      	cbnz	r0, 8009090 <__multiply+0x44>
 8009082:	4602      	mov	r2, r0
 8009084:	4b44      	ldr	r3, [pc, #272]	@ (8009198 <__multiply+0x14c>)
 8009086:	4845      	ldr	r0, [pc, #276]	@ (800919c <__multiply+0x150>)
 8009088:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800908c:	f000 fc84 	bl	8009998 <__assert_func>
 8009090:	f100 0514 	add.w	r5, r0, #20
 8009094:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009098:	462b      	mov	r3, r5
 800909a:	2200      	movs	r2, #0
 800909c:	4543      	cmp	r3, r8
 800909e:	d321      	bcc.n	80090e4 <__multiply+0x98>
 80090a0:	f107 0114 	add.w	r1, r7, #20
 80090a4:	f104 0214 	add.w	r2, r4, #20
 80090a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80090ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80090b0:	9302      	str	r3, [sp, #8]
 80090b2:	1b13      	subs	r3, r2, r4
 80090b4:	3b15      	subs	r3, #21
 80090b6:	f023 0303 	bic.w	r3, r3, #3
 80090ba:	3304      	adds	r3, #4
 80090bc:	f104 0715 	add.w	r7, r4, #21
 80090c0:	42ba      	cmp	r2, r7
 80090c2:	bf38      	it	cc
 80090c4:	2304      	movcc	r3, #4
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	9b02      	ldr	r3, [sp, #8]
 80090ca:	9103      	str	r1, [sp, #12]
 80090cc:	428b      	cmp	r3, r1
 80090ce:	d80c      	bhi.n	80090ea <__multiply+0x9e>
 80090d0:	2e00      	cmp	r6, #0
 80090d2:	dd03      	ble.n	80090dc <__multiply+0x90>
 80090d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d05b      	beq.n	8009194 <__multiply+0x148>
 80090dc:	6106      	str	r6, [r0, #16]
 80090de:	b005      	add	sp, #20
 80090e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e4:	f843 2b04 	str.w	r2, [r3], #4
 80090e8:	e7d8      	b.n	800909c <__multiply+0x50>
 80090ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80090ee:	f1ba 0f00 	cmp.w	sl, #0
 80090f2:	d024      	beq.n	800913e <__multiply+0xf2>
 80090f4:	f104 0e14 	add.w	lr, r4, #20
 80090f8:	46a9      	mov	r9, r5
 80090fa:	f04f 0c00 	mov.w	ip, #0
 80090fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009102:	f8d9 3000 	ldr.w	r3, [r9]
 8009106:	fa1f fb87 	uxth.w	fp, r7
 800910a:	b29b      	uxth	r3, r3
 800910c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009110:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009114:	f8d9 7000 	ldr.w	r7, [r9]
 8009118:	4463      	add	r3, ip
 800911a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800911e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009122:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009126:	b29b      	uxth	r3, r3
 8009128:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800912c:	4572      	cmp	r2, lr
 800912e:	f849 3b04 	str.w	r3, [r9], #4
 8009132:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009136:	d8e2      	bhi.n	80090fe <__multiply+0xb2>
 8009138:	9b01      	ldr	r3, [sp, #4]
 800913a:	f845 c003 	str.w	ip, [r5, r3]
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009144:	3104      	adds	r1, #4
 8009146:	f1b9 0f00 	cmp.w	r9, #0
 800914a:	d021      	beq.n	8009190 <__multiply+0x144>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	f104 0c14 	add.w	ip, r4, #20
 8009152:	46ae      	mov	lr, r5
 8009154:	f04f 0a00 	mov.w	sl, #0
 8009158:	f8bc b000 	ldrh.w	fp, [ip]
 800915c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009160:	fb09 770b 	mla	r7, r9, fp, r7
 8009164:	4457      	add	r7, sl
 8009166:	b29b      	uxth	r3, r3
 8009168:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800916c:	f84e 3b04 	str.w	r3, [lr], #4
 8009170:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009178:	f8be 3000 	ldrh.w	r3, [lr]
 800917c:	fb09 330a 	mla	r3, r9, sl, r3
 8009180:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009184:	4562      	cmp	r2, ip
 8009186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800918a:	d8e5      	bhi.n	8009158 <__multiply+0x10c>
 800918c:	9f01      	ldr	r7, [sp, #4]
 800918e:	51eb      	str	r3, [r5, r7]
 8009190:	3504      	adds	r5, #4
 8009192:	e799      	b.n	80090c8 <__multiply+0x7c>
 8009194:	3e01      	subs	r6, #1
 8009196:	e79b      	b.n	80090d0 <__multiply+0x84>
 8009198:	0800a160 	.word	0x0800a160
 800919c:	0800a171 	.word	0x0800a171

080091a0 <__pow5mult>:
 80091a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a4:	4615      	mov	r5, r2
 80091a6:	f012 0203 	ands.w	r2, r2, #3
 80091aa:	4607      	mov	r7, r0
 80091ac:	460e      	mov	r6, r1
 80091ae:	d007      	beq.n	80091c0 <__pow5mult+0x20>
 80091b0:	4c25      	ldr	r4, [pc, #148]	@ (8009248 <__pow5mult+0xa8>)
 80091b2:	3a01      	subs	r2, #1
 80091b4:	2300      	movs	r3, #0
 80091b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091ba:	f7ff fe9f 	bl	8008efc <__multadd>
 80091be:	4606      	mov	r6, r0
 80091c0:	10ad      	asrs	r5, r5, #2
 80091c2:	d03d      	beq.n	8009240 <__pow5mult+0xa0>
 80091c4:	69fc      	ldr	r4, [r7, #28]
 80091c6:	b97c      	cbnz	r4, 80091e8 <__pow5mult+0x48>
 80091c8:	2010      	movs	r0, #16
 80091ca:	f7ff fd7f 	bl	8008ccc <malloc>
 80091ce:	4602      	mov	r2, r0
 80091d0:	61f8      	str	r0, [r7, #28]
 80091d2:	b928      	cbnz	r0, 80091e0 <__pow5mult+0x40>
 80091d4:	4b1d      	ldr	r3, [pc, #116]	@ (800924c <__pow5mult+0xac>)
 80091d6:	481e      	ldr	r0, [pc, #120]	@ (8009250 <__pow5mult+0xb0>)
 80091d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80091dc:	f000 fbdc 	bl	8009998 <__assert_func>
 80091e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091e4:	6004      	str	r4, [r0, #0]
 80091e6:	60c4      	str	r4, [r0, #12]
 80091e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80091ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091f0:	b94c      	cbnz	r4, 8009206 <__pow5mult+0x66>
 80091f2:	f240 2171 	movw	r1, #625	@ 0x271
 80091f6:	4638      	mov	r0, r7
 80091f8:	f7ff ff12 	bl	8009020 <__i2b>
 80091fc:	2300      	movs	r3, #0
 80091fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009202:	4604      	mov	r4, r0
 8009204:	6003      	str	r3, [r0, #0]
 8009206:	f04f 0900 	mov.w	r9, #0
 800920a:	07eb      	lsls	r3, r5, #31
 800920c:	d50a      	bpl.n	8009224 <__pow5mult+0x84>
 800920e:	4631      	mov	r1, r6
 8009210:	4622      	mov	r2, r4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff ff1a 	bl	800904c <__multiply>
 8009218:	4631      	mov	r1, r6
 800921a:	4680      	mov	r8, r0
 800921c:	4638      	mov	r0, r7
 800921e:	f7ff fe4b 	bl	8008eb8 <_Bfree>
 8009222:	4646      	mov	r6, r8
 8009224:	106d      	asrs	r5, r5, #1
 8009226:	d00b      	beq.n	8009240 <__pow5mult+0xa0>
 8009228:	6820      	ldr	r0, [r4, #0]
 800922a:	b938      	cbnz	r0, 800923c <__pow5mult+0x9c>
 800922c:	4622      	mov	r2, r4
 800922e:	4621      	mov	r1, r4
 8009230:	4638      	mov	r0, r7
 8009232:	f7ff ff0b 	bl	800904c <__multiply>
 8009236:	6020      	str	r0, [r4, #0]
 8009238:	f8c0 9000 	str.w	r9, [r0]
 800923c:	4604      	mov	r4, r0
 800923e:	e7e4      	b.n	800920a <__pow5mult+0x6a>
 8009240:	4630      	mov	r0, r6
 8009242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009246:	bf00      	nop
 8009248:	0800a1cc 	.word	0x0800a1cc
 800924c:	0800a0f1 	.word	0x0800a0f1
 8009250:	0800a171 	.word	0x0800a171

08009254 <__lshift>:
 8009254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009258:	460c      	mov	r4, r1
 800925a:	6849      	ldr	r1, [r1, #4]
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009262:	68a3      	ldr	r3, [r4, #8]
 8009264:	4607      	mov	r7, r0
 8009266:	4691      	mov	r9, r2
 8009268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800926c:	f108 0601 	add.w	r6, r8, #1
 8009270:	42b3      	cmp	r3, r6
 8009272:	db0b      	blt.n	800928c <__lshift+0x38>
 8009274:	4638      	mov	r0, r7
 8009276:	f7ff fddf 	bl	8008e38 <_Balloc>
 800927a:	4605      	mov	r5, r0
 800927c:	b948      	cbnz	r0, 8009292 <__lshift+0x3e>
 800927e:	4602      	mov	r2, r0
 8009280:	4b28      	ldr	r3, [pc, #160]	@ (8009324 <__lshift+0xd0>)
 8009282:	4829      	ldr	r0, [pc, #164]	@ (8009328 <__lshift+0xd4>)
 8009284:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009288:	f000 fb86 	bl	8009998 <__assert_func>
 800928c:	3101      	adds	r1, #1
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	e7ee      	b.n	8009270 <__lshift+0x1c>
 8009292:	2300      	movs	r3, #0
 8009294:	f100 0114 	add.w	r1, r0, #20
 8009298:	f100 0210 	add.w	r2, r0, #16
 800929c:	4618      	mov	r0, r3
 800929e:	4553      	cmp	r3, sl
 80092a0:	db33      	blt.n	800930a <__lshift+0xb6>
 80092a2:	6920      	ldr	r0, [r4, #16]
 80092a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092a8:	f104 0314 	add.w	r3, r4, #20
 80092ac:	f019 091f 	ands.w	r9, r9, #31
 80092b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092b8:	d02b      	beq.n	8009312 <__lshift+0xbe>
 80092ba:	f1c9 0e20 	rsb	lr, r9, #32
 80092be:	468a      	mov	sl, r1
 80092c0:	2200      	movs	r2, #0
 80092c2:	6818      	ldr	r0, [r3, #0]
 80092c4:	fa00 f009 	lsl.w	r0, r0, r9
 80092c8:	4310      	orrs	r0, r2
 80092ca:	f84a 0b04 	str.w	r0, [sl], #4
 80092ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80092d2:	459c      	cmp	ip, r3
 80092d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80092d8:	d8f3      	bhi.n	80092c2 <__lshift+0x6e>
 80092da:	ebac 0304 	sub.w	r3, ip, r4
 80092de:	3b15      	subs	r3, #21
 80092e0:	f023 0303 	bic.w	r3, r3, #3
 80092e4:	3304      	adds	r3, #4
 80092e6:	f104 0015 	add.w	r0, r4, #21
 80092ea:	4584      	cmp	ip, r0
 80092ec:	bf38      	it	cc
 80092ee:	2304      	movcc	r3, #4
 80092f0:	50ca      	str	r2, [r1, r3]
 80092f2:	b10a      	cbz	r2, 80092f8 <__lshift+0xa4>
 80092f4:	f108 0602 	add.w	r6, r8, #2
 80092f8:	3e01      	subs	r6, #1
 80092fa:	4638      	mov	r0, r7
 80092fc:	612e      	str	r6, [r5, #16]
 80092fe:	4621      	mov	r1, r4
 8009300:	f7ff fdda 	bl	8008eb8 <_Bfree>
 8009304:	4628      	mov	r0, r5
 8009306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800930a:	f842 0f04 	str.w	r0, [r2, #4]!
 800930e:	3301      	adds	r3, #1
 8009310:	e7c5      	b.n	800929e <__lshift+0x4a>
 8009312:	3904      	subs	r1, #4
 8009314:	f853 2b04 	ldr.w	r2, [r3], #4
 8009318:	f841 2f04 	str.w	r2, [r1, #4]!
 800931c:	459c      	cmp	ip, r3
 800931e:	d8f9      	bhi.n	8009314 <__lshift+0xc0>
 8009320:	e7ea      	b.n	80092f8 <__lshift+0xa4>
 8009322:	bf00      	nop
 8009324:	0800a160 	.word	0x0800a160
 8009328:	0800a171 	.word	0x0800a171

0800932c <__mcmp>:
 800932c:	690a      	ldr	r2, [r1, #16]
 800932e:	4603      	mov	r3, r0
 8009330:	6900      	ldr	r0, [r0, #16]
 8009332:	1a80      	subs	r0, r0, r2
 8009334:	b530      	push	{r4, r5, lr}
 8009336:	d10e      	bne.n	8009356 <__mcmp+0x2a>
 8009338:	3314      	adds	r3, #20
 800933a:	3114      	adds	r1, #20
 800933c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009340:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009344:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009348:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800934c:	4295      	cmp	r5, r2
 800934e:	d003      	beq.n	8009358 <__mcmp+0x2c>
 8009350:	d205      	bcs.n	800935e <__mcmp+0x32>
 8009352:	f04f 30ff 	mov.w	r0, #4294967295
 8009356:	bd30      	pop	{r4, r5, pc}
 8009358:	42a3      	cmp	r3, r4
 800935a:	d3f3      	bcc.n	8009344 <__mcmp+0x18>
 800935c:	e7fb      	b.n	8009356 <__mcmp+0x2a>
 800935e:	2001      	movs	r0, #1
 8009360:	e7f9      	b.n	8009356 <__mcmp+0x2a>
	...

08009364 <__mdiff>:
 8009364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	4689      	mov	r9, r1
 800936a:	4606      	mov	r6, r0
 800936c:	4611      	mov	r1, r2
 800936e:	4648      	mov	r0, r9
 8009370:	4614      	mov	r4, r2
 8009372:	f7ff ffdb 	bl	800932c <__mcmp>
 8009376:	1e05      	subs	r5, r0, #0
 8009378:	d112      	bne.n	80093a0 <__mdiff+0x3c>
 800937a:	4629      	mov	r1, r5
 800937c:	4630      	mov	r0, r6
 800937e:	f7ff fd5b 	bl	8008e38 <_Balloc>
 8009382:	4602      	mov	r2, r0
 8009384:	b928      	cbnz	r0, 8009392 <__mdiff+0x2e>
 8009386:	4b3f      	ldr	r3, [pc, #252]	@ (8009484 <__mdiff+0x120>)
 8009388:	f240 2137 	movw	r1, #567	@ 0x237
 800938c:	483e      	ldr	r0, [pc, #248]	@ (8009488 <__mdiff+0x124>)
 800938e:	f000 fb03 	bl	8009998 <__assert_func>
 8009392:	2301      	movs	r3, #1
 8009394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009398:	4610      	mov	r0, r2
 800939a:	b003      	add	sp, #12
 800939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a0:	bfbc      	itt	lt
 80093a2:	464b      	movlt	r3, r9
 80093a4:	46a1      	movlt	r9, r4
 80093a6:	4630      	mov	r0, r6
 80093a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093ac:	bfba      	itte	lt
 80093ae:	461c      	movlt	r4, r3
 80093b0:	2501      	movlt	r5, #1
 80093b2:	2500      	movge	r5, #0
 80093b4:	f7ff fd40 	bl	8008e38 <_Balloc>
 80093b8:	4602      	mov	r2, r0
 80093ba:	b918      	cbnz	r0, 80093c4 <__mdiff+0x60>
 80093bc:	4b31      	ldr	r3, [pc, #196]	@ (8009484 <__mdiff+0x120>)
 80093be:	f240 2145 	movw	r1, #581	@ 0x245
 80093c2:	e7e3      	b.n	800938c <__mdiff+0x28>
 80093c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80093c8:	6926      	ldr	r6, [r4, #16]
 80093ca:	60c5      	str	r5, [r0, #12]
 80093cc:	f109 0310 	add.w	r3, r9, #16
 80093d0:	f109 0514 	add.w	r5, r9, #20
 80093d4:	f104 0e14 	add.w	lr, r4, #20
 80093d8:	f100 0b14 	add.w	fp, r0, #20
 80093dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80093e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	46d9      	mov	r9, fp
 80093e8:	f04f 0c00 	mov.w	ip, #0
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80093f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80093f6:	9301      	str	r3, [sp, #4]
 80093f8:	fa1f f38a 	uxth.w	r3, sl
 80093fc:	4619      	mov	r1, r3
 80093fe:	b283      	uxth	r3, r0
 8009400:	1acb      	subs	r3, r1, r3
 8009402:	0c00      	lsrs	r0, r0, #16
 8009404:	4463      	add	r3, ip
 8009406:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800940a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800940e:	b29b      	uxth	r3, r3
 8009410:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009414:	4576      	cmp	r6, lr
 8009416:	f849 3b04 	str.w	r3, [r9], #4
 800941a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800941e:	d8e5      	bhi.n	80093ec <__mdiff+0x88>
 8009420:	1b33      	subs	r3, r6, r4
 8009422:	3b15      	subs	r3, #21
 8009424:	f023 0303 	bic.w	r3, r3, #3
 8009428:	3415      	adds	r4, #21
 800942a:	3304      	adds	r3, #4
 800942c:	42a6      	cmp	r6, r4
 800942e:	bf38      	it	cc
 8009430:	2304      	movcc	r3, #4
 8009432:	441d      	add	r5, r3
 8009434:	445b      	add	r3, fp
 8009436:	461e      	mov	r6, r3
 8009438:	462c      	mov	r4, r5
 800943a:	4544      	cmp	r4, r8
 800943c:	d30e      	bcc.n	800945c <__mdiff+0xf8>
 800943e:	f108 0103 	add.w	r1, r8, #3
 8009442:	1b49      	subs	r1, r1, r5
 8009444:	f021 0103 	bic.w	r1, r1, #3
 8009448:	3d03      	subs	r5, #3
 800944a:	45a8      	cmp	r8, r5
 800944c:	bf38      	it	cc
 800944e:	2100      	movcc	r1, #0
 8009450:	440b      	add	r3, r1
 8009452:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009456:	b191      	cbz	r1, 800947e <__mdiff+0x11a>
 8009458:	6117      	str	r7, [r2, #16]
 800945a:	e79d      	b.n	8009398 <__mdiff+0x34>
 800945c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009460:	46e6      	mov	lr, ip
 8009462:	0c08      	lsrs	r0, r1, #16
 8009464:	fa1c fc81 	uxtah	ip, ip, r1
 8009468:	4471      	add	r1, lr
 800946a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800946e:	b289      	uxth	r1, r1
 8009470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009474:	f846 1b04 	str.w	r1, [r6], #4
 8009478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800947c:	e7dd      	b.n	800943a <__mdiff+0xd6>
 800947e:	3f01      	subs	r7, #1
 8009480:	e7e7      	b.n	8009452 <__mdiff+0xee>
 8009482:	bf00      	nop
 8009484:	0800a160 	.word	0x0800a160
 8009488:	0800a171 	.word	0x0800a171

0800948c <__d2b>:
 800948c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009490:	460f      	mov	r7, r1
 8009492:	2101      	movs	r1, #1
 8009494:	ec59 8b10 	vmov	r8, r9, d0
 8009498:	4616      	mov	r6, r2
 800949a:	f7ff fccd 	bl	8008e38 <_Balloc>
 800949e:	4604      	mov	r4, r0
 80094a0:	b930      	cbnz	r0, 80094b0 <__d2b+0x24>
 80094a2:	4602      	mov	r2, r0
 80094a4:	4b23      	ldr	r3, [pc, #140]	@ (8009534 <__d2b+0xa8>)
 80094a6:	4824      	ldr	r0, [pc, #144]	@ (8009538 <__d2b+0xac>)
 80094a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80094ac:	f000 fa74 	bl	8009998 <__assert_func>
 80094b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094b8:	b10d      	cbz	r5, 80094be <__d2b+0x32>
 80094ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	f1b8 0300 	subs.w	r3, r8, #0
 80094c4:	d023      	beq.n	800950e <__d2b+0x82>
 80094c6:	4668      	mov	r0, sp
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	f7ff fd7c 	bl	8008fc6 <__lo0bits>
 80094ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80094d2:	b1d0      	cbz	r0, 800950a <__d2b+0x7e>
 80094d4:	f1c0 0320 	rsb	r3, r0, #32
 80094d8:	fa02 f303 	lsl.w	r3, r2, r3
 80094dc:	430b      	orrs	r3, r1
 80094de:	40c2      	lsrs	r2, r0
 80094e0:	6163      	str	r3, [r4, #20]
 80094e2:	9201      	str	r2, [sp, #4]
 80094e4:	9b01      	ldr	r3, [sp, #4]
 80094e6:	61a3      	str	r3, [r4, #24]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bf0c      	ite	eq
 80094ec:	2201      	moveq	r2, #1
 80094ee:	2202      	movne	r2, #2
 80094f0:	6122      	str	r2, [r4, #16]
 80094f2:	b1a5      	cbz	r5, 800951e <__d2b+0x92>
 80094f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80094f8:	4405      	add	r5, r0
 80094fa:	603d      	str	r5, [r7, #0]
 80094fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009500:	6030      	str	r0, [r6, #0]
 8009502:	4620      	mov	r0, r4
 8009504:	b003      	add	sp, #12
 8009506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800950a:	6161      	str	r1, [r4, #20]
 800950c:	e7ea      	b.n	80094e4 <__d2b+0x58>
 800950e:	a801      	add	r0, sp, #4
 8009510:	f7ff fd59 	bl	8008fc6 <__lo0bits>
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	6163      	str	r3, [r4, #20]
 8009518:	3020      	adds	r0, #32
 800951a:	2201      	movs	r2, #1
 800951c:	e7e8      	b.n	80094f0 <__d2b+0x64>
 800951e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009522:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009526:	6038      	str	r0, [r7, #0]
 8009528:	6918      	ldr	r0, [r3, #16]
 800952a:	f7ff fd2d 	bl	8008f88 <__hi0bits>
 800952e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009532:	e7e5      	b.n	8009500 <__d2b+0x74>
 8009534:	0800a160 	.word	0x0800a160
 8009538:	0800a171 	.word	0x0800a171

0800953c <__ssputs_r>:
 800953c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009540:	688e      	ldr	r6, [r1, #8]
 8009542:	461f      	mov	r7, r3
 8009544:	42be      	cmp	r6, r7
 8009546:	680b      	ldr	r3, [r1, #0]
 8009548:	4682      	mov	sl, r0
 800954a:	460c      	mov	r4, r1
 800954c:	4690      	mov	r8, r2
 800954e:	d82d      	bhi.n	80095ac <__ssputs_r+0x70>
 8009550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009554:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009558:	d026      	beq.n	80095a8 <__ssputs_r+0x6c>
 800955a:	6965      	ldr	r5, [r4, #20]
 800955c:	6909      	ldr	r1, [r1, #16]
 800955e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009562:	eba3 0901 	sub.w	r9, r3, r1
 8009566:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800956a:	1c7b      	adds	r3, r7, #1
 800956c:	444b      	add	r3, r9
 800956e:	106d      	asrs	r5, r5, #1
 8009570:	429d      	cmp	r5, r3
 8009572:	bf38      	it	cc
 8009574:	461d      	movcc	r5, r3
 8009576:	0553      	lsls	r3, r2, #21
 8009578:	d527      	bpl.n	80095ca <__ssputs_r+0x8e>
 800957a:	4629      	mov	r1, r5
 800957c:	f7ff fbd0 	bl	8008d20 <_malloc_r>
 8009580:	4606      	mov	r6, r0
 8009582:	b360      	cbz	r0, 80095de <__ssputs_r+0xa2>
 8009584:	6921      	ldr	r1, [r4, #16]
 8009586:	464a      	mov	r2, r9
 8009588:	f7fe fcf9 	bl	8007f7e <memcpy>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	6126      	str	r6, [r4, #16]
 800959a:	6165      	str	r5, [r4, #20]
 800959c:	444e      	add	r6, r9
 800959e:	eba5 0509 	sub.w	r5, r5, r9
 80095a2:	6026      	str	r6, [r4, #0]
 80095a4:	60a5      	str	r5, [r4, #8]
 80095a6:	463e      	mov	r6, r7
 80095a8:	42be      	cmp	r6, r7
 80095aa:	d900      	bls.n	80095ae <__ssputs_r+0x72>
 80095ac:	463e      	mov	r6, r7
 80095ae:	6820      	ldr	r0, [r4, #0]
 80095b0:	4632      	mov	r2, r6
 80095b2:	4641      	mov	r1, r8
 80095b4:	f000 f9c6 	bl	8009944 <memmove>
 80095b8:	68a3      	ldr	r3, [r4, #8]
 80095ba:	1b9b      	subs	r3, r3, r6
 80095bc:	60a3      	str	r3, [r4, #8]
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	4433      	add	r3, r6
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	2000      	movs	r0, #0
 80095c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ca:	462a      	mov	r2, r5
 80095cc:	f000 fa28 	bl	8009a20 <_realloc_r>
 80095d0:	4606      	mov	r6, r0
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d1e0      	bne.n	8009598 <__ssputs_r+0x5c>
 80095d6:	6921      	ldr	r1, [r4, #16]
 80095d8:	4650      	mov	r0, sl
 80095da:	f7ff fb2d 	bl	8008c38 <_free_r>
 80095de:	230c      	movs	r3, #12
 80095e0:	f8ca 3000 	str.w	r3, [sl]
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ea:	81a3      	strh	r3, [r4, #12]
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295
 80095f0:	e7e9      	b.n	80095c6 <__ssputs_r+0x8a>
	...

080095f4 <_svfiprintf_r>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	4698      	mov	r8, r3
 80095fa:	898b      	ldrh	r3, [r1, #12]
 80095fc:	061b      	lsls	r3, r3, #24
 80095fe:	b09d      	sub	sp, #116	@ 0x74
 8009600:	4607      	mov	r7, r0
 8009602:	460d      	mov	r5, r1
 8009604:	4614      	mov	r4, r2
 8009606:	d510      	bpl.n	800962a <_svfiprintf_r+0x36>
 8009608:	690b      	ldr	r3, [r1, #16]
 800960a:	b973      	cbnz	r3, 800962a <_svfiprintf_r+0x36>
 800960c:	2140      	movs	r1, #64	@ 0x40
 800960e:	f7ff fb87 	bl	8008d20 <_malloc_r>
 8009612:	6028      	str	r0, [r5, #0]
 8009614:	6128      	str	r0, [r5, #16]
 8009616:	b930      	cbnz	r0, 8009626 <_svfiprintf_r+0x32>
 8009618:	230c      	movs	r3, #12
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	b01d      	add	sp, #116	@ 0x74
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	2340      	movs	r3, #64	@ 0x40
 8009628:	616b      	str	r3, [r5, #20]
 800962a:	2300      	movs	r3, #0
 800962c:	9309      	str	r3, [sp, #36]	@ 0x24
 800962e:	2320      	movs	r3, #32
 8009630:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009634:	f8cd 800c 	str.w	r8, [sp, #12]
 8009638:	2330      	movs	r3, #48	@ 0x30
 800963a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097d8 <_svfiprintf_r+0x1e4>
 800963e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009642:	f04f 0901 	mov.w	r9, #1
 8009646:	4623      	mov	r3, r4
 8009648:	469a      	mov	sl, r3
 800964a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800964e:	b10a      	cbz	r2, 8009654 <_svfiprintf_r+0x60>
 8009650:	2a25      	cmp	r2, #37	@ 0x25
 8009652:	d1f9      	bne.n	8009648 <_svfiprintf_r+0x54>
 8009654:	ebba 0b04 	subs.w	fp, sl, r4
 8009658:	d00b      	beq.n	8009672 <_svfiprintf_r+0x7e>
 800965a:	465b      	mov	r3, fp
 800965c:	4622      	mov	r2, r4
 800965e:	4629      	mov	r1, r5
 8009660:	4638      	mov	r0, r7
 8009662:	f7ff ff6b 	bl	800953c <__ssputs_r>
 8009666:	3001      	adds	r0, #1
 8009668:	f000 80a7 	beq.w	80097ba <_svfiprintf_r+0x1c6>
 800966c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800966e:	445a      	add	r2, fp
 8009670:	9209      	str	r2, [sp, #36]	@ 0x24
 8009672:	f89a 3000 	ldrb.w	r3, [sl]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 809f 	beq.w	80097ba <_svfiprintf_r+0x1c6>
 800967c:	2300      	movs	r3, #0
 800967e:	f04f 32ff 	mov.w	r2, #4294967295
 8009682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009686:	f10a 0a01 	add.w	sl, sl, #1
 800968a:	9304      	str	r3, [sp, #16]
 800968c:	9307      	str	r3, [sp, #28]
 800968e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009692:	931a      	str	r3, [sp, #104]	@ 0x68
 8009694:	4654      	mov	r4, sl
 8009696:	2205      	movs	r2, #5
 8009698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969c:	484e      	ldr	r0, [pc, #312]	@ (80097d8 <_svfiprintf_r+0x1e4>)
 800969e:	f7f6 fd97 	bl	80001d0 <memchr>
 80096a2:	9a04      	ldr	r2, [sp, #16]
 80096a4:	b9d8      	cbnz	r0, 80096de <_svfiprintf_r+0xea>
 80096a6:	06d0      	lsls	r0, r2, #27
 80096a8:	bf44      	itt	mi
 80096aa:	2320      	movmi	r3, #32
 80096ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096b0:	0711      	lsls	r1, r2, #28
 80096b2:	bf44      	itt	mi
 80096b4:	232b      	movmi	r3, #43	@ 0x2b
 80096b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ba:	f89a 3000 	ldrb.w	r3, [sl]
 80096be:	2b2a      	cmp	r3, #42	@ 0x2a
 80096c0:	d015      	beq.n	80096ee <_svfiprintf_r+0xfa>
 80096c2:	9a07      	ldr	r2, [sp, #28]
 80096c4:	4654      	mov	r4, sl
 80096c6:	2000      	movs	r0, #0
 80096c8:	f04f 0c0a 	mov.w	ip, #10
 80096cc:	4621      	mov	r1, r4
 80096ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096d2:	3b30      	subs	r3, #48	@ 0x30
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	d94b      	bls.n	8009770 <_svfiprintf_r+0x17c>
 80096d8:	b1b0      	cbz	r0, 8009708 <_svfiprintf_r+0x114>
 80096da:	9207      	str	r2, [sp, #28]
 80096dc:	e014      	b.n	8009708 <_svfiprintf_r+0x114>
 80096de:	eba0 0308 	sub.w	r3, r0, r8
 80096e2:	fa09 f303 	lsl.w	r3, r9, r3
 80096e6:	4313      	orrs	r3, r2
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	46a2      	mov	sl, r4
 80096ec:	e7d2      	b.n	8009694 <_svfiprintf_r+0xa0>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	1d19      	adds	r1, r3, #4
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	9103      	str	r1, [sp, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	bfbb      	ittet	lt
 80096fa:	425b      	neglt	r3, r3
 80096fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009700:	9307      	strge	r3, [sp, #28]
 8009702:	9307      	strlt	r3, [sp, #28]
 8009704:	bfb8      	it	lt
 8009706:	9204      	strlt	r2, [sp, #16]
 8009708:	7823      	ldrb	r3, [r4, #0]
 800970a:	2b2e      	cmp	r3, #46	@ 0x2e
 800970c:	d10a      	bne.n	8009724 <_svfiprintf_r+0x130>
 800970e:	7863      	ldrb	r3, [r4, #1]
 8009710:	2b2a      	cmp	r3, #42	@ 0x2a
 8009712:	d132      	bne.n	800977a <_svfiprintf_r+0x186>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	1d1a      	adds	r2, r3, #4
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	9203      	str	r2, [sp, #12]
 800971c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009720:	3402      	adds	r4, #2
 8009722:	9305      	str	r3, [sp, #20]
 8009724:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80097e8 <_svfiprintf_r+0x1f4>
 8009728:	7821      	ldrb	r1, [r4, #0]
 800972a:	2203      	movs	r2, #3
 800972c:	4650      	mov	r0, sl
 800972e:	f7f6 fd4f 	bl	80001d0 <memchr>
 8009732:	b138      	cbz	r0, 8009744 <_svfiprintf_r+0x150>
 8009734:	9b04      	ldr	r3, [sp, #16]
 8009736:	eba0 000a 	sub.w	r0, r0, sl
 800973a:	2240      	movs	r2, #64	@ 0x40
 800973c:	4082      	lsls	r2, r0
 800973e:	4313      	orrs	r3, r2
 8009740:	3401      	adds	r4, #1
 8009742:	9304      	str	r3, [sp, #16]
 8009744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009748:	4824      	ldr	r0, [pc, #144]	@ (80097dc <_svfiprintf_r+0x1e8>)
 800974a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800974e:	2206      	movs	r2, #6
 8009750:	f7f6 fd3e 	bl	80001d0 <memchr>
 8009754:	2800      	cmp	r0, #0
 8009756:	d036      	beq.n	80097c6 <_svfiprintf_r+0x1d2>
 8009758:	4b21      	ldr	r3, [pc, #132]	@ (80097e0 <_svfiprintf_r+0x1ec>)
 800975a:	bb1b      	cbnz	r3, 80097a4 <_svfiprintf_r+0x1b0>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	3307      	adds	r3, #7
 8009760:	f023 0307 	bic.w	r3, r3, #7
 8009764:	3308      	adds	r3, #8
 8009766:	9303      	str	r3, [sp, #12]
 8009768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976a:	4433      	add	r3, r6
 800976c:	9309      	str	r3, [sp, #36]	@ 0x24
 800976e:	e76a      	b.n	8009646 <_svfiprintf_r+0x52>
 8009770:	fb0c 3202 	mla	r2, ip, r2, r3
 8009774:	460c      	mov	r4, r1
 8009776:	2001      	movs	r0, #1
 8009778:	e7a8      	b.n	80096cc <_svfiprintf_r+0xd8>
 800977a:	2300      	movs	r3, #0
 800977c:	3401      	adds	r4, #1
 800977e:	9305      	str	r3, [sp, #20]
 8009780:	4619      	mov	r1, r3
 8009782:	f04f 0c0a 	mov.w	ip, #10
 8009786:	4620      	mov	r0, r4
 8009788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800978c:	3a30      	subs	r2, #48	@ 0x30
 800978e:	2a09      	cmp	r2, #9
 8009790:	d903      	bls.n	800979a <_svfiprintf_r+0x1a6>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0c6      	beq.n	8009724 <_svfiprintf_r+0x130>
 8009796:	9105      	str	r1, [sp, #20]
 8009798:	e7c4      	b.n	8009724 <_svfiprintf_r+0x130>
 800979a:	fb0c 2101 	mla	r1, ip, r1, r2
 800979e:	4604      	mov	r4, r0
 80097a0:	2301      	movs	r3, #1
 80097a2:	e7f0      	b.n	8009786 <_svfiprintf_r+0x192>
 80097a4:	ab03      	add	r3, sp, #12
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	462a      	mov	r2, r5
 80097aa:	4b0e      	ldr	r3, [pc, #56]	@ (80097e4 <_svfiprintf_r+0x1f0>)
 80097ac:	a904      	add	r1, sp, #16
 80097ae:	4638      	mov	r0, r7
 80097b0:	f7fd fe74 	bl	800749c <_printf_float>
 80097b4:	1c42      	adds	r2, r0, #1
 80097b6:	4606      	mov	r6, r0
 80097b8:	d1d6      	bne.n	8009768 <_svfiprintf_r+0x174>
 80097ba:	89ab      	ldrh	r3, [r5, #12]
 80097bc:	065b      	lsls	r3, r3, #25
 80097be:	f53f af2d 	bmi.w	800961c <_svfiprintf_r+0x28>
 80097c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097c4:	e72c      	b.n	8009620 <_svfiprintf_r+0x2c>
 80097c6:	ab03      	add	r3, sp, #12
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	462a      	mov	r2, r5
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <_svfiprintf_r+0x1f0>)
 80097ce:	a904      	add	r1, sp, #16
 80097d0:	4638      	mov	r0, r7
 80097d2:	f7fe f8fb 	bl	80079cc <_printf_i>
 80097d6:	e7ed      	b.n	80097b4 <_svfiprintf_r+0x1c0>
 80097d8:	0800a2c8 	.word	0x0800a2c8
 80097dc:	0800a2d2 	.word	0x0800a2d2
 80097e0:	0800749d 	.word	0x0800749d
 80097e4:	0800953d 	.word	0x0800953d
 80097e8:	0800a2ce 	.word	0x0800a2ce

080097ec <__sflush_r>:
 80097ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f4:	0716      	lsls	r6, r2, #28
 80097f6:	4605      	mov	r5, r0
 80097f8:	460c      	mov	r4, r1
 80097fa:	d454      	bmi.n	80098a6 <__sflush_r+0xba>
 80097fc:	684b      	ldr	r3, [r1, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dc02      	bgt.n	8009808 <__sflush_r+0x1c>
 8009802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009804:	2b00      	cmp	r3, #0
 8009806:	dd48      	ble.n	800989a <__sflush_r+0xae>
 8009808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800980a:	2e00      	cmp	r6, #0
 800980c:	d045      	beq.n	800989a <__sflush_r+0xae>
 800980e:	2300      	movs	r3, #0
 8009810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009814:	682f      	ldr	r7, [r5, #0]
 8009816:	6a21      	ldr	r1, [r4, #32]
 8009818:	602b      	str	r3, [r5, #0]
 800981a:	d030      	beq.n	800987e <__sflush_r+0x92>
 800981c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	0759      	lsls	r1, r3, #29
 8009822:	d505      	bpl.n	8009830 <__sflush_r+0x44>
 8009824:	6863      	ldr	r3, [r4, #4]
 8009826:	1ad2      	subs	r2, r2, r3
 8009828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800982a:	b10b      	cbz	r3, 8009830 <__sflush_r+0x44>
 800982c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	2300      	movs	r3, #0
 8009832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009834:	6a21      	ldr	r1, [r4, #32]
 8009836:	4628      	mov	r0, r5
 8009838:	47b0      	blx	r6
 800983a:	1c43      	adds	r3, r0, #1
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	d106      	bne.n	800984e <__sflush_r+0x62>
 8009840:	6829      	ldr	r1, [r5, #0]
 8009842:	291d      	cmp	r1, #29
 8009844:	d82b      	bhi.n	800989e <__sflush_r+0xb2>
 8009846:	4a2a      	ldr	r2, [pc, #168]	@ (80098f0 <__sflush_r+0x104>)
 8009848:	410a      	asrs	r2, r1
 800984a:	07d6      	lsls	r6, r2, #31
 800984c:	d427      	bmi.n	800989e <__sflush_r+0xb2>
 800984e:	2200      	movs	r2, #0
 8009850:	6062      	str	r2, [r4, #4]
 8009852:	04d9      	lsls	r1, r3, #19
 8009854:	6922      	ldr	r2, [r4, #16]
 8009856:	6022      	str	r2, [r4, #0]
 8009858:	d504      	bpl.n	8009864 <__sflush_r+0x78>
 800985a:	1c42      	adds	r2, r0, #1
 800985c:	d101      	bne.n	8009862 <__sflush_r+0x76>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b903      	cbnz	r3, 8009864 <__sflush_r+0x78>
 8009862:	6560      	str	r0, [r4, #84]	@ 0x54
 8009864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009866:	602f      	str	r7, [r5, #0]
 8009868:	b1b9      	cbz	r1, 800989a <__sflush_r+0xae>
 800986a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800986e:	4299      	cmp	r1, r3
 8009870:	d002      	beq.n	8009878 <__sflush_r+0x8c>
 8009872:	4628      	mov	r0, r5
 8009874:	f7ff f9e0 	bl	8008c38 <_free_r>
 8009878:	2300      	movs	r3, #0
 800987a:	6363      	str	r3, [r4, #52]	@ 0x34
 800987c:	e00d      	b.n	800989a <__sflush_r+0xae>
 800987e:	2301      	movs	r3, #1
 8009880:	4628      	mov	r0, r5
 8009882:	47b0      	blx	r6
 8009884:	4602      	mov	r2, r0
 8009886:	1c50      	adds	r0, r2, #1
 8009888:	d1c9      	bne.n	800981e <__sflush_r+0x32>
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d0c6      	beq.n	800981e <__sflush_r+0x32>
 8009890:	2b1d      	cmp	r3, #29
 8009892:	d001      	beq.n	8009898 <__sflush_r+0xac>
 8009894:	2b16      	cmp	r3, #22
 8009896:	d11e      	bne.n	80098d6 <__sflush_r+0xea>
 8009898:	602f      	str	r7, [r5, #0]
 800989a:	2000      	movs	r0, #0
 800989c:	e022      	b.n	80098e4 <__sflush_r+0xf8>
 800989e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098a2:	b21b      	sxth	r3, r3
 80098a4:	e01b      	b.n	80098de <__sflush_r+0xf2>
 80098a6:	690f      	ldr	r7, [r1, #16]
 80098a8:	2f00      	cmp	r7, #0
 80098aa:	d0f6      	beq.n	800989a <__sflush_r+0xae>
 80098ac:	0793      	lsls	r3, r2, #30
 80098ae:	680e      	ldr	r6, [r1, #0]
 80098b0:	bf08      	it	eq
 80098b2:	694b      	ldreq	r3, [r1, #20]
 80098b4:	600f      	str	r7, [r1, #0]
 80098b6:	bf18      	it	ne
 80098b8:	2300      	movne	r3, #0
 80098ba:	eba6 0807 	sub.w	r8, r6, r7
 80098be:	608b      	str	r3, [r1, #8]
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	dde9      	ble.n	800989a <__sflush_r+0xae>
 80098c6:	6a21      	ldr	r1, [r4, #32]
 80098c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80098ca:	4643      	mov	r3, r8
 80098cc:	463a      	mov	r2, r7
 80098ce:	4628      	mov	r0, r5
 80098d0:	47b0      	blx	r6
 80098d2:	2800      	cmp	r0, #0
 80098d4:	dc08      	bgt.n	80098e8 <__sflush_r+0xfc>
 80098d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e8:	4407      	add	r7, r0
 80098ea:	eba8 0800 	sub.w	r8, r8, r0
 80098ee:	e7e7      	b.n	80098c0 <__sflush_r+0xd4>
 80098f0:	dfbffffe 	.word	0xdfbffffe

080098f4 <_fflush_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	690b      	ldr	r3, [r1, #16]
 80098f8:	4605      	mov	r5, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	b913      	cbnz	r3, 8009904 <_fflush_r+0x10>
 80098fe:	2500      	movs	r5, #0
 8009900:	4628      	mov	r0, r5
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	b118      	cbz	r0, 800990e <_fflush_r+0x1a>
 8009906:	6a03      	ldr	r3, [r0, #32]
 8009908:	b90b      	cbnz	r3, 800990e <_fflush_r+0x1a>
 800990a:	f7fe fa0b 	bl	8007d24 <__sinit>
 800990e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f3      	beq.n	80098fe <_fflush_r+0xa>
 8009916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009918:	07d0      	lsls	r0, r2, #31
 800991a:	d404      	bmi.n	8009926 <_fflush_r+0x32>
 800991c:	0599      	lsls	r1, r3, #22
 800991e:	d402      	bmi.n	8009926 <_fflush_r+0x32>
 8009920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009922:	f7fe fb2a 	bl	8007f7a <__retarget_lock_acquire_recursive>
 8009926:	4628      	mov	r0, r5
 8009928:	4621      	mov	r1, r4
 800992a:	f7ff ff5f 	bl	80097ec <__sflush_r>
 800992e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009930:	07da      	lsls	r2, r3, #31
 8009932:	4605      	mov	r5, r0
 8009934:	d4e4      	bmi.n	8009900 <_fflush_r+0xc>
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	059b      	lsls	r3, r3, #22
 800993a:	d4e1      	bmi.n	8009900 <_fflush_r+0xc>
 800993c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800993e:	f7fe fb1d 	bl	8007f7c <__retarget_lock_release_recursive>
 8009942:	e7dd      	b.n	8009900 <_fflush_r+0xc>

08009944 <memmove>:
 8009944:	4288      	cmp	r0, r1
 8009946:	b510      	push	{r4, lr}
 8009948:	eb01 0402 	add.w	r4, r1, r2
 800994c:	d902      	bls.n	8009954 <memmove+0x10>
 800994e:	4284      	cmp	r4, r0
 8009950:	4623      	mov	r3, r4
 8009952:	d807      	bhi.n	8009964 <memmove+0x20>
 8009954:	1e43      	subs	r3, r0, #1
 8009956:	42a1      	cmp	r1, r4
 8009958:	d008      	beq.n	800996c <memmove+0x28>
 800995a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800995e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009962:	e7f8      	b.n	8009956 <memmove+0x12>
 8009964:	4402      	add	r2, r0
 8009966:	4601      	mov	r1, r0
 8009968:	428a      	cmp	r2, r1
 800996a:	d100      	bne.n	800996e <memmove+0x2a>
 800996c:	bd10      	pop	{r4, pc}
 800996e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009976:	e7f7      	b.n	8009968 <memmove+0x24>

08009978 <_sbrk_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4d06      	ldr	r5, [pc, #24]	@ (8009994 <_sbrk_r+0x1c>)
 800997c:	2300      	movs	r3, #0
 800997e:	4604      	mov	r4, r0
 8009980:	4608      	mov	r0, r1
 8009982:	602b      	str	r3, [r5, #0]
 8009984:	f7f8 ffd8 	bl	8002938 <_sbrk>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d102      	bne.n	8009992 <_sbrk_r+0x1a>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	b103      	cbz	r3, 8009992 <_sbrk_r+0x1a>
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	200006d8 	.word	0x200006d8

08009998 <__assert_func>:
 8009998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800999a:	4614      	mov	r4, r2
 800999c:	461a      	mov	r2, r3
 800999e:	4b09      	ldr	r3, [pc, #36]	@ (80099c4 <__assert_func+0x2c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4605      	mov	r5, r0
 80099a4:	68d8      	ldr	r0, [r3, #12]
 80099a6:	b954      	cbnz	r4, 80099be <__assert_func+0x26>
 80099a8:	4b07      	ldr	r3, [pc, #28]	@ (80099c8 <__assert_func+0x30>)
 80099aa:	461c      	mov	r4, r3
 80099ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099b0:	9100      	str	r1, [sp, #0]
 80099b2:	462b      	mov	r3, r5
 80099b4:	4905      	ldr	r1, [pc, #20]	@ (80099cc <__assert_func+0x34>)
 80099b6:	f000 f86f 	bl	8009a98 <fiprintf>
 80099ba:	f000 f87f 	bl	8009abc <abort>
 80099be:	4b04      	ldr	r3, [pc, #16]	@ (80099d0 <__assert_func+0x38>)
 80099c0:	e7f4      	b.n	80099ac <__assert_func+0x14>
 80099c2:	bf00      	nop
 80099c4:	2000002c 	.word	0x2000002c
 80099c8:	0800a31e 	.word	0x0800a31e
 80099cc:	0800a2f0 	.word	0x0800a2f0
 80099d0:	0800a2e3 	.word	0x0800a2e3

080099d4 <_calloc_r>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	fba1 5402 	umull	r5, r4, r1, r2
 80099da:	b93c      	cbnz	r4, 80099ec <_calloc_r+0x18>
 80099dc:	4629      	mov	r1, r5
 80099de:	f7ff f99f 	bl	8008d20 <_malloc_r>
 80099e2:	4606      	mov	r6, r0
 80099e4:	b928      	cbnz	r0, 80099f2 <_calloc_r+0x1e>
 80099e6:	2600      	movs	r6, #0
 80099e8:	4630      	mov	r0, r6
 80099ea:	bd70      	pop	{r4, r5, r6, pc}
 80099ec:	220c      	movs	r2, #12
 80099ee:	6002      	str	r2, [r0, #0]
 80099f0:	e7f9      	b.n	80099e6 <_calloc_r+0x12>
 80099f2:	462a      	mov	r2, r5
 80099f4:	4621      	mov	r1, r4
 80099f6:	f7fe fa42 	bl	8007e7e <memset>
 80099fa:	e7f5      	b.n	80099e8 <_calloc_r+0x14>

080099fc <__ascii_mbtowc>:
 80099fc:	b082      	sub	sp, #8
 80099fe:	b901      	cbnz	r1, 8009a02 <__ascii_mbtowc+0x6>
 8009a00:	a901      	add	r1, sp, #4
 8009a02:	b142      	cbz	r2, 8009a16 <__ascii_mbtowc+0x1a>
 8009a04:	b14b      	cbz	r3, 8009a1a <__ascii_mbtowc+0x1e>
 8009a06:	7813      	ldrb	r3, [r2, #0]
 8009a08:	600b      	str	r3, [r1, #0]
 8009a0a:	7812      	ldrb	r2, [r2, #0]
 8009a0c:	1e10      	subs	r0, r2, #0
 8009a0e:	bf18      	it	ne
 8009a10:	2001      	movne	r0, #1
 8009a12:	b002      	add	sp, #8
 8009a14:	4770      	bx	lr
 8009a16:	4610      	mov	r0, r2
 8009a18:	e7fb      	b.n	8009a12 <__ascii_mbtowc+0x16>
 8009a1a:	f06f 0001 	mvn.w	r0, #1
 8009a1e:	e7f8      	b.n	8009a12 <__ascii_mbtowc+0x16>

08009a20 <_realloc_r>:
 8009a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a24:	4680      	mov	r8, r0
 8009a26:	4615      	mov	r5, r2
 8009a28:	460c      	mov	r4, r1
 8009a2a:	b921      	cbnz	r1, 8009a36 <_realloc_r+0x16>
 8009a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a30:	4611      	mov	r1, r2
 8009a32:	f7ff b975 	b.w	8008d20 <_malloc_r>
 8009a36:	b92a      	cbnz	r2, 8009a44 <_realloc_r+0x24>
 8009a38:	f7ff f8fe 	bl	8008c38 <_free_r>
 8009a3c:	2400      	movs	r4, #0
 8009a3e:	4620      	mov	r0, r4
 8009a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a44:	f000 f841 	bl	8009aca <_malloc_usable_size_r>
 8009a48:	4285      	cmp	r5, r0
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	d802      	bhi.n	8009a54 <_realloc_r+0x34>
 8009a4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a52:	d8f4      	bhi.n	8009a3e <_realloc_r+0x1e>
 8009a54:	4629      	mov	r1, r5
 8009a56:	4640      	mov	r0, r8
 8009a58:	f7ff f962 	bl	8008d20 <_malloc_r>
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d0ec      	beq.n	8009a3c <_realloc_r+0x1c>
 8009a62:	42b5      	cmp	r5, r6
 8009a64:	462a      	mov	r2, r5
 8009a66:	4621      	mov	r1, r4
 8009a68:	bf28      	it	cs
 8009a6a:	4632      	movcs	r2, r6
 8009a6c:	f7fe fa87 	bl	8007f7e <memcpy>
 8009a70:	4621      	mov	r1, r4
 8009a72:	4640      	mov	r0, r8
 8009a74:	f7ff f8e0 	bl	8008c38 <_free_r>
 8009a78:	463c      	mov	r4, r7
 8009a7a:	e7e0      	b.n	8009a3e <_realloc_r+0x1e>

08009a7c <__ascii_wctomb>:
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	4608      	mov	r0, r1
 8009a80:	b141      	cbz	r1, 8009a94 <__ascii_wctomb+0x18>
 8009a82:	2aff      	cmp	r2, #255	@ 0xff
 8009a84:	d904      	bls.n	8009a90 <__ascii_wctomb+0x14>
 8009a86:	228a      	movs	r2, #138	@ 0x8a
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8e:	4770      	bx	lr
 8009a90:	700a      	strb	r2, [r1, #0]
 8009a92:	2001      	movs	r0, #1
 8009a94:	4770      	bx	lr
	...

08009a98 <fiprintf>:
 8009a98:	b40e      	push	{r1, r2, r3}
 8009a9a:	b503      	push	{r0, r1, lr}
 8009a9c:	4601      	mov	r1, r0
 8009a9e:	ab03      	add	r3, sp, #12
 8009aa0:	4805      	ldr	r0, [pc, #20]	@ (8009ab8 <fiprintf+0x20>)
 8009aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aa6:	6800      	ldr	r0, [r0, #0]
 8009aa8:	9301      	str	r3, [sp, #4]
 8009aaa:	f000 f83f 	bl	8009b2c <_vfiprintf_r>
 8009aae:	b002      	add	sp, #8
 8009ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ab4:	b003      	add	sp, #12
 8009ab6:	4770      	bx	lr
 8009ab8:	2000002c 	.word	0x2000002c

08009abc <abort>:
 8009abc:	b508      	push	{r3, lr}
 8009abe:	2006      	movs	r0, #6
 8009ac0:	f000 fa08 	bl	8009ed4 <raise>
 8009ac4:	2001      	movs	r0, #1
 8009ac6:	f7f8 febf 	bl	8002848 <_exit>

08009aca <_malloc_usable_size_r>:
 8009aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ace:	1f18      	subs	r0, r3, #4
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	bfbc      	itt	lt
 8009ad4:	580b      	ldrlt	r3, [r1, r0]
 8009ad6:	18c0      	addlt	r0, r0, r3
 8009ad8:	4770      	bx	lr

08009ada <__sfputc_r>:
 8009ada:	6893      	ldr	r3, [r2, #8]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	b410      	push	{r4}
 8009ae2:	6093      	str	r3, [r2, #8]
 8009ae4:	da08      	bge.n	8009af8 <__sfputc_r+0x1e>
 8009ae6:	6994      	ldr	r4, [r2, #24]
 8009ae8:	42a3      	cmp	r3, r4
 8009aea:	db01      	blt.n	8009af0 <__sfputc_r+0x16>
 8009aec:	290a      	cmp	r1, #10
 8009aee:	d103      	bne.n	8009af8 <__sfputc_r+0x1e>
 8009af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009af4:	f000 b932 	b.w	8009d5c <__swbuf_r>
 8009af8:	6813      	ldr	r3, [r2, #0]
 8009afa:	1c58      	adds	r0, r3, #1
 8009afc:	6010      	str	r0, [r2, #0]
 8009afe:	7019      	strb	r1, [r3, #0]
 8009b00:	4608      	mov	r0, r1
 8009b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <__sfputs_r>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	4614      	mov	r4, r2
 8009b10:	18d5      	adds	r5, r2, r3
 8009b12:	42ac      	cmp	r4, r5
 8009b14:	d101      	bne.n	8009b1a <__sfputs_r+0x12>
 8009b16:	2000      	movs	r0, #0
 8009b18:	e007      	b.n	8009b2a <__sfputs_r+0x22>
 8009b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1e:	463a      	mov	r2, r7
 8009b20:	4630      	mov	r0, r6
 8009b22:	f7ff ffda 	bl	8009ada <__sfputc_r>
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	d1f3      	bne.n	8009b12 <__sfputs_r+0xa>
 8009b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b2c <_vfiprintf_r>:
 8009b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b30:	460d      	mov	r5, r1
 8009b32:	b09d      	sub	sp, #116	@ 0x74
 8009b34:	4614      	mov	r4, r2
 8009b36:	4698      	mov	r8, r3
 8009b38:	4606      	mov	r6, r0
 8009b3a:	b118      	cbz	r0, 8009b44 <_vfiprintf_r+0x18>
 8009b3c:	6a03      	ldr	r3, [r0, #32]
 8009b3e:	b90b      	cbnz	r3, 8009b44 <_vfiprintf_r+0x18>
 8009b40:	f7fe f8f0 	bl	8007d24 <__sinit>
 8009b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b46:	07d9      	lsls	r1, r3, #31
 8009b48:	d405      	bmi.n	8009b56 <_vfiprintf_r+0x2a>
 8009b4a:	89ab      	ldrh	r3, [r5, #12]
 8009b4c:	059a      	lsls	r2, r3, #22
 8009b4e:	d402      	bmi.n	8009b56 <_vfiprintf_r+0x2a>
 8009b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b52:	f7fe fa12 	bl	8007f7a <__retarget_lock_acquire_recursive>
 8009b56:	89ab      	ldrh	r3, [r5, #12]
 8009b58:	071b      	lsls	r3, r3, #28
 8009b5a:	d501      	bpl.n	8009b60 <_vfiprintf_r+0x34>
 8009b5c:	692b      	ldr	r3, [r5, #16]
 8009b5e:	b99b      	cbnz	r3, 8009b88 <_vfiprintf_r+0x5c>
 8009b60:	4629      	mov	r1, r5
 8009b62:	4630      	mov	r0, r6
 8009b64:	f000 f938 	bl	8009dd8 <__swsetup_r>
 8009b68:	b170      	cbz	r0, 8009b88 <_vfiprintf_r+0x5c>
 8009b6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b6c:	07dc      	lsls	r4, r3, #31
 8009b6e:	d504      	bpl.n	8009b7a <_vfiprintf_r+0x4e>
 8009b70:	f04f 30ff 	mov.w	r0, #4294967295
 8009b74:	b01d      	add	sp, #116	@ 0x74
 8009b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7a:	89ab      	ldrh	r3, [r5, #12]
 8009b7c:	0598      	lsls	r0, r3, #22
 8009b7e:	d4f7      	bmi.n	8009b70 <_vfiprintf_r+0x44>
 8009b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b82:	f7fe f9fb 	bl	8007f7c <__retarget_lock_release_recursive>
 8009b86:	e7f3      	b.n	8009b70 <_vfiprintf_r+0x44>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b8c:	2320      	movs	r3, #32
 8009b8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b96:	2330      	movs	r3, #48	@ 0x30
 8009b98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d48 <_vfiprintf_r+0x21c>
 8009b9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ba0:	f04f 0901 	mov.w	r9, #1
 8009ba4:	4623      	mov	r3, r4
 8009ba6:	469a      	mov	sl, r3
 8009ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bac:	b10a      	cbz	r2, 8009bb2 <_vfiprintf_r+0x86>
 8009bae:	2a25      	cmp	r2, #37	@ 0x25
 8009bb0:	d1f9      	bne.n	8009ba6 <_vfiprintf_r+0x7a>
 8009bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8009bb6:	d00b      	beq.n	8009bd0 <_vfiprintf_r+0xa4>
 8009bb8:	465b      	mov	r3, fp
 8009bba:	4622      	mov	r2, r4
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f7ff ffa2 	bl	8009b08 <__sfputs_r>
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	f000 80a7 	beq.w	8009d18 <_vfiprintf_r+0x1ec>
 8009bca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bcc:	445a      	add	r2, fp
 8009bce:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 809f 	beq.w	8009d18 <_vfiprintf_r+0x1ec>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009be4:	f10a 0a01 	add.w	sl, sl, #1
 8009be8:	9304      	str	r3, [sp, #16]
 8009bea:	9307      	str	r3, [sp, #28]
 8009bec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bf2:	4654      	mov	r4, sl
 8009bf4:	2205      	movs	r2, #5
 8009bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bfa:	4853      	ldr	r0, [pc, #332]	@ (8009d48 <_vfiprintf_r+0x21c>)
 8009bfc:	f7f6 fae8 	bl	80001d0 <memchr>
 8009c00:	9a04      	ldr	r2, [sp, #16]
 8009c02:	b9d8      	cbnz	r0, 8009c3c <_vfiprintf_r+0x110>
 8009c04:	06d1      	lsls	r1, r2, #27
 8009c06:	bf44      	itt	mi
 8009c08:	2320      	movmi	r3, #32
 8009c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c0e:	0713      	lsls	r3, r2, #28
 8009c10:	bf44      	itt	mi
 8009c12:	232b      	movmi	r3, #43	@ 0x2b
 8009c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c18:	f89a 3000 	ldrb.w	r3, [sl]
 8009c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c1e:	d015      	beq.n	8009c4c <_vfiprintf_r+0x120>
 8009c20:	9a07      	ldr	r2, [sp, #28]
 8009c22:	4654      	mov	r4, sl
 8009c24:	2000      	movs	r0, #0
 8009c26:	f04f 0c0a 	mov.w	ip, #10
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c30:	3b30      	subs	r3, #48	@ 0x30
 8009c32:	2b09      	cmp	r3, #9
 8009c34:	d94b      	bls.n	8009cce <_vfiprintf_r+0x1a2>
 8009c36:	b1b0      	cbz	r0, 8009c66 <_vfiprintf_r+0x13a>
 8009c38:	9207      	str	r2, [sp, #28]
 8009c3a:	e014      	b.n	8009c66 <_vfiprintf_r+0x13a>
 8009c3c:	eba0 0308 	sub.w	r3, r0, r8
 8009c40:	fa09 f303 	lsl.w	r3, r9, r3
 8009c44:	4313      	orrs	r3, r2
 8009c46:	9304      	str	r3, [sp, #16]
 8009c48:	46a2      	mov	sl, r4
 8009c4a:	e7d2      	b.n	8009bf2 <_vfiprintf_r+0xc6>
 8009c4c:	9b03      	ldr	r3, [sp, #12]
 8009c4e:	1d19      	adds	r1, r3, #4
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	9103      	str	r1, [sp, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	bfbb      	ittet	lt
 8009c58:	425b      	neglt	r3, r3
 8009c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c5e:	9307      	strge	r3, [sp, #28]
 8009c60:	9307      	strlt	r3, [sp, #28]
 8009c62:	bfb8      	it	lt
 8009c64:	9204      	strlt	r2, [sp, #16]
 8009c66:	7823      	ldrb	r3, [r4, #0]
 8009c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c6a:	d10a      	bne.n	8009c82 <_vfiprintf_r+0x156>
 8009c6c:	7863      	ldrb	r3, [r4, #1]
 8009c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c70:	d132      	bne.n	8009cd8 <_vfiprintf_r+0x1ac>
 8009c72:	9b03      	ldr	r3, [sp, #12]
 8009c74:	1d1a      	adds	r2, r3, #4
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	9203      	str	r2, [sp, #12]
 8009c7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c7e:	3402      	adds	r4, #2
 8009c80:	9305      	str	r3, [sp, #20]
 8009c82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d58 <_vfiprintf_r+0x22c>
 8009c86:	7821      	ldrb	r1, [r4, #0]
 8009c88:	2203      	movs	r2, #3
 8009c8a:	4650      	mov	r0, sl
 8009c8c:	f7f6 faa0 	bl	80001d0 <memchr>
 8009c90:	b138      	cbz	r0, 8009ca2 <_vfiprintf_r+0x176>
 8009c92:	9b04      	ldr	r3, [sp, #16]
 8009c94:	eba0 000a 	sub.w	r0, r0, sl
 8009c98:	2240      	movs	r2, #64	@ 0x40
 8009c9a:	4082      	lsls	r2, r0
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	3401      	adds	r4, #1
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca6:	4829      	ldr	r0, [pc, #164]	@ (8009d4c <_vfiprintf_r+0x220>)
 8009ca8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cac:	2206      	movs	r2, #6
 8009cae:	f7f6 fa8f 	bl	80001d0 <memchr>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d03f      	beq.n	8009d36 <_vfiprintf_r+0x20a>
 8009cb6:	4b26      	ldr	r3, [pc, #152]	@ (8009d50 <_vfiprintf_r+0x224>)
 8009cb8:	bb1b      	cbnz	r3, 8009d02 <_vfiprintf_r+0x1d6>
 8009cba:	9b03      	ldr	r3, [sp, #12]
 8009cbc:	3307      	adds	r3, #7
 8009cbe:	f023 0307 	bic.w	r3, r3, #7
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	9303      	str	r3, [sp, #12]
 8009cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc8:	443b      	add	r3, r7
 8009cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ccc:	e76a      	b.n	8009ba4 <_vfiprintf_r+0x78>
 8009cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	2001      	movs	r0, #1
 8009cd6:	e7a8      	b.n	8009c2a <_vfiprintf_r+0xfe>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	3401      	adds	r4, #1
 8009cdc:	9305      	str	r3, [sp, #20]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	f04f 0c0a 	mov.w	ip, #10
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cea:	3a30      	subs	r2, #48	@ 0x30
 8009cec:	2a09      	cmp	r2, #9
 8009cee:	d903      	bls.n	8009cf8 <_vfiprintf_r+0x1cc>
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0c6      	beq.n	8009c82 <_vfiprintf_r+0x156>
 8009cf4:	9105      	str	r1, [sp, #20]
 8009cf6:	e7c4      	b.n	8009c82 <_vfiprintf_r+0x156>
 8009cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e7f0      	b.n	8009ce4 <_vfiprintf_r+0x1b8>
 8009d02:	ab03      	add	r3, sp, #12
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	462a      	mov	r2, r5
 8009d08:	4b12      	ldr	r3, [pc, #72]	@ (8009d54 <_vfiprintf_r+0x228>)
 8009d0a:	a904      	add	r1, sp, #16
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f7fd fbc5 	bl	800749c <_printf_float>
 8009d12:	4607      	mov	r7, r0
 8009d14:	1c78      	adds	r0, r7, #1
 8009d16:	d1d6      	bne.n	8009cc6 <_vfiprintf_r+0x19a>
 8009d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d1a:	07d9      	lsls	r1, r3, #31
 8009d1c:	d405      	bmi.n	8009d2a <_vfiprintf_r+0x1fe>
 8009d1e:	89ab      	ldrh	r3, [r5, #12]
 8009d20:	059a      	lsls	r2, r3, #22
 8009d22:	d402      	bmi.n	8009d2a <_vfiprintf_r+0x1fe>
 8009d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d26:	f7fe f929 	bl	8007f7c <__retarget_lock_release_recursive>
 8009d2a:	89ab      	ldrh	r3, [r5, #12]
 8009d2c:	065b      	lsls	r3, r3, #25
 8009d2e:	f53f af1f 	bmi.w	8009b70 <_vfiprintf_r+0x44>
 8009d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d34:	e71e      	b.n	8009b74 <_vfiprintf_r+0x48>
 8009d36:	ab03      	add	r3, sp, #12
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	4b05      	ldr	r3, [pc, #20]	@ (8009d54 <_vfiprintf_r+0x228>)
 8009d3e:	a904      	add	r1, sp, #16
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7fd fe43 	bl	80079cc <_printf_i>
 8009d46:	e7e4      	b.n	8009d12 <_vfiprintf_r+0x1e6>
 8009d48:	0800a2c8 	.word	0x0800a2c8
 8009d4c:	0800a2d2 	.word	0x0800a2d2
 8009d50:	0800749d 	.word	0x0800749d
 8009d54:	08009b09 	.word	0x08009b09
 8009d58:	0800a2ce 	.word	0x0800a2ce

08009d5c <__swbuf_r>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	460e      	mov	r6, r1
 8009d60:	4614      	mov	r4, r2
 8009d62:	4605      	mov	r5, r0
 8009d64:	b118      	cbz	r0, 8009d6e <__swbuf_r+0x12>
 8009d66:	6a03      	ldr	r3, [r0, #32]
 8009d68:	b90b      	cbnz	r3, 8009d6e <__swbuf_r+0x12>
 8009d6a:	f7fd ffdb 	bl	8007d24 <__sinit>
 8009d6e:	69a3      	ldr	r3, [r4, #24]
 8009d70:	60a3      	str	r3, [r4, #8]
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	071a      	lsls	r2, r3, #28
 8009d76:	d501      	bpl.n	8009d7c <__swbuf_r+0x20>
 8009d78:	6923      	ldr	r3, [r4, #16]
 8009d7a:	b943      	cbnz	r3, 8009d8e <__swbuf_r+0x32>
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 f82a 	bl	8009dd8 <__swsetup_r>
 8009d84:	b118      	cbz	r0, 8009d8e <__swbuf_r+0x32>
 8009d86:	f04f 37ff 	mov.w	r7, #4294967295
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	6922      	ldr	r2, [r4, #16]
 8009d92:	1a98      	subs	r0, r3, r2
 8009d94:	6963      	ldr	r3, [r4, #20]
 8009d96:	b2f6      	uxtb	r6, r6
 8009d98:	4283      	cmp	r3, r0
 8009d9a:	4637      	mov	r7, r6
 8009d9c:	dc05      	bgt.n	8009daa <__swbuf_r+0x4e>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f7ff fda7 	bl	80098f4 <_fflush_r>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d1ed      	bne.n	8009d86 <__swbuf_r+0x2a>
 8009daa:	68a3      	ldr	r3, [r4, #8]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	60a3      	str	r3, [r4, #8]
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	6022      	str	r2, [r4, #0]
 8009db6:	701e      	strb	r6, [r3, #0]
 8009db8:	6962      	ldr	r2, [r4, #20]
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d004      	beq.n	8009dca <__swbuf_r+0x6e>
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	07db      	lsls	r3, r3, #31
 8009dc4:	d5e1      	bpl.n	8009d8a <__swbuf_r+0x2e>
 8009dc6:	2e0a      	cmp	r6, #10
 8009dc8:	d1df      	bne.n	8009d8a <__swbuf_r+0x2e>
 8009dca:	4621      	mov	r1, r4
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f7ff fd91 	bl	80098f4 <_fflush_r>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d0d9      	beq.n	8009d8a <__swbuf_r+0x2e>
 8009dd6:	e7d6      	b.n	8009d86 <__swbuf_r+0x2a>

08009dd8 <__swsetup_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4b29      	ldr	r3, [pc, #164]	@ (8009e80 <__swsetup_r+0xa8>)
 8009ddc:	4605      	mov	r5, r0
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	460c      	mov	r4, r1
 8009de2:	b118      	cbz	r0, 8009dec <__swsetup_r+0x14>
 8009de4:	6a03      	ldr	r3, [r0, #32]
 8009de6:	b90b      	cbnz	r3, 8009dec <__swsetup_r+0x14>
 8009de8:	f7fd ff9c 	bl	8007d24 <__sinit>
 8009dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009df0:	0719      	lsls	r1, r3, #28
 8009df2:	d422      	bmi.n	8009e3a <__swsetup_r+0x62>
 8009df4:	06da      	lsls	r2, r3, #27
 8009df6:	d407      	bmi.n	8009e08 <__swsetup_r+0x30>
 8009df8:	2209      	movs	r2, #9
 8009dfa:	602a      	str	r2, [r5, #0]
 8009dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e00:	81a3      	strh	r3, [r4, #12]
 8009e02:	f04f 30ff 	mov.w	r0, #4294967295
 8009e06:	e033      	b.n	8009e70 <__swsetup_r+0x98>
 8009e08:	0758      	lsls	r0, r3, #29
 8009e0a:	d512      	bpl.n	8009e32 <__swsetup_r+0x5a>
 8009e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e0e:	b141      	cbz	r1, 8009e22 <__swsetup_r+0x4a>
 8009e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e14:	4299      	cmp	r1, r3
 8009e16:	d002      	beq.n	8009e1e <__swsetup_r+0x46>
 8009e18:	4628      	mov	r0, r5
 8009e1a:	f7fe ff0d 	bl	8008c38 <_free_r>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	6063      	str	r3, [r4, #4]
 8009e2e:	6923      	ldr	r3, [r4, #16]
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f043 0308 	orr.w	r3, r3, #8
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	6923      	ldr	r3, [r4, #16]
 8009e3c:	b94b      	cbnz	r3, 8009e52 <__swsetup_r+0x7a>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e48:	d003      	beq.n	8009e52 <__swsetup_r+0x7a>
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f000 f883 	bl	8009f58 <__smakebuf_r>
 8009e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e56:	f013 0201 	ands.w	r2, r3, #1
 8009e5a:	d00a      	beq.n	8009e72 <__swsetup_r+0x9a>
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	60a2      	str	r2, [r4, #8]
 8009e60:	6962      	ldr	r2, [r4, #20]
 8009e62:	4252      	negs	r2, r2
 8009e64:	61a2      	str	r2, [r4, #24]
 8009e66:	6922      	ldr	r2, [r4, #16]
 8009e68:	b942      	cbnz	r2, 8009e7c <__swsetup_r+0xa4>
 8009e6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e6e:	d1c5      	bne.n	8009dfc <__swsetup_r+0x24>
 8009e70:	bd38      	pop	{r3, r4, r5, pc}
 8009e72:	0799      	lsls	r1, r3, #30
 8009e74:	bf58      	it	pl
 8009e76:	6962      	ldrpl	r2, [r4, #20]
 8009e78:	60a2      	str	r2, [r4, #8]
 8009e7a:	e7f4      	b.n	8009e66 <__swsetup_r+0x8e>
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e7f7      	b.n	8009e70 <__swsetup_r+0x98>
 8009e80:	2000002c 	.word	0x2000002c

08009e84 <_raise_r>:
 8009e84:	291f      	cmp	r1, #31
 8009e86:	b538      	push	{r3, r4, r5, lr}
 8009e88:	4605      	mov	r5, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	d904      	bls.n	8009e98 <_raise_r+0x14>
 8009e8e:	2316      	movs	r3, #22
 8009e90:	6003      	str	r3, [r0, #0]
 8009e92:	f04f 30ff 	mov.w	r0, #4294967295
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e9a:	b112      	cbz	r2, 8009ea2 <_raise_r+0x1e>
 8009e9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ea0:	b94b      	cbnz	r3, 8009eb6 <_raise_r+0x32>
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 f830 	bl	8009f08 <_getpid_r>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	4601      	mov	r1, r0
 8009eac:	4628      	mov	r0, r5
 8009eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eb2:	f000 b817 	b.w	8009ee4 <_kill_r>
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d00a      	beq.n	8009ed0 <_raise_r+0x4c>
 8009eba:	1c59      	adds	r1, r3, #1
 8009ebc:	d103      	bne.n	8009ec6 <_raise_r+0x42>
 8009ebe:	2316      	movs	r3, #22
 8009ec0:	6003      	str	r3, [r0, #0]
 8009ec2:	2001      	movs	r0, #1
 8009ec4:	e7e7      	b.n	8009e96 <_raise_r+0x12>
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ecc:	4620      	mov	r0, r4
 8009ece:	4798      	blx	r3
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	e7e0      	b.n	8009e96 <_raise_r+0x12>

08009ed4 <raise>:
 8009ed4:	4b02      	ldr	r3, [pc, #8]	@ (8009ee0 <raise+0xc>)
 8009ed6:	4601      	mov	r1, r0
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	f7ff bfd3 	b.w	8009e84 <_raise_r>
 8009ede:	bf00      	nop
 8009ee0:	2000002c 	.word	0x2000002c

08009ee4 <_kill_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4d07      	ldr	r5, [pc, #28]	@ (8009f04 <_kill_r+0x20>)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4604      	mov	r4, r0
 8009eec:	4608      	mov	r0, r1
 8009eee:	4611      	mov	r1, r2
 8009ef0:	602b      	str	r3, [r5, #0]
 8009ef2:	f7f8 fc99 	bl	8002828 <_kill>
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	d102      	bne.n	8009f00 <_kill_r+0x1c>
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	b103      	cbz	r3, 8009f00 <_kill_r+0x1c>
 8009efe:	6023      	str	r3, [r4, #0]
 8009f00:	bd38      	pop	{r3, r4, r5, pc}
 8009f02:	bf00      	nop
 8009f04:	200006d8 	.word	0x200006d8

08009f08 <_getpid_r>:
 8009f08:	f7f8 bc86 	b.w	8002818 <_getpid>

08009f0c <__swhatbuf_r>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	460c      	mov	r4, r1
 8009f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f14:	2900      	cmp	r1, #0
 8009f16:	b096      	sub	sp, #88	@ 0x58
 8009f18:	4615      	mov	r5, r2
 8009f1a:	461e      	mov	r6, r3
 8009f1c:	da0d      	bge.n	8009f3a <__swhatbuf_r+0x2e>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f24:	f04f 0100 	mov.w	r1, #0
 8009f28:	bf14      	ite	ne
 8009f2a:	2340      	movne	r3, #64	@ 0x40
 8009f2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f30:	2000      	movs	r0, #0
 8009f32:	6031      	str	r1, [r6, #0]
 8009f34:	602b      	str	r3, [r5, #0]
 8009f36:	b016      	add	sp, #88	@ 0x58
 8009f38:	bd70      	pop	{r4, r5, r6, pc}
 8009f3a:	466a      	mov	r2, sp
 8009f3c:	f000 f848 	bl	8009fd0 <_fstat_r>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	dbec      	blt.n	8009f1e <__swhatbuf_r+0x12>
 8009f44:	9901      	ldr	r1, [sp, #4]
 8009f46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f4e:	4259      	negs	r1, r3
 8009f50:	4159      	adcs	r1, r3
 8009f52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f56:	e7eb      	b.n	8009f30 <__swhatbuf_r+0x24>

08009f58 <__smakebuf_r>:
 8009f58:	898b      	ldrh	r3, [r1, #12]
 8009f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f5c:	079d      	lsls	r5, r3, #30
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460c      	mov	r4, r1
 8009f62:	d507      	bpl.n	8009f74 <__smakebuf_r+0x1c>
 8009f64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	6123      	str	r3, [r4, #16]
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	6163      	str	r3, [r4, #20]
 8009f70:	b003      	add	sp, #12
 8009f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f74:	ab01      	add	r3, sp, #4
 8009f76:	466a      	mov	r2, sp
 8009f78:	f7ff ffc8 	bl	8009f0c <__swhatbuf_r>
 8009f7c:	9f00      	ldr	r7, [sp, #0]
 8009f7e:	4605      	mov	r5, r0
 8009f80:	4639      	mov	r1, r7
 8009f82:	4630      	mov	r0, r6
 8009f84:	f7fe fecc 	bl	8008d20 <_malloc_r>
 8009f88:	b948      	cbnz	r0, 8009f9e <__smakebuf_r+0x46>
 8009f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8e:	059a      	lsls	r2, r3, #22
 8009f90:	d4ee      	bmi.n	8009f70 <__smakebuf_r+0x18>
 8009f92:	f023 0303 	bic.w	r3, r3, #3
 8009f96:	f043 0302 	orr.w	r3, r3, #2
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	e7e2      	b.n	8009f64 <__smakebuf_r+0xc>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	6020      	str	r0, [r4, #0]
 8009fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fa6:	81a3      	strh	r3, [r4, #12]
 8009fa8:	9b01      	ldr	r3, [sp, #4]
 8009faa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fae:	b15b      	cbz	r3, 8009fc8 <__smakebuf_r+0x70>
 8009fb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f000 f81d 	bl	8009ff4 <_isatty_r>
 8009fba:	b128      	cbz	r0, 8009fc8 <__smakebuf_r+0x70>
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	f023 0303 	bic.w	r3, r3, #3
 8009fc2:	f043 0301 	orr.w	r3, r3, #1
 8009fc6:	81a3      	strh	r3, [r4, #12]
 8009fc8:	89a3      	ldrh	r3, [r4, #12]
 8009fca:	431d      	orrs	r5, r3
 8009fcc:	81a5      	strh	r5, [r4, #12]
 8009fce:	e7cf      	b.n	8009f70 <__smakebuf_r+0x18>

08009fd0 <_fstat_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d07      	ldr	r5, [pc, #28]	@ (8009ff0 <_fstat_r+0x20>)
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	4611      	mov	r1, r2
 8009fdc:	602b      	str	r3, [r5, #0]
 8009fde:	f7f8 fc83 	bl	80028e8 <_fstat>
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	d102      	bne.n	8009fec <_fstat_r+0x1c>
 8009fe6:	682b      	ldr	r3, [r5, #0]
 8009fe8:	b103      	cbz	r3, 8009fec <_fstat_r+0x1c>
 8009fea:	6023      	str	r3, [r4, #0]
 8009fec:	bd38      	pop	{r3, r4, r5, pc}
 8009fee:	bf00      	nop
 8009ff0:	200006d8 	.word	0x200006d8

08009ff4 <_isatty_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4d06      	ldr	r5, [pc, #24]	@ (800a010 <_isatty_r+0x1c>)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	602b      	str	r3, [r5, #0]
 800a000:	f7f8 fc82 	bl	8002908 <_isatty>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_isatty_r+0x1a>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_isatty_r+0x1a>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	200006d8 	.word	0x200006d8

0800a014 <sqrtf>:
 800a014:	b508      	push	{r3, lr}
 800a016:	ed2d 8b02 	vpush	{d8}
 800a01a:	eeb0 8a40 	vmov.f32	s16, s0
 800a01e:	f000 f817 	bl	800a050 <__ieee754_sqrtf>
 800a022:	eeb4 8a48 	vcmp.f32	s16, s16
 800a026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02a:	d60c      	bvs.n	800a046 <sqrtf+0x32>
 800a02c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a04c <sqrtf+0x38>
 800a030:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a038:	d505      	bpl.n	800a046 <sqrtf+0x32>
 800a03a:	f7fd ff73 	bl	8007f24 <__errno>
 800a03e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a042:	2321      	movs	r3, #33	@ 0x21
 800a044:	6003      	str	r3, [r0, #0]
 800a046:	ecbd 8b02 	vpop	{d8}
 800a04a:	bd08      	pop	{r3, pc}
 800a04c:	00000000 	.word	0x00000000

0800a050 <__ieee754_sqrtf>:
 800a050:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a054:	4770      	bx	lr
	...

0800a058 <_init>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr

0800a064 <_fini>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	bf00      	nop
 800a068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06a:	bc08      	pop	{r3}
 800a06c:	469e      	mov	lr, r3
 800a06e:	4770      	bx	lr
